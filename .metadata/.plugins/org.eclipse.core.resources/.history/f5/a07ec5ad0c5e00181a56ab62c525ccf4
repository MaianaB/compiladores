grammar com.ufcg.compiladores.Go with org.eclipse.xtext.common.Terminals

generate go "http://www.ufcg.com/compiladores/Go"

Type:
	TypeName | TypeLit=TypeLit | "(" Type ")"
;

TypeName:
	identifier | QualifiedIdent
;

TypeLit:
	ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType
;

ArrayLength:
	Expression
;

ArrayType:
	"[" ArrayLength "]" Type=Type
;

ElementType:
	Type=Type
;

SliceType:
	"[" "]" ElementType
;

StructType:
	"struct" "{" (FieldDecl=FieldDecl ";")* ";"
;

FieldDecl:
	(IdentifierList Type | EmbeddedField)(Tag)?
;

EmbeddedField:
	("*")? TypeName
;

Tag:
	string_lit
;

PointerType:
	"*" BaseType
;

BaseType:
	Type=Type
;

FunctionType:
	"func" Signature=Signature
;

Signature:
	Parameters (Result=Result)?
;

Result:
	Parameters | Type
;

Parameters:
	"(" (ParameterList (",")?)? ")"
;

ParameterList:
	ParameterDecl ("," ParameterDecl=ParameterDecl)?
;

ParameterDecl:
	(IdentifierList)? ("...")? Type
;

InterfaceType:
	"interface" "{" (MethodSpec=MethodSpec ";")? "}"
;

MethodSpec:
	MethodName Signature | InterfaceTypeName
;

MethodName:
	identifier
;

InterfaceTypeName:
	TypeName
;

MapType:
	"map" "[" KeyType "]" ElementType=ElementType
;

KeyType:
	Type=Type
;

ChannelType:
	("chan" | "chan" "<-" | "<-" "chan") ElementType
;

Block:
	"{" StatementList "}"
;

StatementList:
	(Statement ";")?
;

Declaration:
	ConstDecl | TypeDecl | VarDecl
;

TopLevelDecl:
	Declaration | FunctionDecl | MethodDecl
;

ConstDecl:
	"const" (ConstSpec | "(" (ConstSpec ";")? ")")
;

ConstSpec:
	IdentifierList ((Type)? "=" ExpressionList=ExpressionList)?
;

IdentifierList:
	identifier ("," identifier)?
;

ExpressionList:
	Expression ("," Expression=Expression)?
;

TypeDecl:
	"type" (TypeSpec | "(" (TypeSpec ";")? ")")
;

TypeSpec:
	AliasDecl | TypeDef
;

AliasDecl:
	identifier "=" Type
;

TypeDef:
	identifier Type
;

VarDecl:
	"var" (VarSpec | "(" (VarSpec ";")? ")")
;

VarSpec:
	IdentifierList (Type ("=" ExpressionList=ExpressionList)? | "=" ExpressionList)
;

ShortVarDecl:
	IdentifierList ":=" ExpressionList
;

FunctionDecl:
	"func" FunctionName Signature (FunctionBody=FunctionBody)?
;

FunctionName:
	identifier
;

FunctionBody:
	Block
;

MethodDecl:
	"func" Receiver MethodName Signature=Signature (FunctionBody=FunctionBody)?
;

Receiver:
	Parameters
;

Operand:
	Literal | OperandName | "(" Expression ")"
;

Literal:
	BasicLit | CompositeLit | FunctionLit
;

BasicLit:
	int_lit | float_lit | rune_lit | string_lit
;

OperandName:
	identifier | QualifiedIdent
;

QualifiedIdent:
	PackageName "." identifier
;

CompositeLit:
	LiteralType LiteralValue=LiteralValue
;

LiteralType:
	StructType | ArrayType=ArrayType | "[" "..." "]" ElementType | SliceType | MapType | TypeName
;

LiteralValue:
	"{" (ElementList=ElementList (",")?)? "}"
;

ElementList:
	KeyedElement ("," KeyedElement=KeyedElement)?
;

Element:
	Expression | LiteralValue
;

KeyedElement:
	(Key ":")? Element=Element
;

Key:
	FieldName | Expression | LiteralValue
;

FieldName:
	identifier
;

FunctionLit:
	"func" Signature FunctionBody=FunctionBody
;

PrimaryExpr:
	Operand PrimaryExprLinha=PrimaryExprLinha | Conversion PrimaryExprLinha=PrimaryExprLinha | MethodExpr PrimaryExprLinha=PrimaryExprLinha
;

PrimaryExprLinha:
//	(Selector PrimaryExprLinha | 
//		Index PrimaryExprLinha | 
//		Slice PrimaryExprLinha | 
//		TypeAssertion PrimaryExprLinha | 
//		Arguments PrimaryExprLinha)?
	"fa"
;

Selector:
	"." identifier
;

Index:
	"[" Expression "]"
;

Slice:
	"[" (Expression)? ":" (Expression=Expression)? ":" Expression=Expression "]" 
;

SliceLinha:
	(":" Expression) "]"
;

TypeAssertion:
	"." "(" Type ")"
;

Arguments:
	"(" ( (ExpressionList | Type ("," ExpressionList=ExpressionList)?) ("...")? (",")?)? ")"
;

MethodExpr:
	ReceiverType "." MethodName
;

ReceiverType:
	Type
;

Expression:
	UnaryExpr ExpressionLinha=ExpressionLinha
;

ExpressionLinha:
	(binary_op Expression)?
;

UnaryExpr:
	PrimaryExpr=PrimaryExpr | unary_op UnaryExpr
;

binary_op:
	"||" | "&&" | rel_op | add_op | mul_op
;

rel_op:
	"==" | "!=" | "<" | "<=" | ">" | ">="
;

add_op:
	"+" | "-" | "|" | "Ë†"
;

mul_op:
	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
;

unary_op:
	"+" | "-" | "!" | "^" | "*" | "&" | "<-"
;

Conversion:
	Type "(" Expression=Expression (",")? ")"
;

Statement:
	Declaration | LabeledStmt | SimpleStmt |
	GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
	FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
	DeferStmt
;

SimpleStmt:
	EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl
;

EmptyStmt:
	{None}
;

LabeledStmt:
	Label ":" Statement=Statement
;

Label:
	identifier
;

ExpressionStmt:
	Expression
;

SendStmt:
	Channel "<-" Expression=Expression
;

Channel:
	Expression
;

IncDecStmt:
	Expression ("++" | "--")
;

Assignment:
	ExpressionList assign_op ExpressionList
;

assign_op:
	(add_op | mul_op)? "="
;

IfStmt:
	"if" (SimpleStmt ";")? Expression=Expression Block=Block ("else" (IfStmt=IfStmt | Block=Block))?
;

SwitchStmt:
	ExprSwitchStmt | TypeSwitchStmt
;

ExprSwitchStmt:
	"switch" (SimpleStmt ";")? (Expression=Expression)? "{" (ExprCaseClause=ExprCaseClause)* "}"
;

ExprCaseClause:
	ExprSwitchCase ":" StatementList=StatementList
;

ExprSwitchCase:
	"case" ExpressionList | "default"
;

TypeSwitchStmt:
	"switch" (SimpleStmt ";")? TypeSwitchGuard=TypeSwitchGuard "{" (TypeCaseClause=TypeCaseClause)* "}"
;

TypeSwitchGuard:
	(identifier ":=")? PrimaryExpr "." "(" "type" ")"
;

TypeCaseClause:
	TypeSwitchCase ":" StatementList=StatementList
;

TypeSwitchCase:
	"case" TypeList | "default"
;

TypeList:
	Type ("," Type=Type)*
;

ForStmt:
	"for"(Condition | ForClause | RangeClause)? Block=Block
;

Condition:
	Expression
;

ForClause:
	(InitStmt)? ";" (Condition=Condition)? ";" (PostStmt=PostStmt)?
;

InitStmt:
	SimpleStmt
;

PostStmt:
	SimpleStmt
;

RangeClause:
	(ExpressionList "=" | IdentifierList ":=")? "range" Expression=Expression
;

GoStmt:
	"go" Expression
;

SelectStmt:
	"select" "{" (CommClause=CommClause)* "}"
;
 
CommClause:
 	CommCase ":" StatementList=StatementList
;
 
CommCase:
 	"case" (SendStmt | RecvStmt) | "default"
;
 
RecvStmt:
 	(ExpressionList "=" | IdentifierList ":=")? RecvExpr=RecvExpr
;
 
 RecvExpr:
 	Expression
 ;
 
 ReturnStmt:
 	"return" (ExpressionList)?
 ;
 
 BreakStmt:
 	"break" (Label)?
 ;
 
 ContinueStmt:
 	"continue" (Label)?
 	
 ;
 
 GotoStmt:
 	"goto" Label
 ;
 
 FallthroughStmt:
 	"fallthrough"
 ;
 
 DeferStmt:
 	"defer" Expression
 ;
 
 SouceFile:
 	PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")?
 ;
 
 PackageClause:
 	"package" PackageName
 ;
 
 PackageName:
 	identifier
 ;

comments:
	LETTER*"//"LETTER* | LETTER*"/*"LETTER*"*/";
	
identifier:
	LETTER (LETTER | DECIMAL_DIGIT)*;
	
int_lit:
	decimal_lit | octal_lit | hex_lit
;

decimal_lit:
	DECIMAL_DIGIT (DECIMAL_DIGIT)*
;

octal_lit:
	"0" OCTAL_DIGIT*
;

hex_lit:
	"0" ( "x" | "X" ) HEX_DIGIT HEX_DIGIT*
;

float_lit:
	decimals "." (decimals)? (exponent)? | decimals exponent | "." decimals (exponent)?
;

string_lit:
	raw_string_lit | interpreted_string_lit
;

raw_string_lit:
	"'" (unicode_char | newline)? "'"
;

interpreted_string_lit:
	'"' (unicode_value | byte_value)? '"'
;

unicode_char:
	"?" | "." | "," | "!"
;

newline:
	"U+000A"
;

decimals: 
	DECIMAL_DIGIT DECIMAL_DIGIT*
;

exponent:
	("e" | "E") ("+" | "-")? decimals
;

imaginary_lit:
	(decimals | float_lit) "i"
;

rune_lit:
	"'" (unicode_value | byte_value) "'"
;

unicode_value:
	LETTER | little_u_value | big_u_value | escaped_char 
;

byte_value:
	octal_byte_value | hex_byte_value
;

octal_byte_value:
	CHAR OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT	
;

hex_byte_value:
	CHAR "x" HEX_DIGIT HEX_DIGIT
;

little_u_value:
	CHAR "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
;

big_u_value:
	CHAR "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
;

escaped_char:
	CHAR ("a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"')
;

CHAR: "\'";


terminal LETTER:
	('a'..'z'|'A'..'Z'|'_');
	
terminal OCTAL_DIGIT:
	("0".."7");
	
terminal DECIMAL_DIGIT:
	("0".."9");

terminal HEX_DIGIT:
	(DECIMAL_DIGIT | "A".."F" | "a".."f");