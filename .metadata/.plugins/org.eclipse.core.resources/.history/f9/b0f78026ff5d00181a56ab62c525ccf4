/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.ufcg.compiladores.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ufcg.compiladores.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ufcg.compiladores.services.GoGrammarAccess;

}

@parser::members {

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0());
			}
			lv_greetings_0_0=ruleGreeting
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"com.ufcg.compiladores.Go.Greeting");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	iv_ruleGreeting=ruleGreeting
	{ $current=$iv_ruleGreeting.current; }
	EOF;

// Rule Greeting
ruleGreeting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Hello'
		{
			newLeafNode(otherlv_0, grammarAccess.getGreetingAccess().getHelloKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGreetingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='!'
		{
			newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getTypeNameParserRuleCall_0());
		}
		ruleTypeName
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeLitTypeLitParserRuleCall_1_0());
				}
				lv_TypeLit_1_0=ruleTypeLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"TypeLit",
						lv_TypeLit_1_0,
						"com.ufcg.compiladores.Go.TypeLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeAccess().getTypeParserRuleCall_2_1());
			}
			this_Type_3=ruleType
			{
				$current = $this_Type_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current.getText(); }
	EOF;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getIdentifierParserRuleCall_0());
		}
		this_identifier_0=ruleidentifier
		{
			$current.merge(this_identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1());
		}
		this_QualifiedIdent_1=ruleQualifiedIdent
		{
			$current.merge(this_QualifiedIdent_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeLit
entryRuleTypeLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLitRule()); }
	iv_ruleTypeLit=ruleTypeLit
	{ $current=$iv_ruleTypeLit.current; }
	EOF;

// Rule TypeLit
ruleTypeLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getArrayTypeParserRuleCall_0());
		}
		this_ArrayType_0=ruleArrayType
		{
			$current = $this_ArrayType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getStructTypeParserRuleCall_1());
		}
		this_StructType_1=ruleStructType
		{
			$current = $this_StructType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getPointerTypeParserRuleCall_2());
		}
		this_PointerType_2=rulePointerType
		{
			$current = $this_PointerType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getFunctionTypeParserRuleCall_3());
		}
		this_FunctionType_3=ruleFunctionType
		{
			$current = $this_FunctionType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getInterfaceTypeParserRuleCall_4());
		}
		this_InterfaceType_4=ruleInterfaceType
		{
			$current = $this_InterfaceType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getSliceTypeParserRuleCall_5());
		}
		this_SliceType_5=ruleSliceType
		{
			$current = $this_SliceType_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getMapTypeParserRuleCall_6());
		}
		this_MapType_6=ruleMapType
		{
			$current = $this_MapType_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getChannelTypeParserRuleCall_7());
		}
		this_ChannelType_7=ruleChannelType
		{
			$current = $this_ChannelType_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArrayLength
entryRuleArrayLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayLengthRule()); }
	iv_ruleArrayLength=ruleArrayLength
	{ $current=$iv_ruleArrayLength.current; }
	EOF;

// Rule ArrayLength
ruleArrayLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArrayLengthAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleArrayType
entryRuleArrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_ruleArrayType=ruleArrayType
	{ $current=$iv_ruleArrayType.current; }
	EOF;

// Rule ArrayType
ruleArrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getArrayTypeAccess().getArrayLengthParserRuleCall_1());
		}
		this_ArrayLength_1=ruleArrayLength
		{
			$current = $this_ArrayLength_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_Type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"Type",
						lv_Type_3_0,
						"com.ufcg.compiladores.Go.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElementType
entryRuleElementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementTypeRule()); }
	iv_ruleElementType=ruleElementType
	{ $current=$iv_ruleElementType.current; }
	EOF;

// Rule ElementType
ruleElementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getElementTypeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_Type_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getElementTypeRule());
				}
				set(
					$current,
					"Type",
					lv_Type_0_0,
					"com.ufcg.compiladores.Go.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSliceType
entryRuleSliceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSliceTypeRule()); }
	iv_ruleSliceType=ruleSliceType
	{ $current=$iv_ruleSliceType.current; }
	EOF;

// Rule SliceType
ruleSliceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSliceTypeAccess().getLeftSquareBracketKeyword_0());
		}
		otherlv_1=']'
		{
			newLeafNode(otherlv_1, grammarAccess.getSliceTypeAccess().getRightSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getSliceTypeAccess().getElementTypeParserRuleCall_2());
		}
		this_ElementType_2=ruleElementType
		{
			$current = $this_ElementType_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStructType
entryRuleStructType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); }
	iv_ruleStructType=ruleStructType
	{ $current=$iv_ruleStructType.current; }
	EOF;

// Rule StructType
ruleStructType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='struct'
		{
			newLeafNode(otherlv_0, grammarAccess.getStructTypeAccess().getStructKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStructTypeAccess().getFieldDeclFieldDeclParserRuleCall_2_0_0());
					}
					lv_FieldDecl_2_0=ruleFieldDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructTypeRule());
						}
						set(
							$current,
							"FieldDecl",
							lv_FieldDecl_2_0,
							"com.ufcg.compiladores.Go.FieldDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getStructTypeAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getStructTypeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleFieldDecl
entryRuleFieldDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_ruleFieldDecl=ruleFieldDecl
	{ $current=$iv_ruleFieldDecl.current; }
	EOF;

// Rule FieldDecl
ruleFieldDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getIdentifierListParserRuleCall_0_0_0());
				}
				ruleIdentifierList
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeParserRuleCall_0_0_1());
				}
				this_Type_1=ruleType
				{
					$current = $this_Type_1.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getFieldDeclAccess().getEmbeddedFieldParserRuleCall_0_1());
			}
			ruleEmbeddedField
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getFieldDeclAccess().getTagParserRuleCall_1());
			}
			ruleTag
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleEmbeddedField
entryRuleEmbeddedField returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEmbeddedFieldRule()); }
	iv_ruleEmbeddedField=ruleEmbeddedField
	{ $current=$iv_ruleEmbeddedField.current.getText(); }
	EOF;

// Rule EmbeddedField
ruleEmbeddedField returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEmbeddedFieldAccess().getAsteriskKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getEmbeddedFieldAccess().getTypeNameParserRuleCall_1());
		}
		this_TypeName_1=ruleTypeName
		{
			$current.merge(this_TypeName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTag
entryRuleTag returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	iv_ruleTag=ruleTag
	{ $current=$iv_ruleTag.current.getText(); }
	EOF;

// Rule Tag
ruleTag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTagAccess().getString_litParserRuleCall());
	}
	this_string_lit_0=rulestring_lit
	{
		$current.merge(this_string_lit_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePointerType
entryRulePointerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulePointerType=rulePointerType
	{ $current=$iv_rulePointerType.current; }
	EOF;

// Rule PointerType
rulePointerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointerTypeAccess().getAsteriskKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getPointerTypeAccess().getBaseTypeParserRuleCall_1());
		}
		this_BaseType_1=ruleBaseType
		{
			$current = $this_BaseType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBaseType
entryRuleBaseType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseTypeRule()); }
	iv_ruleBaseType=ruleBaseType
	{ $current=$iv_ruleBaseType.current; }
	EOF;

// Rule BaseType
ruleBaseType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBaseTypeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_Type_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBaseTypeRule());
				}
				set(
					$current,
					"Type",
					lv_Type_0_0,
					"com.ufcg.compiladores.Go.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleFunctionType
entryRuleFunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_ruleFunctionType=ruleFunctionType
	{ $current=$iv_ruleFunctionType.current; }
	EOF;

// Rule FunctionType
ruleFunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionTypeAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getSignatureSignatureParserRuleCall_1_0());
				}
				lv_Signature_1_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"Signature",
						lv_Signature_1_0,
						"com.ufcg.compiladores.Go.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSignature
entryRuleSignature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_ruleSignature=ruleSignature
	{ $current=$iv_ruleSignature.current; }
	EOF;

// Rule Signature
ruleSignature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current = $this_Parameters_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureAccess().getResultResultParserRuleCall_1_0());
				}
				lv_Result_1_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureRule());
					}
					set(
						$current,
						"Result",
						lv_Result_1_0,
						"com.ufcg.compiladores.Go.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResultAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current = $this_Parameters_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getResultAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current = $this_Type_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current; }
	EOF;

// Rule Parameters
ruleParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0());
			}
			this_ParameterList_1=ruleParameterList
			{
				$current = $this_ParameterList_1.current;
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current; }
	EOF;

// Rule ParameterList
ruleParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0());
		}
		this_ParameterDecl_0=ruleParameterDecl
		{
			$current = $this_ParameterDecl_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParameterDeclParserRuleCall_1_1_0());
					}
					lv_ParameterDecl_2_0=ruleParameterDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						set(
							$current,
							"ParameterDecl",
							lv_ParameterDecl_2_0,
							"com.ufcg.compiladores.Go.ParameterDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParameterDecl
entryRuleParameterDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclRule()); }
	iv_ruleParameterDecl=ruleParameterDecl
	{ $current=$iv_ruleParameterDecl.current; }
	EOF;

// Rule ParameterDecl
ruleParameterDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameterDeclAccess().getIdentifierListParserRuleCall_0());
			}
			ruleIdentifierList
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			otherlv_1='...'
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameterDeclAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current = $this_Type_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInterfaceType
entryRuleInterfaceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeRule()); }
	iv_ruleInterfaceType=ruleInterfaceType
	{ $current=$iv_ruleInterfaceType.current; }
	EOF;

// Rule InterfaceType
ruleInterfaceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInterfaceTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInterfaceTypeAccess().getMethodSpecMethodSpecParserRuleCall_2_0_0());
					}
					lv_MethodSpec_2_0=ruleMethodSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterfaceTypeRule());
						}
						set(
							$current,
							"MethodSpec",
							lv_MethodSpec_2_0,
							"com.ufcg.compiladores.Go.MethodSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getInterfaceTypeAccess().getSemicolonKeyword_2_1());
			}
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getInterfaceTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMethodSpec
entryRuleMethodSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodSpecRule()); }
	iv_ruleMethodSpec=ruleMethodSpec
	{ $current=$iv_ruleMethodSpec.current; }
	EOF;

// Rule MethodSpec
ruleMethodSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMethodSpecAccess().getMethodNameParserRuleCall_0_0());
			}
			ruleMethodName
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMethodSpecAccess().getSignatureParserRuleCall_0_1());
			}
			this_Signature_1=ruleSignature
			{
				$current = $this_Signature_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getMethodSpecAccess().getInterfaceTypeNameParserRuleCall_1());
		}
		ruleInterfaceTypeName
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMethodName
entryRuleMethodName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodNameRule()); }
	iv_ruleMethodName=ruleMethodName
	{ $current=$iv_ruleMethodName.current.getText(); }
	EOF;

// Rule MethodName
ruleMethodName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMethodNameAccess().getIdentifierParserRuleCall());
	}
	this_identifier_0=ruleidentifier
	{
		$current.merge(this_identifier_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleInterfaceTypeName
entryRuleInterfaceTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeNameRule()); }
	iv_ruleInterfaceTypeName=ruleInterfaceTypeName
	{ $current=$iv_ruleInterfaceTypeName.current.getText(); }
	EOF;

// Rule InterfaceTypeName
ruleInterfaceTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInterfaceTypeNameAccess().getTypeNameParserRuleCall());
	}
	this_TypeName_0=ruleTypeName
	{
		$current.merge(this_TypeName_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleMapType
entryRuleMapType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	iv_ruleMapType=ruleMapType
	{ $current=$iv_ruleMapType.current; }
	EOF;

// Rule MapType
ruleMapType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='map'
		{
			newLeafNode(otherlv_0, grammarAccess.getMapTypeAccess().getMapKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLeftSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getMapTypeAccess().getKeyTypeParserRuleCall_2());
		}
		this_KeyType_2=ruleKeyType
		{
			$current = $this_KeyType_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getMapTypeAccess().getRightSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTypeAccess().getElementTypeElementTypeParserRuleCall_4_0());
				}
				lv_ElementType_4_0=ruleElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTypeRule());
					}
					set(
						$current,
						"ElementType",
						lv_ElementType_4_0,
						"com.ufcg.compiladores.Go.ElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleKeyType
entryRuleKeyType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyTypeRule()); }
	iv_ruleKeyType=ruleKeyType
	{ $current=$iv_ruleKeyType.current; }
	EOF;

// Rule KeyType
ruleKeyType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getKeyTypeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_Type_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getKeyTypeRule());
				}
				set(
					$current,
					"Type",
					lv_Type_0_0,
					"com.ufcg.compiladores.Go.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleChannelType
entryRuleChannelType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannelTypeRule()); }
	iv_ruleChannelType=ruleChannelType
	{ $current=$iv_ruleChannelType.current; }
	EOF;

// Rule ChannelType
ruleChannelType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='chan'
			{
				newLeafNode(otherlv_0, grammarAccess.getChannelTypeAccess().getChanKeyword_0_0());
			}
			    |
			(
				otherlv_1='chan'
				{
					newLeafNode(otherlv_1, grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_0());
				}
				otherlv_2='<-'
				{
					newLeafNode(otherlv_2, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_1());
				}
			)
			    |
			(
				otherlv_3='<-'
				{
					newLeafNode(otherlv_3, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_2_0());
				}
				otherlv_4='chan'
				{
					newLeafNode(otherlv_4, grammarAccess.getChannelTypeAccess().getChanKeyword_0_2_1());
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getChannelTypeAccess().getElementTypeParserRuleCall_1());
		}
		this_ElementType_5=ruleElementType
		{
			$current = $this_ElementType_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current.getText(); }
	EOF;

// Rule Block
ruleBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getStatementListParserRuleCall_1());
		}
		this_StatementList_1=ruleStatementList
		{
			$current.merge(this_StatementList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleStatementList
entryRuleStatementList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_ruleStatementList=ruleStatementList
	{ $current=$iv_ruleStatementList.current.getText(); }
	EOF;

// Rule StatementList
ruleStatementList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementListAccess().getStatementParserRuleCall_0());
		}
		this_Statement_0=ruleStatement
		{
			$current.merge(this_Statement_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatementListAccess().getSemicolonKeyword_1());
		}
	)?
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getConstDeclParserRuleCall_0());
		}
		this_ConstDecl_0=ruleConstDecl
		{
			$current = $this_ConstDecl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_1());
		}
		this_TypeDecl_1=ruleTypeDecl
		{
			$current = $this_TypeDecl_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_2());
		}
		this_VarDecl_2=ruleVarDecl
		{
			$current = $this_VarDecl_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstDecl
entryRuleConstDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstDeclRule()); }
	iv_ruleConstDecl=ruleConstDecl
	{ $current=$iv_ruleConstDecl.current; }
	EOF;

// Rule ConstDecl
ruleConstDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstDeclAccess().getConstKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_0());
			}
			this_ConstSpec_1=ruleConstSpec
			{
				$current = $this_ConstSpec_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getConstDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_1_1_0());
					}
					this_ConstSpec_3=ruleConstSpec
					{
						$current = $this_ConstSpec_3.current;
						afterParserOrEnumRuleCall();
					}
					otherlv_4=';'
					{
						newLeafNode(otherlv_4, grammarAccess.getConstDeclAccess().getSemicolonKeyword_1_1_1_1());
					}
				)?
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getConstDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleConstSpec
entryRuleConstSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstSpecRule()); }
	iv_ruleConstSpec=ruleConstSpec
	{ $current=$iv_ruleConstSpec.current; }
	EOF;

// Rule ConstSpec
ruleConstSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstSpecAccess().getIdentifierListParserRuleCall_0());
		}
		ruleIdentifierList
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstSpecAccess().getTypeParserRuleCall_1_0());
				}
				this_Type_1=ruleType
				{
					$current = $this_Type_1.current;
					afterParserOrEnumRuleCall();
				}
			)?
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getConstSpecAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstSpecAccess().getExpressionListExpressionListParserRuleCall_1_2_0());
					}
					lv_ExpressionList_3_0=ruleExpressionList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstSpecRule());
						}
						set(
							$current,
							"ExpressionList",
							lv_ExpressionList_3_0,
							"com.ufcg.compiladores.Go.ExpressionList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleIdentifierList
entryRuleIdentifierList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleIdentifierList=ruleIdentifierList
	{ $current=$iv_ruleIdentifierList.current.getText(); }
	EOF;

// Rule IdentifierList
ruleIdentifierList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentifierParserRuleCall_0());
		}
		this_identifier_0=ruleidentifier
		{
			$current.merge(this_identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentifierParserRuleCall_1_1());
			}
			this_identifier_2=ruleidentifier
			{
				$current.merge(this_identifier_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	iv_ruleExpressionList=ruleExpressionList
	{ $current=$iv_ruleExpressionList.current; }
	EOF;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current = $this_Expression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_Expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListRule());
						}
						set(
							$current,
							"Expression",
							lv_Expression_2_0,
							"com.ufcg.compiladores.Go.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	iv_ruleTypeDecl=ruleTypeDecl
	{ $current=$iv_ruleTypeDecl.current; }
	EOF;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_0());
			}
			this_TypeSpec_1=ruleTypeSpec
			{
				$current = $this_TypeSpec_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_1_1_0());
					}
					this_TypeSpec_3=ruleTypeSpec
					{
						$current = $this_TypeSpec_3.current;
						afterParserOrEnumRuleCall();
					}
					otherlv_4=';'
					{
						newLeafNode(otherlv_4, grammarAccess.getTypeDeclAccess().getSemicolonKeyword_1_1_1_1());
					}
				)?
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getTypeDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleTypeSpec
entryRuleTypeSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSpecRule()); }
	iv_ruleTypeSpec=ruleTypeSpec
	{ $current=$iv_ruleTypeSpec.current; }
	EOF;

// Rule TypeSpec
ruleTypeSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeSpecAccess().getAliasDeclParserRuleCall_0());
		}
		this_AliasDecl_0=ruleAliasDecl
		{
			$current = $this_AliasDecl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeSpecAccess().getTypeDefParserRuleCall_1());
		}
		this_TypeDef_1=ruleTypeDef
		{
			$current = $this_TypeDef_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAliasDecl
entryRuleAliasDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAliasDeclRule()); }
	iv_ruleAliasDecl=ruleAliasDecl
	{ $current=$iv_ruleAliasDecl.current; }
	EOF;

// Rule AliasDecl
ruleAliasDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAliasDeclAccess().getIdentifierParserRuleCall_0());
		}
		ruleidentifier
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAliasDeclAccess().getEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getAliasDeclAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current = $this_Type_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	iv_ruleTypeDef=ruleTypeDef
	{ $current=$iv_ruleTypeDef.current; }
	EOF;

// Rule TypeDef
ruleTypeDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeDefAccess().getIdentifierParserRuleCall_0());
		}
		ruleidentifier
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getTypeDefAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current = $this_Type_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_ruleVarDecl=ruleVarDecl
	{ $current=$iv_ruleVarDecl.current; }
	EOF;

// Rule VarDecl
ruleVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarDeclAccess().getVarKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_0());
			}
			this_VarSpec_1=ruleVarSpec
			{
				$current = $this_VarSpec_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_1_1_0());
					}
					this_VarSpec_3=ruleVarSpec
					{
						$current = $this_VarSpec_3.current;
						afterParserOrEnumRuleCall();
					}
					otherlv_4=';'
					{
						newLeafNode(otherlv_4, grammarAccess.getVarDeclAccess().getSemicolonKeyword_1_1_1_1());
					}
				)?
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleVarSpec
entryRuleVarSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarSpecRule()); }
	iv_ruleVarSpec=ruleVarSpec
	{ $current=$iv_ruleVarSpec.current; }
	EOF;

// Rule VarSpec
ruleVarSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarSpecAccess().getIdentifierListParserRuleCall_0());
		}
		ruleIdentifierList
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getTypeParserRuleCall_1_0_0());
				}
				this_Type_1=ruleType
				{
					$current = $this_Type_1.current;
					afterParserOrEnumRuleCall();
				}
				(
					otherlv_2='='
					{
						newLeafNode(otherlv_2, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListExpressionListParserRuleCall_1_0_1_1_0());
							}
							lv_ExpressionList_3_0=ruleExpressionList
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarSpecRule());
								}
								set(
									$current,
									"ExpressionList",
									lv_ExpressionList_3_0,
									"com.ufcg.compiladores.Go.ExpressionList");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				otherlv_4='='
				{
					newLeafNode(otherlv_4, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_1_0());
				}
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_1_1());
				}
				this_ExpressionList_5=ruleExpressionList
				{
					$current = $this_ExpressionList_5.current;
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_ruleFunctionDecl=ruleFunctionDecl
	{ $current=$iv_ruleFunctionDecl.current; }
	EOF;

// Rule FunctionDecl
ruleFunctionDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDeclAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionNameParserRuleCall_1());
		}
		ruleFunctionName
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFunctionDeclAccess().getSignatureParserRuleCall_2());
		}
		this_Signature_2=ruleSignature
		{
			$current = $this_Signature_2.current;
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionBodyParserRuleCall_3());
			}
			ruleFunctionBody
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current.getText(); }
	EOF;

// Rule FunctionName
ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFunctionNameAccess().getIdentifierParserRuleCall());
	}
	this_identifier_0=ruleidentifier
	{
		$current.merge(this_identifier_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); }
	iv_ruleFunctionBody=ruleFunctionBody
	{ $current=$iv_ruleFunctionBody.current.getText(); }
	EOF;

// Rule FunctionBody
ruleFunctionBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFunctionBodyAccess().getBlockParserRuleCall());
	}
	this_Block_0=ruleBlock
	{
		$current.merge(this_Block_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleMethodDecl
entryRuleMethodDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclRule()); }
	iv_ruleMethodDecl=ruleMethodDecl
	{ $current=$iv_ruleMethodDecl.current; }
	EOF;

// Rule MethodDecl
ruleMethodDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodDeclAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getMethodDeclAccess().getReceiverParserRuleCall_1());
		}
		this_Receiver_1=ruleReceiver
		{
			$current = $this_Receiver_1.current;
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMethodDeclAccess().getMethodNameParserRuleCall_2());
		}
		ruleMethodName
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getSignatureSignatureParserRuleCall_3_0());
				}
				lv_Signature_3_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					set(
						$current,
						"Signature",
						lv_Signature_3_0,
						"com.ufcg.compiladores.Go.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getMethodDeclAccess().getFunctionBodyParserRuleCall_4());
			}
			ruleFunctionBody
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleReceiver
entryRuleReceiver returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_ruleReceiver=ruleReceiver
	{ $current=$iv_ruleReceiver.current; }
	EOF;

// Rule Receiver
ruleReceiver returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceiverAccess().getParametersParserRuleCall());
	}
	this_Parameters_0=ruleParameters
	{
		$current = $this_Parameters_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getOperandNameParserRuleCall_1());
		}
		ruleOperandName
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getOperandAccess().getExpressionParserRuleCall_2_1());
			}
			this_Expression_3=ruleExpression
			{
				$current = $this_Expression_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getOperandAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBasicLitParserRuleCall_0());
		}
		ruleBasicLit
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getCompositeLitParserRuleCall_1());
		}
		this_CompositeLit_1=ruleCompositeLit
		{
			$current = $this_CompositeLit_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getFunctionLitParserRuleCall_2());
		}
		this_FunctionLit_2=ruleFunctionLit
		{
			$current = $this_FunctionLit_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicLit
entryRuleBasicLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicLitRule()); }
	iv_ruleBasicLit=ruleBasicLit
	{ $current=$iv_ruleBasicLit.current.getText(); }
	EOF;

// Rule BasicLit
ruleBasicLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBasicLitAccess().getInt_litParserRuleCall_0());
		}
		this_int_lit_0=ruleint_lit
		{
			$current.merge(this_int_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicLitAccess().getFloat_litParserRuleCall_1());
		}
		this_float_lit_1=rulefloat_lit
		{
			$current.merge(this_float_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicLitAccess().getRune_litParserRuleCall_2());
		}
		this_rune_lit_2=rulerune_lit
		{
			$current.merge(this_rune_lit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicLitAccess().getString_litParserRuleCall_3());
		}
		this_string_lit_3=rulestring_lit
		{
			$current.merge(this_string_lit_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperandName
entryRuleOperandName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperandNameRule()); }
	iv_ruleOperandName=ruleOperandName
	{ $current=$iv_ruleOperandName.current.getText(); }
	EOF;

// Rule OperandName
ruleOperandName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandNameAccess().getIdentifierParserRuleCall_0());
		}
		this_identifier_0=ruleidentifier
		{
			$current.merge(this_identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandNameAccess().getQualifiedIdentParserRuleCall_1());
		}
		this_QualifiedIdent_1=ruleQualifiedIdent
		{
			$current.merge(this_QualifiedIdent_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQualifiedIdent
entryRuleQualifiedIdent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedIdentRule()); }
	iv_ruleQualifiedIdent=ruleQualifiedIdent
	{ $current=$iv_ruleQualifiedIdent.current.getText(); }
	EOF;

// Rule QualifiedIdent
ruleQualifiedIdent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedIdentAccess().getPackageNameParserRuleCall_0());
		}
		this_PackageName_0=rulePackageName
		{
			$current.merge(this_PackageName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getQualifiedIdentAccess().getIdentifierParserRuleCall_2());
		}
		this_identifier_2=ruleidentifier
		{
			$current.merge(this_identifier_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCompositeLit
entryRuleCompositeLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeLitRule()); }
	iv_ruleCompositeLit=ruleCompositeLit
	{ $current=$iv_ruleCompositeLit.current; }
	EOF;

// Rule CompositeLit
ruleCompositeLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralTypeParserRuleCall_0());
		}
		this_LiteralType_0=ruleLiteralType
		{
			$current = $this_LiteralType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralValueLiteralValueParserRuleCall_1_0());
				}
				lv_LiteralValue_1_0=ruleLiteralValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeLitRule());
					}
					set(
						$current,
						"LiteralValue",
						lv_LiteralValue_1_0,
						"com.ufcg.compiladores.Go.LiteralValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLiteralType
entryRuleLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTypeRule()); }
	iv_ruleLiteralType=ruleLiteralType
	{ $current=$iv_ruleLiteralType.current; }
	EOF;

// Rule LiteralType
ruleLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getStructTypeParserRuleCall_0());
		}
		this_StructType_0=ruleStructType
		{
			$current = $this_StructType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getArrayTypeArrayTypeParserRuleCall_1_0());
				}
				lv_ArrayType_1_0=ruleArrayType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"ArrayType",
						lv_ArrayType_1_0,
						"com.ufcg.compiladores.Go.ArrayType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getLiteralTypeAccess().getLeftSquareBracketKeyword_2_0());
			}
			otherlv_3='...'
			{
				newLeafNode(otherlv_3, grammarAccess.getLiteralTypeAccess().getFullStopFullStopFullStopKeyword_2_1());
			}
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getLiteralTypeAccess().getRightSquareBracketKeyword_2_2());
			}
			{
				newCompositeNode(grammarAccess.getLiteralTypeAccess().getElementTypeParserRuleCall_2_3());
			}
			this_ElementType_5=ruleElementType
			{
				$current = $this_ElementType_5.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getSliceTypeParserRuleCall_3());
		}
		this_SliceType_6=ruleSliceType
		{
			$current = $this_SliceType_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getMapTypeParserRuleCall_4());
		}
		this_MapType_7=ruleMapType
		{
			$current = $this_MapType_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeNameParserRuleCall_5());
		}
		ruleTypeName
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	iv_ruleLiteralValue=ruleLiteralValue
	{ $current=$iv_ruleLiteralValue.current; }
	EOF;

// Rule LiteralValue
ruleLiteralValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getLiteralValueAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralValueAccess().getElementListElementListParserRuleCall_1_0_0());
					}
					lv_ElementList_1_0=ruleElementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralValueRule());
						}
						set(
							$current,
							"ElementList",
							lv_ElementList_1_0,
							"com.ufcg.compiladores.Go.ElementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getLiteralValueAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getLiteralValueAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleElementList
entryRuleElementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementListRule()); }
	iv_ruleElementList=ruleElementList
	{ $current=$iv_ruleElementList.current; }
	EOF;

// Rule ElementList
ruleElementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_0());
		}
		this_KeyedElement_0=ruleKeyedElement
		{
			$current = $this_KeyedElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getElementListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementKeyedElementParserRuleCall_1_1_0());
					}
					lv_KeyedElement_2_0=ruleKeyedElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementListRule());
						}
						set(
							$current,
							"KeyedElement",
							lv_KeyedElement_2_0,
							"com.ufcg.compiladores.Go.KeyedElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current = $this_Expression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getLiteralValueParserRuleCall_1());
		}
		this_LiteralValue_1=ruleLiteralValue
		{
			$current = $this_LiteralValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKeyedElement
entryRuleKeyedElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyedElementRule()); }
	iv_ruleKeyedElement=ruleKeyedElement
	{ $current=$iv_ruleKeyedElement.current; }
	EOF;

// Rule KeyedElement
ruleKeyedElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getKeyedElementAccess().getKeyParserRuleCall_0_0());
			}
			this_Key_0=ruleKey
			{
				$current = $this_Key_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getKeyedElementAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyedElementAccess().getElementElementParserRuleCall_1_0());
				}
				lv_Element_2_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyedElementRule());
					}
					set(
						$current,
						"Element",
						lv_Element_2_0,
						"com.ufcg.compiladores.Go.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_ruleKey=ruleKey
	{ $current=$iv_ruleKey.current; }
	EOF;

// Rule Key
ruleKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getKeyAccess().getFieldNameParserRuleCall_0());
		}
		ruleFieldName
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getLiteralValueParserRuleCall_2());
		}
		this_LiteralValue_2=ruleLiteralValue
		{
			$current = $this_LiteralValue_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFieldName
entryRuleFieldName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldNameRule()); }
	iv_ruleFieldName=ruleFieldName
	{ $current=$iv_ruleFieldName.current.getText(); }
	EOF;

// Rule FieldName
ruleFieldName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFieldNameAccess().getIdentifierParserRuleCall());
	}
	this_identifier_0=ruleidentifier
	{
		$current.merge(this_identifier_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFunctionLit
entryRuleFunctionLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionLitRule()); }
	iv_ruleFunctionLit=ruleFunctionLit
	{ $current=$iv_ruleFunctionLit.current; }
	EOF;

// Rule FunctionLit
ruleFunctionLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionLitAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionLitAccess().getSignatureParserRuleCall_1());
		}
		this_Signature_1=ruleSignature
		{
			$current = $this_Signature_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionLitAccess().getFunctionBodyFunctionBodyParserRuleCall_2_0());
				}
				lv_FunctionBody_2_0=ruleFunctionBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionLitRule());
					}
					set(
						$current,
						"FunctionBody",
						lv_FunctionBody_2_0,
						"com.ufcg.compiladores.Go.FunctionBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	iv_rulePrimaryExpr=rulePrimaryExpr
	{ $current=$iv_rulePrimaryExpr.current; }
	EOF;

// Rule PrimaryExpr
rulePrimaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getOperandParserRuleCall_0_0());
			}
			this_Operand_0=ruleOperand
			{
				$current = $this_Operand_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0());
					}
					lv_PrimaryExprLinha_1_0=rulePrimaryExprLinha
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"PrimaryExprLinha",
							lv_PrimaryExprLinha_1_0,
							"com.ufcg.compiladores.Go.PrimaryExprLinha");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getConversionParserRuleCall_1_0());
			}
			this_Conversion_2=ruleConversion
			{
				$current = $this_Conversion_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0());
					}
					lv_PrimaryExprLinha_3_0=rulePrimaryExprLinha
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"PrimaryExprLinha",
							lv_PrimaryExprLinha_3_0,
							"com.ufcg.compiladores.Go.PrimaryExprLinha");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getMethodExprParserRuleCall_2_0());
			}
			this_MethodExpr_4=ruleMethodExpr
			{
				$current = $this_MethodExpr_4.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0());
					}
					lv_PrimaryExprLinha_5_0=rulePrimaryExprLinha
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"PrimaryExprLinha",
							lv_PrimaryExprLinha_5_0,
							"com.ufcg.compiladores.Go.PrimaryExprLinha");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryExprLinha
entryRulePrimaryExprLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprLinhaRule()); }
	iv_rulePrimaryExprLinha=rulePrimaryExprLinha
	{ $current=$iv_rulePrimaryExprLinha.current.getText(); }
	EOF;

// Rule PrimaryExprLinha
rulePrimaryExprLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='fa'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPrimaryExprLinhaAccess().getFaKeyword());
	}
;

// Entry rule entryRuleMethodExpr
entryRuleMethodExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodExprRule()); }
	iv_ruleMethodExpr=ruleMethodExpr
	{ $current=$iv_ruleMethodExpr.current; }
	EOF;

// Rule MethodExpr
ruleMethodExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMethodExprAccess().getReceiverTypeParserRuleCall_0());
		}
		this_ReceiverType_0=ruleReceiverType
		{
			$current = $this_ReceiverType_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodExprAccess().getFullStopKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getMethodExprAccess().getMethodNameParserRuleCall_2());
		}
		ruleMethodName
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReceiverType
entryRuleReceiverType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverTypeRule()); }
	iv_ruleReceiverType=ruleReceiverType
	{ $current=$iv_ruleReceiverType.current; }
	EOF;

// Rule ReceiverType
ruleReceiverType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeParserRuleCall());
	}
	this_Type_0=ruleType
	{
		$current = $this_Type_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getUnaryExprParserRuleCall_0());
		}
		this_UnaryExpr_0=ruleUnaryExpr
		{
			$current = $this_UnaryExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpressionLinhaExpressionLinhaParserRuleCall_1_0());
				}
				lv_ExpressionLinha_1_0=ruleExpressionLinha
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"ExpressionLinha",
						lv_ExpressionLinha_1_0,
						"com.ufcg.compiladores.Go.ExpressionLinha");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionLinha
entryRuleExpressionLinha returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLinhaRule()); }
	iv_ruleExpressionLinha=ruleExpressionLinha
	{ $current=$iv_ruleExpressionLinha.current; }
	EOF;

// Rule ExpressionLinha
ruleExpressionLinha returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLinhaAccess().getBinary_opParserRuleCall_0());
		}
		rulebinary_op
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getExpressionLinhaAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	iv_ruleUnaryExpr=ruleUnaryExpr
	{ $current=$iv_ruleUnaryExpr.current; }
	EOF;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExprAccess().getPrimaryExprPrimaryExprParserRuleCall_0_0());
				}
				lv_PrimaryExpr_0_0=rulePrimaryExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExprRule());
					}
					set(
						$current,
						"PrimaryExpr",
						lv_PrimaryExpr_0_0,
						"com.ufcg.compiladores.Go.PrimaryExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getUnaryExprAccess().getUnary_opParserRuleCall_1_0());
			}
			ruleunary_op
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getUnaryExprAccess().getUnaryExprParserRuleCall_1_1());
			}
			this_UnaryExpr_2=ruleUnaryExpr
			{
				$current = $this_UnaryExpr_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulebinary_op
entryRulebinary_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinary_opRule()); }
	iv_rulebinary_op=rulebinary_op
	{ $current=$iv_rulebinary_op.current.getText(); }
	EOF;

// Rule binary_op
rulebinary_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='||'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinary_opAccess().getVerticalLineVerticalLineKeyword_0());
		}
		    |
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinary_opAccess().getAmpersandAmpersandKeyword_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinary_opAccess().getRel_opParserRuleCall_2());
		}
		this_rel_op_2=rulerel_op
		{
			$current.merge(this_rel_op_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinary_opAccess().getAdd_opParserRuleCall_3());
		}
		this_add_op_3=ruleadd_op
		{
			$current.merge(this_add_op_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinary_opAccess().getMul_opParserRuleCall_4());
		}
		this_mul_op_4=rulemul_op
		{
			$current.merge(this_mul_op_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerel_op
entryRulerel_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRel_opRule()); }
	iv_rulerel_op=rulerel_op
	{ $current=$iv_rulerel_op.current.getText(); }
	EOF;

// Rule rel_op
rulerel_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getEqualsSignEqualsSignKeyword_0());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getExclamationMarkEqualsSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getLessThanSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getGreaterThanSignEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleadd_op
entryRuleadd_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdd_opRule()); }
	iv_ruleadd_op=ruleadd_op
	{ $current=$iv_ruleadd_op.current.getText(); }
	EOF;

// Rule add_op
ruleadd_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdd_opAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdd_opAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdd_opAccess().getVerticalLineKeyword_2());
		}
		    |
		kw='\u02C6'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdd_opAccess().getModifierLetterCircumflexAccentKeyword_3());
		}
	)
;

// Entry rule entryRulemul_op
entryRulemul_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMul_opRule()); }
	iv_rulemul_op=rulemul_op
	{ $current=$iv_rulemul_op.current.getText(); }
	EOF;

// Rule mul_op
rulemul_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMul_opAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMul_opAccess().getSolidusKeyword_1());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMul_opAccess().getPercentSignKeyword_2());
		}
		    |
		kw='<<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMul_opAccess().getLessThanSignLessThanSignKeyword_3());
		}
		    |
		kw='>>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMul_opAccess().getGreaterThanSignGreaterThanSignKeyword_4());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMul_opAccess().getAmpersandKeyword_5());
		}
		    |
		kw='&^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMul_opAccess().getAmpersandCircumflexAccentKeyword_6());
		}
	)
;

// Entry rule entryRuleunary_op
entryRuleunary_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnary_opRule()); }
	iv_ruleunary_op=ruleunary_op
	{ $current=$iv_ruleunary_op.current.getText(); }
	EOF;

// Rule unary_op
ruleunary_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_opAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_opAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_opAccess().getExclamationMarkKeyword_2());
		}
		    |
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_opAccess().getCircumflexAccentKeyword_3());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_opAccess().getAsteriskKeyword_4());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_opAccess().getAmpersandKeyword_5());
		}
		    |
		kw='<-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_opAccess().getLessThanSignHyphenMinusKeyword_6());
		}
	)
;

// Entry rule entryRuleConversion
entryRuleConversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConversionRule()); }
	iv_ruleConversion=ruleConversion
	{ $current=$iv_ruleConversion.current; }
	EOF;

// Rule Conversion
ruleConversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConversionAccess().getTypeParserRuleCall_0());
		}
		this_Type_0=ruleType
		{
			$current = $this_Type_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConversionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConversionAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_Expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConversionRule());
					}
					set(
						$current,
						"Expression",
						lv_Expression_2_0,
						"com.ufcg.compiladores.Go.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getConversionAccess().getCommaKeyword_3());
			}
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConversionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current.getText(); }
	EOF;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='ola'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStatementAccess().getOlaKeyword());
	}
;

// Entry rule entryRulePackageName
entryRulePackageName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageNameRule()); }
	iv_rulePackageName=rulePackageName
	{ $current=$iv_rulePackageName.current.getText(); }
	EOF;

// Rule PackageName
rulePackageName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='carai'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPackageNameAccess().getCaraiKeyword());
	}
;

// Entry rule entryRuleidentifier
entryRuleidentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleidentifier=ruleidentifier
	{ $current=$iv_ruleidentifier.current.getText(); }
	EOF;

// Rule identifier
ruleidentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_LETTER_0=RULE_LETTER
		{
			$current.merge(this_LETTER_0);
		}
		{
			newLeafNode(this_LETTER_0, grammarAccess.getIdentifierAccess().getLETTERTerminalRuleCall_0());
		}
		(
			this_LETTER_1=RULE_LETTER
			{
				$current.merge(this_LETTER_1);
			}
			{
				newLeafNode(this_LETTER_1, grammarAccess.getIdentifierAccess().getLETTERTerminalRuleCall_1_0());
			}
			    |
			this_DECIMAL_DIGIT_2=RULE_DECIMAL_DIGIT
			{
				$current.merge(this_DECIMAL_DIGIT_2);
			}
			{
				newLeafNode(this_DECIMAL_DIGIT_2, grammarAccess.getIdentifierAccess().getDECIMAL_DIGITTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleint_lit
entryRuleint_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInt_litRule()); }
	iv_ruleint_lit=ruleint_lit
	{ $current=$iv_ruleint_lit.current.getText(); }
	EOF;

// Rule int_lit
ruleint_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInt_litAccess().getDecimal_litParserRuleCall_0());
		}
		this_decimal_lit_0=ruledecimal_lit
		{
			$current.merge(this_decimal_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInt_litAccess().getOctal_litParserRuleCall_1());
		}
		this_octal_lit_1=ruleoctal_lit
		{
			$current.merge(this_octal_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInt_litAccess().getHex_litParserRuleCall_2());
		}
		this_hex_lit_2=rulehex_lit
		{
			$current.merge(this_hex_lit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuledecimal_lit
entryRuledecimal_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDecimal_litRule()); }
	iv_ruledecimal_lit=ruledecimal_lit
	{ $current=$iv_ruledecimal_lit.current.getText(); }
	EOF;

// Rule decimal_lit
ruledecimal_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DECIMAL_DIGIT_0=RULE_DECIMAL_DIGIT
		{
			$current.merge(this_DECIMAL_DIGIT_0);
		}
		{
			newLeafNode(this_DECIMAL_DIGIT_0, grammarAccess.getDecimal_litAccess().getDECIMAL_DIGITTerminalRuleCall_0());
		}
		(
			this_DECIMAL_DIGIT_1=RULE_DECIMAL_DIGIT
			{
				$current.merge(this_DECIMAL_DIGIT_1);
			}
			{
				newLeafNode(this_DECIMAL_DIGIT_1, grammarAccess.getDecimal_litAccess().getDECIMAL_DIGITTerminalRuleCall_1());
			}
		)*
	)
;

// Entry rule entryRuleoctal_lit
entryRuleoctal_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOctal_litRule()); }
	iv_ruleoctal_lit=ruleoctal_lit
	{ $current=$iv_ruleoctal_lit.current.getText(); }
	EOF;

// Rule octal_lit
ruleoctal_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOctal_litAccess().getDigitZeroKeyword_0());
		}
		(
			this_OCTAL_DIGIT_1=RULE_OCTAL_DIGIT
			{
				$current.merge(this_OCTAL_DIGIT_1);
			}
			{
				newLeafNode(this_OCTAL_DIGIT_1, grammarAccess.getOctal_litAccess().getOCTAL_DIGITTerminalRuleCall_1());
			}
		)*
	)
;

// Entry rule entryRulehex_lit
entryRulehex_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHex_litRule()); }
	iv_rulehex_lit=rulehex_lit
	{ $current=$iv_rulehex_lit.current.getText(); }
	EOF;

// Rule hex_lit
rulehex_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHex_litAccess().getDigitZeroKeyword_0());
		}
		(
			kw='x'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getHex_litAccess().getXKeyword_1_0());
			}
			    |
			kw='X'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getHex_litAccess().getXKeyword_1_1());
			}
		)
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getHex_litAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		(
			this_HEX_DIGIT_4=RULE_HEX_DIGIT
			{
				$current.merge(this_HEX_DIGIT_4);
			}
			{
				newLeafNode(this_HEX_DIGIT_4, grammarAccess.getHex_litAccess().getHEX_DIGITTerminalRuleCall_3());
			}
		)*
	)
;

// Entry rule entryRulefloat_lit
entryRulefloat_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloat_litRule()); }
	iv_rulefloat_lit=rulefloat_lit
	{ $current=$iv_rulefloat_lit.current.getText(); }
	EOF;

// Rule float_lit
rulefloat_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_0_0());
			}
			this_decimals_0=ruledecimals
			{
				$current.merge(this_decimals_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_0_1());
			}
			(
				{
					newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_0_2());
				}
				this_decimals_2=ruledecimals
				{
					$current.merge(this_decimals_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			(
				{
					newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_0_3());
				}
				this_exponent_3=ruleexponent
				{
					$current.merge(this_exponent_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_1_0());
			}
			this_decimals_4=ruledecimals
			{
				$current.merge(this_decimals_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_1_1());
			}
			this_exponent_5=ruleexponent
			{
				$current.merge(this_exponent_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_2_1());
			}
			this_decimals_7=ruledecimals
			{
				$current.merge(this_decimals_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_2_2());
				}
				this_exponent_8=ruleexponent
				{
					$current.merge(this_exponent_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRulestring_lit
entryRulestring_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getString_litRule()); }
	iv_rulestring_lit=rulestring_lit
	{ $current=$iv_rulestring_lit.current.getText(); }
	EOF;

// Rule string_lit
rulestring_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getString_litAccess().getRaw_string_litParserRuleCall_0());
		}
		this_raw_string_lit_0=ruleraw_string_lit
		{
			$current.merge(this_raw_string_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_litAccess().getInterpreted_string_litParserRuleCall_1());
		}
		this_interpreted_string_lit_1=ruleinterpreted_string_lit
		{
			$current.merge(this_interpreted_string_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleraw_string_lit
entryRuleraw_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRaw_string_litRule()); }
	iv_ruleraw_string_lit=ruleraw_string_lit
	{ $current=$iv_ruleraw_string_lit.current.getText(); }
	EOF;

// Rule raw_string_lit
ruleraw_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRaw_string_litAccess().getApostropheKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getRaw_string_litAccess().getUnicode_charParserRuleCall_1_0());
			}
			this_unicode_char_1=ruleunicode_char
			{
				$current.merge(this_unicode_char_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getRaw_string_litAccess().getNewlineParserRuleCall_1_1());
			}
			this_newline_2=rulenewline
			{
				$current.merge(this_newline_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRaw_string_litAccess().getApostropheKeyword_2());
		}
	)
;

// Entry rule entryRuleinterpreted_string_lit
entryRuleinterpreted_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterpreted_string_litRule()); }
	iv_ruleinterpreted_string_lit=ruleinterpreted_string_lit
	{ $current=$iv_ruleinterpreted_string_lit.current.getText(); }
	EOF;

// Rule interpreted_string_lit
ruleinterpreted_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getUnicode_valueParserRuleCall_1_0());
			}
			this_unicode_value_1=ruleunicode_value
			{
				$current.merge(this_unicode_value_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_byte_value_2=rulebyte_value
			{
				$current.merge(this_byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleunicode_char
entryRuleunicode_char returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnicode_charRule()); }
	iv_ruleunicode_char=ruleunicode_char
	{ $current=$iv_ruleunicode_char.current.getText(); }
	EOF;

// Rule unicode_char
ruleunicode_char returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='?'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnicode_charAccess().getQuestionMarkKeyword_0());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnicode_charAccess().getFullStopKeyword_1());
		}
		    |
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnicode_charAccess().getCommaKeyword_2());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnicode_charAccess().getExclamationMarkKeyword_3());
		}
	)
;

// Entry rule entryRulenewline
entryRulenewline returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNewlineRule()); }
	iv_rulenewline=rulenewline
	{ $current=$iv_rulenewline.current.getText(); }
	EOF;

// Rule newline
rulenewline returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='U+000A'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNewlineAccess().getU000AKeyword());
	}
;

// Entry rule entryRuledecimals
entryRuledecimals returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDecimalsRule()); }
	iv_ruledecimals=ruledecimals
	{ $current=$iv_ruledecimals.current.getText(); }
	EOF;

// Rule decimals
ruledecimals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DECIMAL_DIGIT_0=RULE_DECIMAL_DIGIT
		{
			$current.merge(this_DECIMAL_DIGIT_0);
		}
		{
			newLeafNode(this_DECIMAL_DIGIT_0, grammarAccess.getDecimalsAccess().getDECIMAL_DIGITTerminalRuleCall_0());
		}
		(
			this_DECIMAL_DIGIT_1=RULE_DECIMAL_DIGIT
			{
				$current.merge(this_DECIMAL_DIGIT_1);
			}
			{
				newLeafNode(this_DECIMAL_DIGIT_1, grammarAccess.getDecimalsAccess().getDECIMAL_DIGITTerminalRuleCall_1());
			}
		)*
	)
;

// Entry rule entryRuleexponent
entryRuleexponent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExponentRule()); }
	iv_ruleexponent=ruleexponent
	{ $current=$iv_ruleexponent.current.getText(); }
	EOF;

// Rule exponent
ruleexponent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='e'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_0());
			}
			    |
			kw='E'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_1());
			}
		)
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getPlusSignKeyword_1_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getHyphenMinusKeyword_1_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getExponentAccess().getDecimalsParserRuleCall_2());
		}
		this_decimals_4=ruledecimals
		{
			$current.merge(this_decimals_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerune_lit
entryRulerune_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRune_litRule()); }
	iv_rulerune_lit=rulerune_lit
	{ $current=$iv_rulerune_lit.current.getText(); }
	EOF;

// Rule rune_lit
rulerune_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getRune_litAccess().getUnicode_valueParserRuleCall_1_0());
			}
			this_unicode_value_1=ruleunicode_value
			{
				$current.merge(this_unicode_value_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getRune_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_byte_value_2=rulebyte_value
			{
				$current.merge(this_byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_2());
		}
	)
;

// Entry rule entryRuleunicode_value
entryRuleunicode_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnicode_valueRule()); }
	iv_ruleunicode_value=ruleunicode_value
	{ $current=$iv_ruleunicode_value.current.getText(); }
	EOF;

// Rule unicode_value
ruleunicode_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_LETTER_0=RULE_LETTER
		{
			$current.merge(this_LETTER_0);
		}
		{
			newLeafNode(this_LETTER_0, grammarAccess.getUnicode_valueAccess().getLETTERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getLittle_u_valueParserRuleCall_1());
		}
		this_little_u_value_1=rulelittle_u_value
		{
			$current.merge(this_little_u_value_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getBig_u_valueParserRuleCall_2());
		}
		this_big_u_value_2=rulebig_u_value
		{
			$current.merge(this_big_u_value_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getEscaped_charParserRuleCall_3());
		}
		this_escaped_char_3=ruleescaped_char
		{
			$current.merge(this_escaped_char_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulebyte_value
entryRulebyte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getByte_valueRule()); }
	iv_rulebyte_value=rulebyte_value
	{ $current=$iv_rulebyte_value.current.getText(); }
	EOF;

// Rule byte_value
rulebyte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getByte_valueAccess().getOctal_byte_valueParserRuleCall_0());
		}
		this_octal_byte_value_0=ruleoctal_byte_value
		{
			$current.merge(this_octal_byte_value_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getByte_valueAccess().getHex_byte_valueParserRuleCall_1());
		}
		this_hex_byte_value_1=rulehex_byte_value
		{
			$current.merge(this_hex_byte_value_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleoctal_byte_value
entryRuleoctal_byte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOctal_byte_valueRule()); }
	iv_ruleoctal_byte_value=ruleoctal_byte_value
	{ $current=$iv_ruleoctal_byte_value.current.getText(); }
	EOF;

// Rule octal_byte_value
ruleoctal_byte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOctal_byte_valueAccess().getCHARParserRuleCall_0());
		}
		this_CHAR_0=ruleCHAR
		{
			$current.merge(this_CHAR_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_OCTAL_DIGIT_1=RULE_OCTAL_DIGIT
		{
			$current.merge(this_OCTAL_DIGIT_1);
		}
		{
			newLeafNode(this_OCTAL_DIGIT_1, grammarAccess.getOctal_byte_valueAccess().getOCTAL_DIGITTerminalRuleCall_1());
		}
		this_OCTAL_DIGIT_2=RULE_OCTAL_DIGIT
		{
			$current.merge(this_OCTAL_DIGIT_2);
		}
		{
			newLeafNode(this_OCTAL_DIGIT_2, grammarAccess.getOctal_byte_valueAccess().getOCTAL_DIGITTerminalRuleCall_2());
		}
		this_OCTAL_DIGIT_3=RULE_OCTAL_DIGIT
		{
			$current.merge(this_OCTAL_DIGIT_3);
		}
		{
			newLeafNode(this_OCTAL_DIGIT_3, grammarAccess.getOctal_byte_valueAccess().getOCTAL_DIGITTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRulehex_byte_value
entryRulehex_byte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHex_byte_valueRule()); }
	iv_rulehex_byte_value=rulehex_byte_value
	{ $current=$iv_rulehex_byte_value.current.getText(); }
	EOF;

// Rule hex_byte_value
rulehex_byte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHex_byte_valueAccess().getCHARParserRuleCall_0());
		}
		this_CHAR_0=ruleCHAR
		{
			$current.merge(this_CHAR_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='x'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHex_byte_valueAccess().getXKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getHex_byte_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getHex_byte_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRulelittle_u_value
entryRulelittle_u_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLittle_u_valueRule()); }
	iv_rulelittle_u_value=rulelittle_u_value
	{ $current=$iv_rulelittle_u_value.current.getText(); }
	EOF;

// Rule little_u_value
rulelittle_u_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLittle_u_valueAccess().getCHARParserRuleCall_0());
		}
		this_CHAR_0=ruleCHAR
		{
			$current.merge(this_CHAR_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='u'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLittle_u_valueAccess().getUKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
		this_HEX_DIGIT_4=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_4);
		}
		{
			newLeafNode(this_HEX_DIGIT_4, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_4());
		}
		this_HEX_DIGIT_5=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_5);
		}
		{
			newLeafNode(this_HEX_DIGIT_5, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRulebig_u_value
entryRulebig_u_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBig_u_valueRule()); }
	iv_rulebig_u_value=rulebig_u_value
	{ $current=$iv_rulebig_u_value.current.getText(); }
	EOF;

// Rule big_u_value
rulebig_u_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBig_u_valueAccess().getCHARParserRuleCall_0());
		}
		this_CHAR_0=ruleCHAR
		{
			$current.merge(this_CHAR_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='U'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBig_u_valueAccess().getUKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
		this_HEX_DIGIT_4=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_4);
		}
		{
			newLeafNode(this_HEX_DIGIT_4, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_4());
		}
		this_HEX_DIGIT_5=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_5);
		}
		{
			newLeafNode(this_HEX_DIGIT_5, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_5());
		}
		this_HEX_DIGIT_6=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_6);
		}
		{
			newLeafNode(this_HEX_DIGIT_6, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_6());
		}
		this_HEX_DIGIT_7=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_7);
		}
		{
			newLeafNode(this_HEX_DIGIT_7, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_7());
		}
		this_HEX_DIGIT_8=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_8);
		}
		{
			newLeafNode(this_HEX_DIGIT_8, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_8());
		}
		this_HEX_DIGIT_9=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_9);
		}
		{
			newLeafNode(this_HEX_DIGIT_9, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_9());
		}
	)
;

// Entry rule entryRuleescaped_char
entryRuleescaped_char returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEscaped_charRule()); }
	iv_ruleescaped_char=ruleescaped_char
	{ $current=$iv_ruleescaped_char.current.getText(); }
	EOF;

// Rule escaped_char
ruleescaped_char returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEscaped_charAccess().getCHARParserRuleCall_0());
		}
		this_CHAR_0=ruleCHAR
		{
			$current.merge(this_CHAR_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='a'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getAKeyword_1_0());
			}
			    |
			kw='b'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getBKeyword_1_1());
			}
			    |
			kw='f'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getFKeyword_1_2());
			}
			    |
			kw='n'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getNKeyword_1_3());
			}
			    |
			kw='r'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getRKeyword_1_4());
			}
			    |
			kw='t'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getTKeyword_1_5());
			}
			    |
			kw='v'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getVKeyword_1_6());
			}
			    |
			{
				newCompositeNode(grammarAccess.getEscaped_charAccess().getCHARParserRuleCall_1_7());
			}
			this_CHAR_8=ruleCHAR
			{
				$current.merge(this_CHAR_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			kw='\''
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getApostropheKeyword_1_8());
			}
			    |
			kw='"'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getQuotationMarkKeyword_1_9());
			}
		)
	)
;

// Entry rule entryRuleCHAR
entryRuleCHAR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCHARRule()); }
	iv_ruleCHAR=ruleCHAR
	{ $current=$iv_ruleCHAR.current.getText(); }
	EOF;

// Rule CHAR
ruleCHAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='\''
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCHARAccess().getApostropheKeyword());
	}
;

RULE_LETTER : ('a'..'z'|'A'..'Z'|'_');

RULE_DECIMAL_DIGIT : '0'..'9';

RULE_OCTAL_DIGIT : '0'..'7';

RULE_HEX_DIGIT : ('0'..'9'|'A'..'F'|'a'..'f');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
