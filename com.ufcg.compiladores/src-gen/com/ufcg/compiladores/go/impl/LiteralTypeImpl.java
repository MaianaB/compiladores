/**
 * generated by Xtext 2.13.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.ArrayType;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.LiteralType;
import com.ufcg.compiladores.go.LiteralValue;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Literal Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.LiteralTypeImpl#getLiteralValue <em>Literal Value</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.LiteralTypeImpl#getArrayType <em>Array Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LiteralTypeImpl extends CompositeLitImpl implements LiteralType
{
  /**
   * The cached value of the '{@link #getLiteralValue() <em>Literal Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiteralValue()
   * @generated
   * @ordered
   */
  protected LiteralValue literalValue;

  /**
   * The cached value of the '{@link #getArrayType() <em>Array Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArrayType()
   * @generated
   * @ordered
   */
  protected ArrayType arrayType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LiteralTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.LITERAL_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LiteralValue getLiteralValue()
  {
    return literalValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLiteralValue(LiteralValue newLiteralValue, NotificationChain msgs)
  {
    LiteralValue oldLiteralValue = literalValue;
    literalValue = newLiteralValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__LITERAL_VALUE, oldLiteralValue, newLiteralValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLiteralValue(LiteralValue newLiteralValue)
  {
    if (newLiteralValue != literalValue)
    {
      NotificationChain msgs = null;
      if (literalValue != null)
        msgs = ((InternalEObject)literalValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__LITERAL_VALUE, null, msgs);
      if (newLiteralValue != null)
        msgs = ((InternalEObject)newLiteralValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__LITERAL_VALUE, null, msgs);
      msgs = basicSetLiteralValue(newLiteralValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__LITERAL_VALUE, newLiteralValue, newLiteralValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayType getArrayType()
  {
    return arrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArrayType(ArrayType newArrayType, NotificationChain msgs)
  {
    ArrayType oldArrayType = arrayType;
    arrayType = newArrayType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__ARRAY_TYPE, oldArrayType, newArrayType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArrayType(ArrayType newArrayType)
  {
    if (newArrayType != arrayType)
    {
      NotificationChain msgs = null;
      if (arrayType != null)
        msgs = ((InternalEObject)arrayType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__ARRAY_TYPE, null, msgs);
      if (newArrayType != null)
        msgs = ((InternalEObject)newArrayType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__ARRAY_TYPE, null, msgs);
      msgs = basicSetArrayType(newArrayType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__ARRAY_TYPE, newArrayType, newArrayType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__LITERAL_VALUE:
        return basicSetLiteralValue(null, msgs);
      case GoPackage.LITERAL_TYPE__ARRAY_TYPE:
        return basicSetArrayType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__LITERAL_VALUE:
        return getLiteralValue();
      case GoPackage.LITERAL_TYPE__ARRAY_TYPE:
        return getArrayType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__LITERAL_VALUE:
        setLiteralValue((LiteralValue)newValue);
        return;
      case GoPackage.LITERAL_TYPE__ARRAY_TYPE:
        setArrayType((ArrayType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__LITERAL_VALUE:
        setLiteralValue((LiteralValue)null);
        return;
      case GoPackage.LITERAL_TYPE__ARRAY_TYPE:
        setArrayType((ArrayType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__LITERAL_VALUE:
        return literalValue != null;
      case GoPackage.LITERAL_TYPE__ARRAY_TYPE:
        return arrayType != null;
    }
    return super.eIsSet(featureID);
  }

} //LiteralTypeImpl
