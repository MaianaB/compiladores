/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.Condition;
import com.ufcg.compiladores.go.ForClause;
import com.ufcg.compiladores.go.ForStmt;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.InitStmt;
import com.ufcg.compiladores.go.PostStmt;
import com.ufcg.compiladores.go.SimpleStmt;
import com.ufcg.compiladores.go.SwitchStmt;
import com.ufcg.compiladores.go.switch_stmt_linha;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.SimpleStmtImpl#getSwitch_stmt_linha <em>Switch stmt linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.SimpleStmtImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.SimpleStmtImpl#getPostStmt <em>Post Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleStmtImpl extends IfStmtImpl implements SimpleStmt
{
  /**
   * The cached value of the '{@link #getSwitch_stmt_linha() <em>Switch stmt linha</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch_stmt_linha()
   * @generated
   * @ordered
   */
  protected EList<switch_stmt_linha> switch_stmt_linha;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected EList<Condition> condition;

  /**
   * The cached value of the '{@link #getPostStmt() <em>Post Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostStmt()
   * @generated
   * @ordered
   */
  protected EList<PostStmt> postStmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.SIMPLE_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<switch_stmt_linha> getSwitch_stmt_linha()
  {
    if (switch_stmt_linha == null)
    {
      switch_stmt_linha = new EObjectContainmentEList<switch_stmt_linha>(switch_stmt_linha.class, this, GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA);
    }
    return switch_stmt_linha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Condition> getCondition()
  {
    if (condition == null)
    {
      condition = new EObjectContainmentEList<Condition>(Condition.class, this, GoPackage.SIMPLE_STMT__CONDITION);
    }
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PostStmt> getPostStmt()
  {
    if (postStmt == null)
    {
      postStmt = new EObjectContainmentEList<PostStmt>(PostStmt.class, this, GoPackage.SIMPLE_STMT__POST_STMT);
    }
    return postStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA:
        return ((InternalEList<?>)getSwitch_stmt_linha()).basicRemove(otherEnd, msgs);
      case GoPackage.SIMPLE_STMT__CONDITION:
        return ((InternalEList<?>)getCondition()).basicRemove(otherEnd, msgs);
      case GoPackage.SIMPLE_STMT__POST_STMT:
        return ((InternalEList<?>)getPostStmt()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA:
        return getSwitch_stmt_linha();
      case GoPackage.SIMPLE_STMT__CONDITION:
        return getCondition();
      case GoPackage.SIMPLE_STMT__POST_STMT:
        return getPostStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA:
        getSwitch_stmt_linha().clear();
        getSwitch_stmt_linha().addAll((Collection<? extends switch_stmt_linha>)newValue);
        return;
      case GoPackage.SIMPLE_STMT__CONDITION:
        getCondition().clear();
        getCondition().addAll((Collection<? extends Condition>)newValue);
        return;
      case GoPackage.SIMPLE_STMT__POST_STMT:
        getPostStmt().clear();
        getPostStmt().addAll((Collection<? extends PostStmt>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA:
        getSwitch_stmt_linha().clear();
        return;
      case GoPackage.SIMPLE_STMT__CONDITION:
        getCondition().clear();
        return;
      case GoPackage.SIMPLE_STMT__POST_STMT:
        getPostStmt().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA:
        return switch_stmt_linha != null && !switch_stmt_linha.isEmpty();
      case GoPackage.SIMPLE_STMT__CONDITION:
        return condition != null && !condition.isEmpty();
      case GoPackage.SIMPLE_STMT__POST_STMT:
        return postStmt != null && !postStmt.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == SwitchStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA: return GoPackage.SWITCH_STMT__SWITCH_STMT_LINHA;
        default: return -1;
      }
    }
    if (baseClass == ForStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.SIMPLE_STMT__CONDITION: return GoPackage.FOR_CLAUSE__CONDITION;
        case GoPackage.SIMPLE_STMT__POST_STMT: return GoPackage.FOR_CLAUSE__POST_STMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == SwitchStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.SWITCH_STMT__SWITCH_STMT_LINHA: return GoPackage.SIMPLE_STMT__SWITCH_STMT_LINHA;
        default: return -1;
      }
    }
    if (baseClass == ForStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.FOR_CLAUSE__CONDITION: return GoPackage.SIMPLE_STMT__CONDITION;
        case GoPackage.FOR_CLAUSE__POST_STMT: return GoPackage.SIMPLE_STMT__POST_STMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //SimpleStmtImpl
