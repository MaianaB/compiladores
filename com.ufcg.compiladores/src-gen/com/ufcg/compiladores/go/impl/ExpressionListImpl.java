/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.Arguments;
import com.ufcg.compiladores.go.Assignment;
import com.ufcg.compiladores.go.Block;
import com.ufcg.compiladores.go.CommCase;
import com.ufcg.compiladores.go.CommClause;
import com.ufcg.compiladores.go.Condition;
import com.ufcg.compiladores.go.ExprCaseClause;
import com.ufcg.compiladores.go.ExprSwitchCase;
import com.ufcg.compiladores.go.Expression;
import com.ufcg.compiladores.go.ExpressionList;
import com.ufcg.compiladores.go.ForClause;
import com.ufcg.compiladores.go.ForStmt;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.IfStmt;
import com.ufcg.compiladores.go.InitStmt;
import com.ufcg.compiladores.go.PostStmt;
import com.ufcg.compiladores.go.PrimaryExprLinha;
import com.ufcg.compiladores.go.RangeClause;
import com.ufcg.compiladores.go.RecvExpr;
import com.ufcg.compiladores.go.RecvStmt;
import com.ufcg.compiladores.go.ShortVarDecl;
import com.ufcg.compiladores.go.SimpleStmt;
import com.ufcg.compiladores.go.StatementList;
import com.ufcg.compiladores.go.SwitchStmt;
import com.ufcg.compiladores.go.switch_stmt_linha;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getBlock <em>Block</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getIfStmt <em>If Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getSwitch_stmt_linha <em>Switch stmt linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getPostStmt <em>Post Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getIndexLinha <em>Index Linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getPrimaryExprLinha <em>Primary Expr Linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getStatementList <em>Statement List</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getRecvExpr <em>Recv Expr</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionListImpl#getExpressionList <em>Expression List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionListImpl extends VarSpecImpl implements ExpressionList
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected EList<Expression> expression;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected EList<Block> block;

  /**
   * The cached value of the '{@link #getIfStmt() <em>If Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfStmt()
   * @generated
   * @ordered
   */
  protected EList<IfStmt> ifStmt;

  /**
   * The cached value of the '{@link #getSwitch_stmt_linha() <em>Switch stmt linha</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch_stmt_linha()
   * @generated
   * @ordered
   */
  protected EList<switch_stmt_linha> switch_stmt_linha;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected EList<Condition> condition;

  /**
   * The cached value of the '{@link #getPostStmt() <em>Post Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostStmt()
   * @generated
   * @ordered
   */
  protected EList<PostStmt> postStmt;

  /**
   * The cached value of the '{@link #getIndexLinha() <em>Index Linha</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexLinha()
   * @generated
   * @ordered
   */
  protected EList<String> indexLinha;

  /**
   * The cached value of the '{@link #getPrimaryExprLinha() <em>Primary Expr Linha</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryExprLinha()
   * @generated
   * @ordered
   */
  protected EList<PrimaryExprLinha> primaryExprLinha;

  /**
   * The cached value of the '{@link #getStatementList() <em>Statement List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementList()
   * @generated
   * @ordered
   */
  protected EList<StatementList> statementList;

  /**
   * The cached value of the '{@link #getRecvExpr() <em>Recv Expr</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecvExpr()
   * @generated
   * @ordered
   */
  protected EList<RecvExpr> recvExpr;

  /**
   * The cached value of the '{@link #getExpressionList() <em>Expression List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionList()
   * @generated
   * @ordered
   */
  protected EList<ExpressionList> expressionList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.EXPRESSION_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getExpression()
  {
    if (expression == null)
    {
      expression = new EObjectContainmentEList<Expression>(Expression.class, this, GoPackage.EXPRESSION_LIST__EXPRESSION);
    }
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Block> getBlock()
  {
    if (block == null)
    {
      block = new EObjectContainmentEList<Block>(Block.class, this, GoPackage.EXPRESSION_LIST__BLOCK);
    }
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<IfStmt> getIfStmt()
  {
    if (ifStmt == null)
    {
      ifStmt = new EObjectContainmentEList<IfStmt>(IfStmt.class, this, GoPackage.EXPRESSION_LIST__IF_STMT);
    }
    return ifStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<switch_stmt_linha> getSwitch_stmt_linha()
  {
    if (switch_stmt_linha == null)
    {
      switch_stmt_linha = new EObjectContainmentEList<switch_stmt_linha>(switch_stmt_linha.class, this, GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA);
    }
    return switch_stmt_linha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Condition> getCondition()
  {
    if (condition == null)
    {
      condition = new EObjectContainmentEList<Condition>(Condition.class, this, GoPackage.EXPRESSION_LIST__CONDITION);
    }
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PostStmt> getPostStmt()
  {
    if (postStmt == null)
    {
      postStmt = new EObjectContainmentEList<PostStmt>(PostStmt.class, this, GoPackage.EXPRESSION_LIST__POST_STMT);
    }
    return postStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getIndexLinha()
  {
    if (indexLinha == null)
    {
      indexLinha = new EDataTypeEList<String>(String.class, this, GoPackage.EXPRESSION_LIST__INDEX_LINHA);
    }
    return indexLinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PrimaryExprLinha> getPrimaryExprLinha()
  {
    if (primaryExprLinha == null)
    {
      primaryExprLinha = new EObjectContainmentEList<PrimaryExprLinha>(PrimaryExprLinha.class, this, GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA);
    }
    return primaryExprLinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StatementList> getStatementList()
  {
    if (statementList == null)
    {
      statementList = new EObjectContainmentEList<StatementList>(StatementList.class, this, GoPackage.EXPRESSION_LIST__STATEMENT_LIST);
    }
    return statementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<RecvExpr> getRecvExpr()
  {
    if (recvExpr == null)
    {
      recvExpr = new EObjectContainmentEList<RecvExpr>(RecvExpr.class, this, GoPackage.EXPRESSION_LIST__RECV_EXPR);
    }
    return recvExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExpressionList> getExpressionList()
  {
    if (expressionList == null)
    {
      expressionList = new EObjectContainmentEList<ExpressionList>(ExpressionList.class, this, GoPackage.EXPRESSION_LIST__EXPRESSION_LIST);
    }
    return expressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__EXPRESSION:
        return ((InternalEList<?>)getExpression()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__BLOCK:
        return ((InternalEList<?>)getBlock()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__IF_STMT:
        return ((InternalEList<?>)getIfStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA:
        return ((InternalEList<?>)getSwitch_stmt_linha()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__CONDITION:
        return ((InternalEList<?>)getCondition()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__POST_STMT:
        return ((InternalEList<?>)getPostStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA:
        return ((InternalEList<?>)getPrimaryExprLinha()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__STATEMENT_LIST:
        return ((InternalEList<?>)getStatementList()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__RECV_EXPR:
        return ((InternalEList<?>)getRecvExpr()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__EXPRESSION_LIST:
        return ((InternalEList<?>)getExpressionList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__EXPRESSION:
        return getExpression();
      case GoPackage.EXPRESSION_LIST__BLOCK:
        return getBlock();
      case GoPackage.EXPRESSION_LIST__IF_STMT:
        return getIfStmt();
      case GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA:
        return getSwitch_stmt_linha();
      case GoPackage.EXPRESSION_LIST__CONDITION:
        return getCondition();
      case GoPackage.EXPRESSION_LIST__POST_STMT:
        return getPostStmt();
      case GoPackage.EXPRESSION_LIST__INDEX_LINHA:
        return getIndexLinha();
      case GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA:
        return getPrimaryExprLinha();
      case GoPackage.EXPRESSION_LIST__STATEMENT_LIST:
        return getStatementList();
      case GoPackage.EXPRESSION_LIST__RECV_EXPR:
        return getRecvExpr();
      case GoPackage.EXPRESSION_LIST__EXPRESSION_LIST:
        return getExpressionList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__EXPRESSION:
        getExpression().clear();
        getExpression().addAll((Collection<? extends Expression>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__BLOCK:
        getBlock().clear();
        getBlock().addAll((Collection<? extends Block>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__IF_STMT:
        getIfStmt().clear();
        getIfStmt().addAll((Collection<? extends IfStmt>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA:
        getSwitch_stmt_linha().clear();
        getSwitch_stmt_linha().addAll((Collection<? extends switch_stmt_linha>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__CONDITION:
        getCondition().clear();
        getCondition().addAll((Collection<? extends Condition>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__POST_STMT:
        getPostStmt().clear();
        getPostStmt().addAll((Collection<? extends PostStmt>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__INDEX_LINHA:
        getIndexLinha().clear();
        getIndexLinha().addAll((Collection<? extends String>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA:
        getPrimaryExprLinha().clear();
        getPrimaryExprLinha().addAll((Collection<? extends PrimaryExprLinha>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__STATEMENT_LIST:
        getStatementList().clear();
        getStatementList().addAll((Collection<? extends StatementList>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__RECV_EXPR:
        getRecvExpr().clear();
        getRecvExpr().addAll((Collection<? extends RecvExpr>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__EXPRESSION_LIST:
        getExpressionList().clear();
        getExpressionList().addAll((Collection<? extends ExpressionList>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__EXPRESSION:
        getExpression().clear();
        return;
      case GoPackage.EXPRESSION_LIST__BLOCK:
        getBlock().clear();
        return;
      case GoPackage.EXPRESSION_LIST__IF_STMT:
        getIfStmt().clear();
        return;
      case GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA:
        getSwitch_stmt_linha().clear();
        return;
      case GoPackage.EXPRESSION_LIST__CONDITION:
        getCondition().clear();
        return;
      case GoPackage.EXPRESSION_LIST__POST_STMT:
        getPostStmt().clear();
        return;
      case GoPackage.EXPRESSION_LIST__INDEX_LINHA:
        getIndexLinha().clear();
        return;
      case GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA:
        getPrimaryExprLinha().clear();
        return;
      case GoPackage.EXPRESSION_LIST__STATEMENT_LIST:
        getStatementList().clear();
        return;
      case GoPackage.EXPRESSION_LIST__RECV_EXPR:
        getRecvExpr().clear();
        return;
      case GoPackage.EXPRESSION_LIST__EXPRESSION_LIST:
        getExpressionList().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__EXPRESSION:
        return expression != null && !expression.isEmpty();
      case GoPackage.EXPRESSION_LIST__BLOCK:
        return block != null && !block.isEmpty();
      case GoPackage.EXPRESSION_LIST__IF_STMT:
        return ifStmt != null && !ifStmt.isEmpty();
      case GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA:
        return switch_stmt_linha != null && !switch_stmt_linha.isEmpty();
      case GoPackage.EXPRESSION_LIST__CONDITION:
        return condition != null && !condition.isEmpty();
      case GoPackage.EXPRESSION_LIST__POST_STMT:
        return postStmt != null && !postStmt.isEmpty();
      case GoPackage.EXPRESSION_LIST__INDEX_LINHA:
        return indexLinha != null && !indexLinha.isEmpty();
      case GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA:
        return primaryExprLinha != null && !primaryExprLinha.isEmpty();
      case GoPackage.EXPRESSION_LIST__STATEMENT_LIST:
        return statementList != null && !statementList.isEmpty();
      case GoPackage.EXPRESSION_LIST__RECV_EXPR:
        return recvExpr != null && !recvExpr.isEmpty();
      case GoPackage.EXPRESSION_LIST__EXPRESSION_LIST:
        return expressionList != null && !expressionList.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == IfStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__EXPRESSION: return GoPackage.IF_STMT__EXPRESSION;
        case GoPackage.EXPRESSION_LIST__BLOCK: return GoPackage.IF_STMT__BLOCK;
        case GoPackage.EXPRESSION_LIST__IF_STMT: return GoPackage.IF_STMT__IF_STMT;
        default: return -1;
      }
    }
    if (baseClass == SwitchStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA: return GoPackage.SWITCH_STMT__SWITCH_STMT_LINHA;
        default: return -1;
      }
    }
    if (baseClass == ForStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__CONDITION: return GoPackage.FOR_CLAUSE__CONDITION;
        case GoPackage.EXPRESSION_LIST__POST_STMT: return GoPackage.FOR_CLAUSE__POST_STMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SimpleStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrimaryExprLinha.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__INDEX_LINHA: return GoPackage.PRIMARY_EXPR_LINHA__INDEX_LINHA;
        case GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA: return GoPackage.PRIMARY_EXPR_LINHA__PRIMARY_EXPR_LINHA;
        default: return -1;
      }
    }
    if (baseClass == Arguments.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Assignment.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExprCaseClause.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExprSwitchCase.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__STATEMENT_LIST: return GoPackage.EXPR_SWITCH_CASE__STATEMENT_LIST;
        default: return -1;
      }
    }
    if (baseClass == RangeClause.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == CommClause.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == CommCase.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__RECV_EXPR: return GoPackage.RECV_STMT__RECV_EXPR;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == IfStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.IF_STMT__EXPRESSION: return GoPackage.EXPRESSION_LIST__EXPRESSION;
        case GoPackage.IF_STMT__BLOCK: return GoPackage.EXPRESSION_LIST__BLOCK;
        case GoPackage.IF_STMT__IF_STMT: return GoPackage.EXPRESSION_LIST__IF_STMT;
        default: return -1;
      }
    }
    if (baseClass == SwitchStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.SWITCH_STMT__SWITCH_STMT_LINHA: return GoPackage.EXPRESSION_LIST__SWITCH_STMT_LINHA;
        default: return -1;
      }
    }
    if (baseClass == ForStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.FOR_CLAUSE__CONDITION: return GoPackage.EXPRESSION_LIST__CONDITION;
        case GoPackage.FOR_CLAUSE__POST_STMT: return GoPackage.EXPRESSION_LIST__POST_STMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SimpleStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrimaryExprLinha.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.PRIMARY_EXPR_LINHA__INDEX_LINHA: return GoPackage.EXPRESSION_LIST__INDEX_LINHA;
        case GoPackage.PRIMARY_EXPR_LINHA__PRIMARY_EXPR_LINHA: return GoPackage.EXPRESSION_LIST__PRIMARY_EXPR_LINHA;
        default: return -1;
      }
    }
    if (baseClass == Arguments.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Assignment.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExprCaseClause.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExprSwitchCase.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.EXPR_SWITCH_CASE__STATEMENT_LIST: return GoPackage.EXPRESSION_LIST__STATEMENT_LIST;
        default: return -1;
      }
    }
    if (baseClass == RangeClause.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == CommClause.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == CommCase.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.RECV_STMT__RECV_EXPR: return GoPackage.EXPRESSION_LIST__RECV_EXPR;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (IndexLinha: ");
    result.append(indexLinha);
    result.append(')');
    return result.toString();
  }

} //ExpressionListImpl
