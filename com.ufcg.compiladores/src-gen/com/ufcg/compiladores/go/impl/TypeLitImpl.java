/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.ChannelType;
import com.ufcg.compiladores.go.FunctionType;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.InterfaceType;
import com.ufcg.compiladores.go.MapType;
import com.ufcg.compiladores.go.PointerType;
import com.ufcg.compiladores.go.StructType;
import com.ufcg.compiladores.go.TypeLit;
import com.ufcg.compiladores.go.TypeLitLinha;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Lit</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeLitImpl#getTypeLitLinha <em>Type Lit Linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeLitImpl#getStructType <em>Struct Type</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeLitImpl#getPointerType <em>Pointer Type</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeLitImpl#getFunctionType <em>Function Type</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeLitImpl#getInterfaceType <em>Interface Type</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeLitImpl#getMapType <em>Map Type</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeLitImpl#getChannelType <em>Channel Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeLitImpl extends TypeImpl implements TypeLit
{
  /**
   * The cached value of the '{@link #getTypeLitLinha() <em>Type Lit Linha</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeLitLinha()
   * @generated
   * @ordered
   */
  protected EList<TypeLitLinha> typeLitLinha;

  /**
   * The cached value of the '{@link #getStructType() <em>Struct Type</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStructType()
   * @generated
   * @ordered
   */
  protected EList<StructType> structType;

  /**
   * The cached value of the '{@link #getPointerType() <em>Pointer Type</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPointerType()
   * @generated
   * @ordered
   */
  protected EList<PointerType> pointerType;

  /**
   * The cached value of the '{@link #getFunctionType() <em>Function Type</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionType()
   * @generated
   * @ordered
   */
  protected EList<FunctionType> functionType;

  /**
   * The cached value of the '{@link #getInterfaceType() <em>Interface Type</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterfaceType()
   * @generated
   * @ordered
   */
  protected EList<InterfaceType> interfaceType;

  /**
   * The cached value of the '{@link #getMapType() <em>Map Type</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMapType()
   * @generated
   * @ordered
   */
  protected EList<MapType> mapType;

  /**
   * The cached value of the '{@link #getChannelType() <em>Channel Type</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChannelType()
   * @generated
   * @ordered
   */
  protected EList<ChannelType> channelType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeLitImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.TYPE_LIT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeLitLinha> getTypeLitLinha()
  {
    if (typeLitLinha == null)
    {
      typeLitLinha = new EObjectContainmentEList<TypeLitLinha>(TypeLitLinha.class, this, GoPackage.TYPE_LIT__TYPE_LIT_LINHA);
    }
    return typeLitLinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StructType> getStructType()
  {
    if (structType == null)
    {
      structType = new EObjectContainmentEList<StructType>(StructType.class, this, GoPackage.TYPE_LIT__STRUCT_TYPE);
    }
    return structType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PointerType> getPointerType()
  {
    if (pointerType == null)
    {
      pointerType = new EObjectContainmentEList<PointerType>(PointerType.class, this, GoPackage.TYPE_LIT__POINTER_TYPE);
    }
    return pointerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FunctionType> getFunctionType()
  {
    if (functionType == null)
    {
      functionType = new EObjectContainmentEList<FunctionType>(FunctionType.class, this, GoPackage.TYPE_LIT__FUNCTION_TYPE);
    }
    return functionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InterfaceType> getInterfaceType()
  {
    if (interfaceType == null)
    {
      interfaceType = new EObjectContainmentEList<InterfaceType>(InterfaceType.class, this, GoPackage.TYPE_LIT__INTERFACE_TYPE);
    }
    return interfaceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MapType> getMapType()
  {
    if (mapType == null)
    {
      mapType = new EObjectContainmentEList<MapType>(MapType.class, this, GoPackage.TYPE_LIT__MAP_TYPE);
    }
    return mapType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ChannelType> getChannelType()
  {
    if (channelType == null)
    {
      channelType = new EObjectContainmentEList<ChannelType>(ChannelType.class, this, GoPackage.TYPE_LIT__CHANNEL_TYPE);
    }
    return channelType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_LIT__TYPE_LIT_LINHA:
        return ((InternalEList<?>)getTypeLitLinha()).basicRemove(otherEnd, msgs);
      case GoPackage.TYPE_LIT__STRUCT_TYPE:
        return ((InternalEList<?>)getStructType()).basicRemove(otherEnd, msgs);
      case GoPackage.TYPE_LIT__POINTER_TYPE:
        return ((InternalEList<?>)getPointerType()).basicRemove(otherEnd, msgs);
      case GoPackage.TYPE_LIT__FUNCTION_TYPE:
        return ((InternalEList<?>)getFunctionType()).basicRemove(otherEnd, msgs);
      case GoPackage.TYPE_LIT__INTERFACE_TYPE:
        return ((InternalEList<?>)getInterfaceType()).basicRemove(otherEnd, msgs);
      case GoPackage.TYPE_LIT__MAP_TYPE:
        return ((InternalEList<?>)getMapType()).basicRemove(otherEnd, msgs);
      case GoPackage.TYPE_LIT__CHANNEL_TYPE:
        return ((InternalEList<?>)getChannelType()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_LIT__TYPE_LIT_LINHA:
        return getTypeLitLinha();
      case GoPackage.TYPE_LIT__STRUCT_TYPE:
        return getStructType();
      case GoPackage.TYPE_LIT__POINTER_TYPE:
        return getPointerType();
      case GoPackage.TYPE_LIT__FUNCTION_TYPE:
        return getFunctionType();
      case GoPackage.TYPE_LIT__INTERFACE_TYPE:
        return getInterfaceType();
      case GoPackage.TYPE_LIT__MAP_TYPE:
        return getMapType();
      case GoPackage.TYPE_LIT__CHANNEL_TYPE:
        return getChannelType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_LIT__TYPE_LIT_LINHA:
        getTypeLitLinha().clear();
        getTypeLitLinha().addAll((Collection<? extends TypeLitLinha>)newValue);
        return;
      case GoPackage.TYPE_LIT__STRUCT_TYPE:
        getStructType().clear();
        getStructType().addAll((Collection<? extends StructType>)newValue);
        return;
      case GoPackage.TYPE_LIT__POINTER_TYPE:
        getPointerType().clear();
        getPointerType().addAll((Collection<? extends PointerType>)newValue);
        return;
      case GoPackage.TYPE_LIT__FUNCTION_TYPE:
        getFunctionType().clear();
        getFunctionType().addAll((Collection<? extends FunctionType>)newValue);
        return;
      case GoPackage.TYPE_LIT__INTERFACE_TYPE:
        getInterfaceType().clear();
        getInterfaceType().addAll((Collection<? extends InterfaceType>)newValue);
        return;
      case GoPackage.TYPE_LIT__MAP_TYPE:
        getMapType().clear();
        getMapType().addAll((Collection<? extends MapType>)newValue);
        return;
      case GoPackage.TYPE_LIT__CHANNEL_TYPE:
        getChannelType().clear();
        getChannelType().addAll((Collection<? extends ChannelType>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_LIT__TYPE_LIT_LINHA:
        getTypeLitLinha().clear();
        return;
      case GoPackage.TYPE_LIT__STRUCT_TYPE:
        getStructType().clear();
        return;
      case GoPackage.TYPE_LIT__POINTER_TYPE:
        getPointerType().clear();
        return;
      case GoPackage.TYPE_LIT__FUNCTION_TYPE:
        getFunctionType().clear();
        return;
      case GoPackage.TYPE_LIT__INTERFACE_TYPE:
        getInterfaceType().clear();
        return;
      case GoPackage.TYPE_LIT__MAP_TYPE:
        getMapType().clear();
        return;
      case GoPackage.TYPE_LIT__CHANNEL_TYPE:
        getChannelType().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_LIT__TYPE_LIT_LINHA:
        return typeLitLinha != null && !typeLitLinha.isEmpty();
      case GoPackage.TYPE_LIT__STRUCT_TYPE:
        return structType != null && !structType.isEmpty();
      case GoPackage.TYPE_LIT__POINTER_TYPE:
        return pointerType != null && !pointerType.isEmpty();
      case GoPackage.TYPE_LIT__FUNCTION_TYPE:
        return functionType != null && !functionType.isEmpty();
      case GoPackage.TYPE_LIT__INTERFACE_TYPE:
        return interfaceType != null && !interfaceType.isEmpty();
      case GoPackage.TYPE_LIT__MAP_TYPE:
        return mapType != null && !mapType.isEmpty();
      case GoPackage.TYPE_LIT__CHANNEL_TYPE:
        return channelType != null && !channelType.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TypeLitImpl
