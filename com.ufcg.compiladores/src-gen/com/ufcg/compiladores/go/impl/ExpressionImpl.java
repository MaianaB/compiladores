/**
 * generated by Xtext 2.13.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.Arguments;
import com.ufcg.compiladores.go.Declaration;
import com.ufcg.compiladores.go.Element;
import com.ufcg.compiladores.go.ElementList;
import com.ufcg.compiladores.go.Expression;
import com.ufcg.compiladores.go.ExpressionLinha;
import com.ufcg.compiladores.go.ExpressionList;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.Index;
import com.ufcg.compiladores.go.Key;
import com.ufcg.compiladores.go.KeyedElement;
import com.ufcg.compiladores.go.Operand;
import com.ufcg.compiladores.go.PrimaryExpr;
import com.ufcg.compiladores.go.ShortVarDecl;
import com.ufcg.compiladores.go.Slice;
import com.ufcg.compiladores.go.SliceLinha;
import com.ufcg.compiladores.go.TopLevelDecl;
import com.ufcg.compiladores.go.VarDecl;
import com.ufcg.compiladores.go.VarSpec;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionImpl#getPrimaryExprLinha <em>Primary Expr Linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionImpl#getKeyedElement <em>Keyed Element</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionImpl#getElement <em>Element</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ExpressionImpl#getExpression <em>Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends ArrayLengthImpl implements Expression
{
  /**
   * The default value of the '{@link #getPrimaryExprLinha() <em>Primary Expr Linha</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryExprLinha()
   * @generated
   * @ordered
   */
  protected static final String PRIMARY_EXPR_LINHA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPrimaryExprLinha() <em>Primary Expr Linha</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryExprLinha()
   * @generated
   * @ordered
   */
  protected String primaryExprLinha = PRIMARY_EXPR_LINHA_EDEFAULT;

  /**
   * The cached value of the '{@link #getKeyedElement() <em>Keyed Element</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyedElement()
   * @generated
   * @ordered
   */
  protected KeyedElement keyedElement;

  /**
   * The cached value of the '{@link #getElement() <em>Element</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElement()
   * @generated
   * @ordered
   */
  protected Element element;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPrimaryExprLinha()
  {
    return primaryExprLinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrimaryExprLinha(String newPrimaryExprLinha)
  {
    String oldPrimaryExprLinha = primaryExprLinha;
    primaryExprLinha = newPrimaryExprLinha;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__PRIMARY_EXPR_LINHA, oldPrimaryExprLinha, primaryExprLinha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyedElement getKeyedElement()
  {
    return keyedElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetKeyedElement(KeyedElement newKeyedElement, NotificationChain msgs)
  {
    KeyedElement oldKeyedElement = keyedElement;
    keyedElement = newKeyedElement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__KEYED_ELEMENT, oldKeyedElement, newKeyedElement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setKeyedElement(KeyedElement newKeyedElement)
  {
    if (newKeyedElement != keyedElement)
    {
      NotificationChain msgs = null;
      if (keyedElement != null)
        msgs = ((InternalEObject)keyedElement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__KEYED_ELEMENT, null, msgs);
      if (newKeyedElement != null)
        msgs = ((InternalEObject)newKeyedElement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__KEYED_ELEMENT, null, msgs);
      msgs = basicSetKeyedElement(newKeyedElement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__KEYED_ELEMENT, newKeyedElement, newKeyedElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element getElement()
  {
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElement(Element newElement, NotificationChain msgs)
  {
    Element oldElement = element;
    element = newElement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__ELEMENT, oldElement, newElement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElement(Element newElement)
  {
    if (newElement != element)
    {
      NotificationChain msgs = null;
      if (element != null)
        msgs = ((InternalEObject)element).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__ELEMENT, null, msgs);
      if (newElement != null)
        msgs = ((InternalEObject)newElement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__ELEMENT, null, msgs);
      msgs = basicSetElement(newElement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__ELEMENT, newElement, newElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__KEYED_ELEMENT:
        return basicSetKeyedElement(null, msgs);
      case GoPackage.EXPRESSION__ELEMENT:
        return basicSetElement(null, msgs);
      case GoPackage.EXPRESSION__EXPRESSION:
        return basicSetExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__PRIMARY_EXPR_LINHA:
        return getPrimaryExprLinha();
      case GoPackage.EXPRESSION__KEYED_ELEMENT:
        return getKeyedElement();
      case GoPackage.EXPRESSION__ELEMENT:
        return getElement();
      case GoPackage.EXPRESSION__EXPRESSION:
        return getExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__PRIMARY_EXPR_LINHA:
        setPrimaryExprLinha((String)newValue);
        return;
      case GoPackage.EXPRESSION__KEYED_ELEMENT:
        setKeyedElement((KeyedElement)newValue);
        return;
      case GoPackage.EXPRESSION__ELEMENT:
        setElement((Element)newValue);
        return;
      case GoPackage.EXPRESSION__EXPRESSION:
        setExpression((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__PRIMARY_EXPR_LINHA:
        setPrimaryExprLinha(PRIMARY_EXPR_LINHA_EDEFAULT);
        return;
      case GoPackage.EXPRESSION__KEYED_ELEMENT:
        setKeyedElement((KeyedElement)null);
        return;
      case GoPackage.EXPRESSION__ELEMENT:
        setElement((Element)null);
        return;
      case GoPackage.EXPRESSION__EXPRESSION:
        setExpression((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__PRIMARY_EXPR_LINHA:
        return PRIMARY_EXPR_LINHA_EDEFAULT == null ? primaryExprLinha != null : !PRIMARY_EXPR_LINHA_EDEFAULT.equals(primaryExprLinha);
      case GoPackage.EXPRESSION__KEYED_ELEMENT:
        return keyedElement != null;
      case GoPackage.EXPRESSION__ELEMENT:
        return element != null;
      case GoPackage.EXPRESSION__EXPRESSION:
        return expression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == TopLevelDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Declaration.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarSpec.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Arguments.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExpressionList.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrimaryExpr.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION__PRIMARY_EXPR_LINHA: return GoPackage.PRIMARY_EXPR__PRIMARY_EXPR_LINHA;
        default: return -1;
      }
    }
    if (baseClass == Operand.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Element.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ElementList.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == KeyedElement.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION__KEYED_ELEMENT: return GoPackage.KEYED_ELEMENT__KEYED_ELEMENT;
        case GoPackage.EXPRESSION__ELEMENT: return GoPackage.KEYED_ELEMENT__ELEMENT;
        default: return -1;
      }
    }
    if (baseClass == Key.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Index.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Slice.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION__EXPRESSION: return GoPackage.SLICE__EXPRESSION;
        default: return -1;
      }
    }
    if (baseClass == SliceLinha.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExpressionLinha.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == TopLevelDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Declaration.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarSpec.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Arguments.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExpressionList.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrimaryExpr.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__PRIMARY_EXPR_LINHA: return GoPackage.EXPRESSION__PRIMARY_EXPR_LINHA;
        default: return -1;
      }
    }
    if (baseClass == Operand.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Element.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ElementList.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == KeyedElement.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.KEYED_ELEMENT__KEYED_ELEMENT: return GoPackage.EXPRESSION__KEYED_ELEMENT;
        case GoPackage.KEYED_ELEMENT__ELEMENT: return GoPackage.EXPRESSION__ELEMENT;
        default: return -1;
      }
    }
    if (baseClass == Key.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Index.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Slice.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.SLICE__EXPRESSION: return GoPackage.EXPRESSION__EXPRESSION;
        default: return -1;
      }
    }
    if (baseClass == SliceLinha.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExpressionLinha.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (PrimaryExprLinha: ");
    result.append(primaryExprLinha);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
