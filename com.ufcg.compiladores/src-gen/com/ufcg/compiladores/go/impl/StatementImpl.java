/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.Block;
import com.ufcg.compiladores.go.Declaration;
import com.ufcg.compiladores.go.DeferStmt;
import com.ufcg.compiladores.go.ForStmt;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.GoStmt;
import com.ufcg.compiladores.go.IfStmt;
import com.ufcg.compiladores.go.LabeledStmt;
import com.ufcg.compiladores.go.ReturnStmt;
import com.ufcg.compiladores.go.SelectStmt;
import com.ufcg.compiladores.go.SimpleStmt;
import com.ufcg.compiladores.go.Statement;
import com.ufcg.compiladores.go.SwitchStmt;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getLabeledStmt <em>Labeled Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getSimpleStmt <em>Simple Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getGoStmt <em>Go Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getReturnStmt <em>Return Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getBreakStmt <em>Break Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getContinueStmt <em>Continue Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getGotoStmt <em>Goto Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getFallthroughStmt <em>Fallthrough Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getBlock <em>Block</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getIfStmt <em>If Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getSwitchStmt <em>Switch Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getSelectStmt <em>Select Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getForStmt <em>For Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getDeferStmt <em>Defer Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends StatementListImpl implements Statement
{
  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected EList<Declaration> declaration;

  /**
   * The cached value of the '{@link #getLabeledStmt() <em>Labeled Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabeledStmt()
   * @generated
   * @ordered
   */
  protected EList<LabeledStmt> labeledStmt;

  /**
   * The cached value of the '{@link #getSimpleStmt() <em>Simple Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleStmt()
   * @generated
   * @ordered
   */
  protected EList<SimpleStmt> simpleStmt;

  /**
   * The cached value of the '{@link #getGoStmt() <em>Go Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGoStmt()
   * @generated
   * @ordered
   */
  protected EList<GoStmt> goStmt;

  /**
   * The cached value of the '{@link #getReturnStmt() <em>Return Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnStmt()
   * @generated
   * @ordered
   */
  protected EList<ReturnStmt> returnStmt;

  /**
   * The cached value of the '{@link #getBreakStmt() <em>Break Stmt</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakStmt()
   * @generated
   * @ordered
   */
  protected EList<String> breakStmt;

  /**
   * The cached value of the '{@link #getContinueStmt() <em>Continue Stmt</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContinueStmt()
   * @generated
   * @ordered
   */
  protected EList<String> continueStmt;

  /**
   * The cached value of the '{@link #getGotoStmt() <em>Goto Stmt</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGotoStmt()
   * @generated
   * @ordered
   */
  protected EList<String> gotoStmt;

  /**
   * The cached value of the '{@link #getFallthroughStmt() <em>Fallthrough Stmt</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFallthroughStmt()
   * @generated
   * @ordered
   */
  protected EList<String> fallthroughStmt;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected EList<Block> block;

  /**
   * The cached value of the '{@link #getIfStmt() <em>If Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfStmt()
   * @generated
   * @ordered
   */
  protected EList<IfStmt> ifStmt;

  /**
   * The cached value of the '{@link #getSwitchStmt() <em>Switch Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitchStmt()
   * @generated
   * @ordered
   */
  protected EList<SwitchStmt> switchStmt;

  /**
   * The cached value of the '{@link #getSelectStmt() <em>Select Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectStmt()
   * @generated
   * @ordered
   */
  protected EList<SelectStmt> selectStmt;

  /**
   * The cached value of the '{@link #getForStmt() <em>For Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForStmt()
   * @generated
   * @ordered
   */
  protected EList<ForStmt> forStmt;

  /**
   * The cached value of the '{@link #getDeferStmt() <em>Defer Stmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeferStmt()
   * @generated
   * @ordered
   */
  protected EList<DeferStmt> deferStmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Declaration> getDeclaration()
  {
    if (declaration == null)
    {
      declaration = new EObjectContainmentEList<Declaration>(Declaration.class, this, GoPackage.STATEMENT__DECLARATION);
    }
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LabeledStmt> getLabeledStmt()
  {
    if (labeledStmt == null)
    {
      labeledStmt = new EObjectContainmentEList<LabeledStmt>(LabeledStmt.class, this, GoPackage.STATEMENT__LABELED_STMT);
    }
    return labeledStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SimpleStmt> getSimpleStmt()
  {
    if (simpleStmt == null)
    {
      simpleStmt = new EObjectContainmentEList<SimpleStmt>(SimpleStmt.class, this, GoPackage.STATEMENT__SIMPLE_STMT);
    }
    return simpleStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GoStmt> getGoStmt()
  {
    if (goStmt == null)
    {
      goStmt = new EObjectContainmentEList<GoStmt>(GoStmt.class, this, GoPackage.STATEMENT__GO_STMT);
    }
    return goStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ReturnStmt> getReturnStmt()
  {
    if (returnStmt == null)
    {
      returnStmt = new EObjectContainmentEList<ReturnStmt>(ReturnStmt.class, this, GoPackage.STATEMENT__RETURN_STMT);
    }
    return returnStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getBreakStmt()
  {
    if (breakStmt == null)
    {
      breakStmt = new EDataTypeEList<String>(String.class, this, GoPackage.STATEMENT__BREAK_STMT);
    }
    return breakStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getContinueStmt()
  {
    if (continueStmt == null)
    {
      continueStmt = new EDataTypeEList<String>(String.class, this, GoPackage.STATEMENT__CONTINUE_STMT);
    }
    return continueStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getGotoStmt()
  {
    if (gotoStmt == null)
    {
      gotoStmt = new EDataTypeEList<String>(String.class, this, GoPackage.STATEMENT__GOTO_STMT);
    }
    return gotoStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getFallthroughStmt()
  {
    if (fallthroughStmt == null)
    {
      fallthroughStmt = new EDataTypeEList<String>(String.class, this, GoPackage.STATEMENT__FALLTHROUGH_STMT);
    }
    return fallthroughStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Block> getBlock()
  {
    if (block == null)
    {
      block = new EObjectContainmentEList<Block>(Block.class, this, GoPackage.STATEMENT__BLOCK);
    }
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<IfStmt> getIfStmt()
  {
    if (ifStmt == null)
    {
      ifStmt = new EObjectContainmentEList<IfStmt>(IfStmt.class, this, GoPackage.STATEMENT__IF_STMT);
    }
    return ifStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SwitchStmt> getSwitchStmt()
  {
    if (switchStmt == null)
    {
      switchStmt = new EObjectContainmentEList<SwitchStmt>(SwitchStmt.class, this, GoPackage.STATEMENT__SWITCH_STMT);
    }
    return switchStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SelectStmt> getSelectStmt()
  {
    if (selectStmt == null)
    {
      selectStmt = new EObjectContainmentEList<SelectStmt>(SelectStmt.class, this, GoPackage.STATEMENT__SELECT_STMT);
    }
    return selectStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ForStmt> getForStmt()
  {
    if (forStmt == null)
    {
      forStmt = new EObjectContainmentEList<ForStmt>(ForStmt.class, this, GoPackage.STATEMENT__FOR_STMT);
    }
    return forStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DeferStmt> getDeferStmt()
  {
    if (deferStmt == null)
    {
      deferStmt = new EObjectContainmentEList<DeferStmt>(DeferStmt.class, this, GoPackage.STATEMENT__DEFER_STMT);
    }
    return deferStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return ((InternalEList<?>)getDeclaration()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__LABELED_STMT:
        return ((InternalEList<?>)getLabeledStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__SIMPLE_STMT:
        return ((InternalEList<?>)getSimpleStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__GO_STMT:
        return ((InternalEList<?>)getGoStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__RETURN_STMT:
        return ((InternalEList<?>)getReturnStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__BLOCK:
        return ((InternalEList<?>)getBlock()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__IF_STMT:
        return ((InternalEList<?>)getIfStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__SWITCH_STMT:
        return ((InternalEList<?>)getSwitchStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__SELECT_STMT:
        return ((InternalEList<?>)getSelectStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__FOR_STMT:
        return ((InternalEList<?>)getForStmt()).basicRemove(otherEnd, msgs);
      case GoPackage.STATEMENT__DEFER_STMT:
        return ((InternalEList<?>)getDeferStmt()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return getDeclaration();
      case GoPackage.STATEMENT__LABELED_STMT:
        return getLabeledStmt();
      case GoPackage.STATEMENT__SIMPLE_STMT:
        return getSimpleStmt();
      case GoPackage.STATEMENT__GO_STMT:
        return getGoStmt();
      case GoPackage.STATEMENT__RETURN_STMT:
        return getReturnStmt();
      case GoPackage.STATEMENT__BREAK_STMT:
        return getBreakStmt();
      case GoPackage.STATEMENT__CONTINUE_STMT:
        return getContinueStmt();
      case GoPackage.STATEMENT__GOTO_STMT:
        return getGotoStmt();
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        return getFallthroughStmt();
      case GoPackage.STATEMENT__BLOCK:
        return getBlock();
      case GoPackage.STATEMENT__IF_STMT:
        return getIfStmt();
      case GoPackage.STATEMENT__SWITCH_STMT:
        return getSwitchStmt();
      case GoPackage.STATEMENT__SELECT_STMT:
        return getSelectStmt();
      case GoPackage.STATEMENT__FOR_STMT:
        return getForStmt();
      case GoPackage.STATEMENT__DEFER_STMT:
        return getDeferStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        getDeclaration().clear();
        getDeclaration().addAll((Collection<? extends Declaration>)newValue);
        return;
      case GoPackage.STATEMENT__LABELED_STMT:
        getLabeledStmt().clear();
        getLabeledStmt().addAll((Collection<? extends LabeledStmt>)newValue);
        return;
      case GoPackage.STATEMENT__SIMPLE_STMT:
        getSimpleStmt().clear();
        getSimpleStmt().addAll((Collection<? extends SimpleStmt>)newValue);
        return;
      case GoPackage.STATEMENT__GO_STMT:
        getGoStmt().clear();
        getGoStmt().addAll((Collection<? extends GoStmt>)newValue);
        return;
      case GoPackage.STATEMENT__RETURN_STMT:
        getReturnStmt().clear();
        getReturnStmt().addAll((Collection<? extends ReturnStmt>)newValue);
        return;
      case GoPackage.STATEMENT__BREAK_STMT:
        getBreakStmt().clear();
        getBreakStmt().addAll((Collection<? extends String>)newValue);
        return;
      case GoPackage.STATEMENT__CONTINUE_STMT:
        getContinueStmt().clear();
        getContinueStmt().addAll((Collection<? extends String>)newValue);
        return;
      case GoPackage.STATEMENT__GOTO_STMT:
        getGotoStmt().clear();
        getGotoStmt().addAll((Collection<? extends String>)newValue);
        return;
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        getFallthroughStmt().clear();
        getFallthroughStmt().addAll((Collection<? extends String>)newValue);
        return;
      case GoPackage.STATEMENT__BLOCK:
        getBlock().clear();
        getBlock().addAll((Collection<? extends Block>)newValue);
        return;
      case GoPackage.STATEMENT__IF_STMT:
        getIfStmt().clear();
        getIfStmt().addAll((Collection<? extends IfStmt>)newValue);
        return;
      case GoPackage.STATEMENT__SWITCH_STMT:
        getSwitchStmt().clear();
        getSwitchStmt().addAll((Collection<? extends SwitchStmt>)newValue);
        return;
      case GoPackage.STATEMENT__SELECT_STMT:
        getSelectStmt().clear();
        getSelectStmt().addAll((Collection<? extends SelectStmt>)newValue);
        return;
      case GoPackage.STATEMENT__FOR_STMT:
        getForStmt().clear();
        getForStmt().addAll((Collection<? extends ForStmt>)newValue);
        return;
      case GoPackage.STATEMENT__DEFER_STMT:
        getDeferStmt().clear();
        getDeferStmt().addAll((Collection<? extends DeferStmt>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        getDeclaration().clear();
        return;
      case GoPackage.STATEMENT__LABELED_STMT:
        getLabeledStmt().clear();
        return;
      case GoPackage.STATEMENT__SIMPLE_STMT:
        getSimpleStmt().clear();
        return;
      case GoPackage.STATEMENT__GO_STMT:
        getGoStmt().clear();
        return;
      case GoPackage.STATEMENT__RETURN_STMT:
        getReturnStmt().clear();
        return;
      case GoPackage.STATEMENT__BREAK_STMT:
        getBreakStmt().clear();
        return;
      case GoPackage.STATEMENT__CONTINUE_STMT:
        getContinueStmt().clear();
        return;
      case GoPackage.STATEMENT__GOTO_STMT:
        getGotoStmt().clear();
        return;
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        getFallthroughStmt().clear();
        return;
      case GoPackage.STATEMENT__BLOCK:
        getBlock().clear();
        return;
      case GoPackage.STATEMENT__IF_STMT:
        getIfStmt().clear();
        return;
      case GoPackage.STATEMENT__SWITCH_STMT:
        getSwitchStmt().clear();
        return;
      case GoPackage.STATEMENT__SELECT_STMT:
        getSelectStmt().clear();
        return;
      case GoPackage.STATEMENT__FOR_STMT:
        getForStmt().clear();
        return;
      case GoPackage.STATEMENT__DEFER_STMT:
        getDeferStmt().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return declaration != null && !declaration.isEmpty();
      case GoPackage.STATEMENT__LABELED_STMT:
        return labeledStmt != null && !labeledStmt.isEmpty();
      case GoPackage.STATEMENT__SIMPLE_STMT:
        return simpleStmt != null && !simpleStmt.isEmpty();
      case GoPackage.STATEMENT__GO_STMT:
        return goStmt != null && !goStmt.isEmpty();
      case GoPackage.STATEMENT__RETURN_STMT:
        return returnStmt != null && !returnStmt.isEmpty();
      case GoPackage.STATEMENT__BREAK_STMT:
        return breakStmt != null && !breakStmt.isEmpty();
      case GoPackage.STATEMENT__CONTINUE_STMT:
        return continueStmt != null && !continueStmt.isEmpty();
      case GoPackage.STATEMENT__GOTO_STMT:
        return gotoStmt != null && !gotoStmt.isEmpty();
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        return fallthroughStmt != null && !fallthroughStmt.isEmpty();
      case GoPackage.STATEMENT__BLOCK:
        return block != null && !block.isEmpty();
      case GoPackage.STATEMENT__IF_STMT:
        return ifStmt != null && !ifStmt.isEmpty();
      case GoPackage.STATEMENT__SWITCH_STMT:
        return switchStmt != null && !switchStmt.isEmpty();
      case GoPackage.STATEMENT__SELECT_STMT:
        return selectStmt != null && !selectStmt.isEmpty();
      case GoPackage.STATEMENT__FOR_STMT:
        return forStmt != null && !forStmt.isEmpty();
      case GoPackage.STATEMENT__DEFER_STMT:
        return deferStmt != null && !deferStmt.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (BreakStmt: ");
    result.append(breakStmt);
    result.append(", ContinueStmt: ");
    result.append(continueStmt);
    result.append(", GotoStmt: ");
    result.append(gotoStmt);
    result.append(", FallthroughStmt: ");
    result.append(fallthroughStmt);
    result.append(')');
    return result.toString();
  }

} //StatementImpl
