/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.Block;
import com.ufcg.compiladores.go.BreakStmt;
import com.ufcg.compiladores.go.ContinueStmt;
import com.ufcg.compiladores.go.Declaration;
import com.ufcg.compiladores.go.DeferStmt;
import com.ufcg.compiladores.go.ForStmt;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.GoStmt;
import com.ufcg.compiladores.go.GotoStmt;
import com.ufcg.compiladores.go.IfStmt;
import com.ufcg.compiladores.go.LabeledStmt;
import com.ufcg.compiladores.go.ReturnStmt;
import com.ufcg.compiladores.go.SelectStmt;
import com.ufcg.compiladores.go.SimpleStmt;
import com.ufcg.compiladores.go.Statement;
import com.ufcg.compiladores.go.SwitchStmt;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getLabeledStmt <em>Labeled Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getSimpleStmt <em>Simple Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getGoStmt <em>Go Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getReturnStmt <em>Return Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getBreakStmt <em>Break Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getContinueStmt <em>Continue Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getGotoStmt <em>Goto Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getFallthroughStmt <em>Fallthrough Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getBlock <em>Block</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getIfStmt <em>If Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getSwitchStmt <em>Switch Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getSelectStmt <em>Select Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getForStmt <em>For Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.StatementImpl#getDeferStmt <em>Defer Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected Declaration declaration;

  /**
   * The cached value of the '{@link #getLabeledStmt() <em>Labeled Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabeledStmt()
   * @generated
   * @ordered
   */
  protected LabeledStmt labeledStmt;

  /**
   * The cached value of the '{@link #getSimpleStmt() <em>Simple Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleStmt()
   * @generated
   * @ordered
   */
  protected SimpleStmt simpleStmt;

  /**
   * The cached value of the '{@link #getGoStmt() <em>Go Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGoStmt()
   * @generated
   * @ordered
   */
  protected GoStmt goStmt;

  /**
   * The cached value of the '{@link #getReturnStmt() <em>Return Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnStmt()
   * @generated
   * @ordered
   */
  protected ReturnStmt returnStmt;

  /**
   * The cached value of the '{@link #getBreakStmt() <em>Break Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakStmt()
   * @generated
   * @ordered
   */
  protected BreakStmt breakStmt;

  /**
   * The cached value of the '{@link #getContinueStmt() <em>Continue Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContinueStmt()
   * @generated
   * @ordered
   */
  protected ContinueStmt continueStmt;

  /**
   * The cached value of the '{@link #getGotoStmt() <em>Goto Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGotoStmt()
   * @generated
   * @ordered
   */
  protected GotoStmt gotoStmt;

  /**
   * The default value of the '{@link #getFallthroughStmt() <em>Fallthrough Stmt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFallthroughStmt()
   * @generated
   * @ordered
   */
  protected static final String FALLTHROUGH_STMT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFallthroughStmt() <em>Fallthrough Stmt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFallthroughStmt()
   * @generated
   * @ordered
   */
  protected String fallthroughStmt = FALLTHROUGH_STMT_EDEFAULT;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected Block block;

  /**
   * The cached value of the '{@link #getIfStmt() <em>If Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfStmt()
   * @generated
   * @ordered
   */
  protected IfStmt ifStmt;

  /**
   * The cached value of the '{@link #getSwitchStmt() <em>Switch Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitchStmt()
   * @generated
   * @ordered
   */
  protected SwitchStmt switchStmt;

  /**
   * The cached value of the '{@link #getSelectStmt() <em>Select Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectStmt()
   * @generated
   * @ordered
   */
  protected SelectStmt selectStmt;

  /**
   * The cached value of the '{@link #getForStmt() <em>For Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForStmt()
   * @generated
   * @ordered
   */
  protected ForStmt forStmt;

  /**
   * The cached value of the '{@link #getDeferStmt() <em>Defer Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeferStmt()
   * @generated
   * @ordered
   */
  protected DeferStmt deferStmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration getDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclaration(Declaration newDeclaration, NotificationChain msgs)
  {
    Declaration oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DECLARATION, oldDeclaration, newDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclaration(Declaration newDeclaration)
  {
    if (newDeclaration != declaration)
    {
      NotificationChain msgs = null;
      if (declaration != null)
        msgs = ((InternalEObject)declaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DECLARATION, null, msgs);
      if (newDeclaration != null)
        msgs = ((InternalEObject)newDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DECLARATION, null, msgs);
      msgs = basicSetDeclaration(newDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DECLARATION, newDeclaration, newDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LabeledStmt getLabeledStmt()
  {
    return labeledStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabeledStmt(LabeledStmt newLabeledStmt, NotificationChain msgs)
  {
    LabeledStmt oldLabeledStmt = labeledStmt;
    labeledStmt = newLabeledStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__LABELED_STMT, oldLabeledStmt, newLabeledStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLabeledStmt(LabeledStmt newLabeledStmt)
  {
    if (newLabeledStmt != labeledStmt)
    {
      NotificationChain msgs = null;
      if (labeledStmt != null)
        msgs = ((InternalEObject)labeledStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__LABELED_STMT, null, msgs);
      if (newLabeledStmt != null)
        msgs = ((InternalEObject)newLabeledStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__LABELED_STMT, null, msgs);
      msgs = basicSetLabeledStmt(newLabeledStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__LABELED_STMT, newLabeledStmt, newLabeledStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStmt getSimpleStmt()
  {
    return simpleStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimpleStmt(SimpleStmt newSimpleStmt, NotificationChain msgs)
  {
    SimpleStmt oldSimpleStmt = simpleStmt;
    simpleStmt = newSimpleStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SIMPLE_STMT, oldSimpleStmt, newSimpleStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimpleStmt(SimpleStmt newSimpleStmt)
  {
    if (newSimpleStmt != simpleStmt)
    {
      NotificationChain msgs = null;
      if (simpleStmt != null)
        msgs = ((InternalEObject)simpleStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SIMPLE_STMT, null, msgs);
      if (newSimpleStmt != null)
        msgs = ((InternalEObject)newSimpleStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SIMPLE_STMT, null, msgs);
      msgs = basicSetSimpleStmt(newSimpleStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SIMPLE_STMT, newSimpleStmt, newSimpleStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoStmt getGoStmt()
  {
    return goStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGoStmt(GoStmt newGoStmt, NotificationChain msgs)
  {
    GoStmt oldGoStmt = goStmt;
    goStmt = newGoStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GO_STMT, oldGoStmt, newGoStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGoStmt(GoStmt newGoStmt)
  {
    if (newGoStmt != goStmt)
    {
      NotificationChain msgs = null;
      if (goStmt != null)
        msgs = ((InternalEObject)goStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GO_STMT, null, msgs);
      if (newGoStmt != null)
        msgs = ((InternalEObject)newGoStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GO_STMT, null, msgs);
      msgs = basicSetGoStmt(newGoStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GO_STMT, newGoStmt, newGoStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnStmt getReturnStmt()
  {
    return returnStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnStmt(ReturnStmt newReturnStmt, NotificationChain msgs)
  {
    ReturnStmt oldReturnStmt = returnStmt;
    returnStmt = newReturnStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__RETURN_STMT, oldReturnStmt, newReturnStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReturnStmt(ReturnStmt newReturnStmt)
  {
    if (newReturnStmt != returnStmt)
    {
      NotificationChain msgs = null;
      if (returnStmt != null)
        msgs = ((InternalEObject)returnStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__RETURN_STMT, null, msgs);
      if (newReturnStmt != null)
        msgs = ((InternalEObject)newReturnStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__RETURN_STMT, null, msgs);
      msgs = basicSetReturnStmt(newReturnStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__RETURN_STMT, newReturnStmt, newReturnStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BreakStmt getBreakStmt()
  {
    return breakStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBreakStmt(BreakStmt newBreakStmt, NotificationChain msgs)
  {
    BreakStmt oldBreakStmt = breakStmt;
    breakStmt = newBreakStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BREAK_STMT, oldBreakStmt, newBreakStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBreakStmt(BreakStmt newBreakStmt)
  {
    if (newBreakStmt != breakStmt)
    {
      NotificationChain msgs = null;
      if (breakStmt != null)
        msgs = ((InternalEObject)breakStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BREAK_STMT, null, msgs);
      if (newBreakStmt != null)
        msgs = ((InternalEObject)newBreakStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BREAK_STMT, null, msgs);
      msgs = basicSetBreakStmt(newBreakStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BREAK_STMT, newBreakStmt, newBreakStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContinueStmt getContinueStmt()
  {
    return continueStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContinueStmt(ContinueStmt newContinueStmt, NotificationChain msgs)
  {
    ContinueStmt oldContinueStmt = continueStmt;
    continueStmt = newContinueStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__CONTINUE_STMT, oldContinueStmt, newContinueStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContinueStmt(ContinueStmt newContinueStmt)
  {
    if (newContinueStmt != continueStmt)
    {
      NotificationChain msgs = null;
      if (continueStmt != null)
        msgs = ((InternalEObject)continueStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__CONTINUE_STMT, null, msgs);
      if (newContinueStmt != null)
        msgs = ((InternalEObject)newContinueStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__CONTINUE_STMT, null, msgs);
      msgs = basicSetContinueStmt(newContinueStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__CONTINUE_STMT, newContinueStmt, newContinueStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GotoStmt getGotoStmt()
  {
    return gotoStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGotoStmt(GotoStmt newGotoStmt, NotificationChain msgs)
  {
    GotoStmt oldGotoStmt = gotoStmt;
    gotoStmt = newGotoStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GOTO_STMT, oldGotoStmt, newGotoStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGotoStmt(GotoStmt newGotoStmt)
  {
    if (newGotoStmt != gotoStmt)
    {
      NotificationChain msgs = null;
      if (gotoStmt != null)
        msgs = ((InternalEObject)gotoStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GOTO_STMT, null, msgs);
      if (newGotoStmt != null)
        msgs = ((InternalEObject)newGotoStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GOTO_STMT, null, msgs);
      msgs = basicSetGotoStmt(newGotoStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GOTO_STMT, newGotoStmt, newGotoStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFallthroughStmt()
  {
    return fallthroughStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFallthroughStmt(String newFallthroughStmt)
  {
    String oldFallthroughStmt = fallthroughStmt;
    fallthroughStmt = newFallthroughStmt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__FALLTHROUGH_STMT, oldFallthroughStmt, fallthroughStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock(Block newBlock, NotificationChain msgs)
  {
    Block oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BLOCK, oldBlock, newBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBlock(Block newBlock)
  {
    if (newBlock != block)
    {
      NotificationChain msgs = null;
      if (block != null)
        msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BLOCK, null, msgs);
      if (newBlock != null)
        msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BLOCK, null, msgs);
      msgs = basicSetBlock(newBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BLOCK, newBlock, newBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStmt getIfStmt()
  {
    return ifStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfStmt(IfStmt newIfStmt, NotificationChain msgs)
  {
    IfStmt oldIfStmt = ifStmt;
    ifStmt = newIfStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__IF_STMT, oldIfStmt, newIfStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIfStmt(IfStmt newIfStmt)
  {
    if (newIfStmt != ifStmt)
    {
      NotificationChain msgs = null;
      if (ifStmt != null)
        msgs = ((InternalEObject)ifStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__IF_STMT, null, msgs);
      if (newIfStmt != null)
        msgs = ((InternalEObject)newIfStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__IF_STMT, null, msgs);
      msgs = basicSetIfStmt(newIfStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__IF_STMT, newIfStmt, newIfStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SwitchStmt getSwitchStmt()
  {
    return switchStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSwitchStmt(SwitchStmt newSwitchStmt, NotificationChain msgs)
  {
    SwitchStmt oldSwitchStmt = switchStmt;
    switchStmt = newSwitchStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SWITCH_STMT, oldSwitchStmt, newSwitchStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSwitchStmt(SwitchStmt newSwitchStmt)
  {
    if (newSwitchStmt != switchStmt)
    {
      NotificationChain msgs = null;
      if (switchStmt != null)
        msgs = ((InternalEObject)switchStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SWITCH_STMT, null, msgs);
      if (newSwitchStmt != null)
        msgs = ((InternalEObject)newSwitchStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SWITCH_STMT, null, msgs);
      msgs = basicSetSwitchStmt(newSwitchStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SWITCH_STMT, newSwitchStmt, newSwitchStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelectStmt getSelectStmt()
  {
    return selectStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectStmt(SelectStmt newSelectStmt, NotificationChain msgs)
  {
    SelectStmt oldSelectStmt = selectStmt;
    selectStmt = newSelectStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SELECT_STMT, oldSelectStmt, newSelectStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSelectStmt(SelectStmt newSelectStmt)
  {
    if (newSelectStmt != selectStmt)
    {
      NotificationChain msgs = null;
      if (selectStmt != null)
        msgs = ((InternalEObject)selectStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SELECT_STMT, null, msgs);
      if (newSelectStmt != null)
        msgs = ((InternalEObject)newSelectStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SELECT_STMT, null, msgs);
      msgs = basicSetSelectStmt(newSelectStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SELECT_STMT, newSelectStmt, newSelectStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStmt getForStmt()
  {
    return forStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForStmt(ForStmt newForStmt, NotificationChain msgs)
  {
    ForStmt oldForStmt = forStmt;
    forStmt = newForStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__FOR_STMT, oldForStmt, newForStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForStmt(ForStmt newForStmt)
  {
    if (newForStmt != forStmt)
    {
      NotificationChain msgs = null;
      if (forStmt != null)
        msgs = ((InternalEObject)forStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__FOR_STMT, null, msgs);
      if (newForStmt != null)
        msgs = ((InternalEObject)newForStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__FOR_STMT, null, msgs);
      msgs = basicSetForStmt(newForStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__FOR_STMT, newForStmt, newForStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeferStmt getDeferStmt()
  {
    return deferStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeferStmt(DeferStmt newDeferStmt, NotificationChain msgs)
  {
    DeferStmt oldDeferStmt = deferStmt;
    deferStmt = newDeferStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DEFER_STMT, oldDeferStmt, newDeferStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeferStmt(DeferStmt newDeferStmt)
  {
    if (newDeferStmt != deferStmt)
    {
      NotificationChain msgs = null;
      if (deferStmt != null)
        msgs = ((InternalEObject)deferStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DEFER_STMT, null, msgs);
      if (newDeferStmt != null)
        msgs = ((InternalEObject)newDeferStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DEFER_STMT, null, msgs);
      msgs = basicSetDeferStmt(newDeferStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DEFER_STMT, newDeferStmt, newDeferStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return basicSetDeclaration(null, msgs);
      case GoPackage.STATEMENT__LABELED_STMT:
        return basicSetLabeledStmt(null, msgs);
      case GoPackage.STATEMENT__SIMPLE_STMT:
        return basicSetSimpleStmt(null, msgs);
      case GoPackage.STATEMENT__GO_STMT:
        return basicSetGoStmt(null, msgs);
      case GoPackage.STATEMENT__RETURN_STMT:
        return basicSetReturnStmt(null, msgs);
      case GoPackage.STATEMENT__BREAK_STMT:
        return basicSetBreakStmt(null, msgs);
      case GoPackage.STATEMENT__CONTINUE_STMT:
        return basicSetContinueStmt(null, msgs);
      case GoPackage.STATEMENT__GOTO_STMT:
        return basicSetGotoStmt(null, msgs);
      case GoPackage.STATEMENT__BLOCK:
        return basicSetBlock(null, msgs);
      case GoPackage.STATEMENT__IF_STMT:
        return basicSetIfStmt(null, msgs);
      case GoPackage.STATEMENT__SWITCH_STMT:
        return basicSetSwitchStmt(null, msgs);
      case GoPackage.STATEMENT__SELECT_STMT:
        return basicSetSelectStmt(null, msgs);
      case GoPackage.STATEMENT__FOR_STMT:
        return basicSetForStmt(null, msgs);
      case GoPackage.STATEMENT__DEFER_STMT:
        return basicSetDeferStmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return getDeclaration();
      case GoPackage.STATEMENT__LABELED_STMT:
        return getLabeledStmt();
      case GoPackage.STATEMENT__SIMPLE_STMT:
        return getSimpleStmt();
      case GoPackage.STATEMENT__GO_STMT:
        return getGoStmt();
      case GoPackage.STATEMENT__RETURN_STMT:
        return getReturnStmt();
      case GoPackage.STATEMENT__BREAK_STMT:
        return getBreakStmt();
      case GoPackage.STATEMENT__CONTINUE_STMT:
        return getContinueStmt();
      case GoPackage.STATEMENT__GOTO_STMT:
        return getGotoStmt();
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        return getFallthroughStmt();
      case GoPackage.STATEMENT__BLOCK:
        return getBlock();
      case GoPackage.STATEMENT__IF_STMT:
        return getIfStmt();
      case GoPackage.STATEMENT__SWITCH_STMT:
        return getSwitchStmt();
      case GoPackage.STATEMENT__SELECT_STMT:
        return getSelectStmt();
      case GoPackage.STATEMENT__FOR_STMT:
        return getForStmt();
      case GoPackage.STATEMENT__DEFER_STMT:
        return getDeferStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        setDeclaration((Declaration)newValue);
        return;
      case GoPackage.STATEMENT__LABELED_STMT:
        setLabeledStmt((LabeledStmt)newValue);
        return;
      case GoPackage.STATEMENT__SIMPLE_STMT:
        setSimpleStmt((SimpleStmt)newValue);
        return;
      case GoPackage.STATEMENT__GO_STMT:
        setGoStmt((GoStmt)newValue);
        return;
      case GoPackage.STATEMENT__RETURN_STMT:
        setReturnStmt((ReturnStmt)newValue);
        return;
      case GoPackage.STATEMENT__BREAK_STMT:
        setBreakStmt((BreakStmt)newValue);
        return;
      case GoPackage.STATEMENT__CONTINUE_STMT:
        setContinueStmt((ContinueStmt)newValue);
        return;
      case GoPackage.STATEMENT__GOTO_STMT:
        setGotoStmt((GotoStmt)newValue);
        return;
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        setFallthroughStmt((String)newValue);
        return;
      case GoPackage.STATEMENT__BLOCK:
        setBlock((Block)newValue);
        return;
      case GoPackage.STATEMENT__IF_STMT:
        setIfStmt((IfStmt)newValue);
        return;
      case GoPackage.STATEMENT__SWITCH_STMT:
        setSwitchStmt((SwitchStmt)newValue);
        return;
      case GoPackage.STATEMENT__SELECT_STMT:
        setSelectStmt((SelectStmt)newValue);
        return;
      case GoPackage.STATEMENT__FOR_STMT:
        setForStmt((ForStmt)newValue);
        return;
      case GoPackage.STATEMENT__DEFER_STMT:
        setDeferStmt((DeferStmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        setDeclaration((Declaration)null);
        return;
      case GoPackage.STATEMENT__LABELED_STMT:
        setLabeledStmt((LabeledStmt)null);
        return;
      case GoPackage.STATEMENT__SIMPLE_STMT:
        setSimpleStmt((SimpleStmt)null);
        return;
      case GoPackage.STATEMENT__GO_STMT:
        setGoStmt((GoStmt)null);
        return;
      case GoPackage.STATEMENT__RETURN_STMT:
        setReturnStmt((ReturnStmt)null);
        return;
      case GoPackage.STATEMENT__BREAK_STMT:
        setBreakStmt((BreakStmt)null);
        return;
      case GoPackage.STATEMENT__CONTINUE_STMT:
        setContinueStmt((ContinueStmt)null);
        return;
      case GoPackage.STATEMENT__GOTO_STMT:
        setGotoStmt((GotoStmt)null);
        return;
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        setFallthroughStmt(FALLTHROUGH_STMT_EDEFAULT);
        return;
      case GoPackage.STATEMENT__BLOCK:
        setBlock((Block)null);
        return;
      case GoPackage.STATEMENT__IF_STMT:
        setIfStmt((IfStmt)null);
        return;
      case GoPackage.STATEMENT__SWITCH_STMT:
        setSwitchStmt((SwitchStmt)null);
        return;
      case GoPackage.STATEMENT__SELECT_STMT:
        setSelectStmt((SelectStmt)null);
        return;
      case GoPackage.STATEMENT__FOR_STMT:
        setForStmt((ForStmt)null);
        return;
      case GoPackage.STATEMENT__DEFER_STMT:
        setDeferStmt((DeferStmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return declaration != null;
      case GoPackage.STATEMENT__LABELED_STMT:
        return labeledStmt != null;
      case GoPackage.STATEMENT__SIMPLE_STMT:
        return simpleStmt != null;
      case GoPackage.STATEMENT__GO_STMT:
        return goStmt != null;
      case GoPackage.STATEMENT__RETURN_STMT:
        return returnStmt != null;
      case GoPackage.STATEMENT__BREAK_STMT:
        return breakStmt != null;
      case GoPackage.STATEMENT__CONTINUE_STMT:
        return continueStmt != null;
      case GoPackage.STATEMENT__GOTO_STMT:
        return gotoStmt != null;
      case GoPackage.STATEMENT__FALLTHROUGH_STMT:
        return FALLTHROUGH_STMT_EDEFAULT == null ? fallthroughStmt != null : !FALLTHROUGH_STMT_EDEFAULT.equals(fallthroughStmt);
      case GoPackage.STATEMENT__BLOCK:
        return block != null;
      case GoPackage.STATEMENT__IF_STMT:
        return ifStmt != null;
      case GoPackage.STATEMENT__SWITCH_STMT:
        return switchStmt != null;
      case GoPackage.STATEMENT__SELECT_STMT:
        return selectStmt != null;
      case GoPackage.STATEMENT__FOR_STMT:
        return forStmt != null;
      case GoPackage.STATEMENT__DEFER_STMT:
        return deferStmt != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (FallthroughStmt: ");
    result.append(fallthroughStmt);
    result.append(')');
    return result.toString();
  }

} //StatementImpl
