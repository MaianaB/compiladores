/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.ExprCaseClause;
import com.ufcg.compiladores.go.Expression;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.TypeCaseClause;
import com.ufcg.compiladores.go.TypeSwitchGuard;
import com.ufcg.compiladores.go.switch_stmt_linha;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>switch stmt linha</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.switch_stmt_linhaImpl#getTypeSwitchGuard <em>Type Switch Guard</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.switch_stmt_linhaImpl#getTypeCaseClause <em>Type Case Clause</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.switch_stmt_linhaImpl#getSwitch_stmt_linha <em>Switch stmt linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.switch_stmt_linhaImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.switch_stmt_linhaImpl#getExprCaseClause <em>Expr Case Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class switch_stmt_linhaImpl extends MinimalEObjectImpl.Container implements switch_stmt_linha
{
  /**
   * The cached value of the '{@link #getTypeSwitchGuard() <em>Type Switch Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeSwitchGuard()
   * @generated
   * @ordered
   */
  protected TypeSwitchGuard typeSwitchGuard;

  /**
   * The cached value of the '{@link #getTypeCaseClause() <em>Type Case Clause</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCaseClause()
   * @generated
   * @ordered
   */
  protected EList<TypeCaseClause> typeCaseClause;

  /**
   * The cached value of the '{@link #getSwitch_stmt_linha() <em>Switch stmt linha</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch_stmt_linha()
   * @generated
   * @ordered
   */
  protected switch_stmt_linha switch_stmt_linha;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getExprCaseClause() <em>Expr Case Clause</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprCaseClause()
   * @generated
   * @ordered
   */
  protected EList<ExprCaseClause> exprCaseClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected switch_stmt_linhaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.SWITCH_STMT_LINHA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSwitchGuard getTypeSwitchGuard()
  {
    return typeSwitchGuard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeSwitchGuard(TypeSwitchGuard newTypeSwitchGuard, NotificationChain msgs)
  {
    TypeSwitchGuard oldTypeSwitchGuard = typeSwitchGuard;
    typeSwitchGuard = newTypeSwitchGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD, oldTypeSwitchGuard, newTypeSwitchGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeSwitchGuard(TypeSwitchGuard newTypeSwitchGuard)
  {
    if (newTypeSwitchGuard != typeSwitchGuard)
    {
      NotificationChain msgs = null;
      if (typeSwitchGuard != null)
        msgs = ((InternalEObject)typeSwitchGuard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD, null, msgs);
      if (newTypeSwitchGuard != null)
        msgs = ((InternalEObject)newTypeSwitchGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD, null, msgs);
      msgs = basicSetTypeSwitchGuard(newTypeSwitchGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD, newTypeSwitchGuard, newTypeSwitchGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeCaseClause> getTypeCaseClause()
  {
    if (typeCaseClause == null)
    {
      typeCaseClause = new EObjectContainmentEList<TypeCaseClause>(TypeCaseClause.class, this, GoPackage.SWITCH_STMT_LINHA__TYPE_CASE_CLAUSE);
    }
    return typeCaseClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public switch_stmt_linha getSwitch_stmt_linha()
  {
    return switch_stmt_linha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSwitch_stmt_linha(switch_stmt_linha newSwitch_stmt_linha, NotificationChain msgs)
  {
    switch_stmt_linha oldSwitch_stmt_linha = switch_stmt_linha;
    switch_stmt_linha = newSwitch_stmt_linha;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA, oldSwitch_stmt_linha, newSwitch_stmt_linha);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSwitch_stmt_linha(switch_stmt_linha newSwitch_stmt_linha)
  {
    if (newSwitch_stmt_linha != switch_stmt_linha)
    {
      NotificationChain msgs = null;
      if (switch_stmt_linha != null)
        msgs = ((InternalEObject)switch_stmt_linha).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA, null, msgs);
      if (newSwitch_stmt_linha != null)
        msgs = ((InternalEObject)newSwitch_stmt_linha).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA, null, msgs);
      msgs = basicSetSwitch_stmt_linha(newSwitch_stmt_linha, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA, newSwitch_stmt_linha, newSwitch_stmt_linha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT_LINHA__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT_LINHA__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT_LINHA__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT_LINHA__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExprCaseClause> getExprCaseClause()
  {
    if (exprCaseClause == null)
    {
      exprCaseClause = new EObjectContainmentEList<ExprCaseClause>(ExprCaseClause.class, this, GoPackage.SWITCH_STMT_LINHA__EXPR_CASE_CLAUSE);
    }
    return exprCaseClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD:
        return basicSetTypeSwitchGuard(null, msgs);
      case GoPackage.SWITCH_STMT_LINHA__TYPE_CASE_CLAUSE:
        return ((InternalEList<?>)getTypeCaseClause()).basicRemove(otherEnd, msgs);
      case GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA:
        return basicSetSwitch_stmt_linha(null, msgs);
      case GoPackage.SWITCH_STMT_LINHA__EXPRESSION:
        return basicSetExpression(null, msgs);
      case GoPackage.SWITCH_STMT_LINHA__EXPR_CASE_CLAUSE:
        return ((InternalEList<?>)getExprCaseClause()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD:
        return getTypeSwitchGuard();
      case GoPackage.SWITCH_STMT_LINHA__TYPE_CASE_CLAUSE:
        return getTypeCaseClause();
      case GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA:
        return getSwitch_stmt_linha();
      case GoPackage.SWITCH_STMT_LINHA__EXPRESSION:
        return getExpression();
      case GoPackage.SWITCH_STMT_LINHA__EXPR_CASE_CLAUSE:
        return getExprCaseClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD:
        setTypeSwitchGuard((TypeSwitchGuard)newValue);
        return;
      case GoPackage.SWITCH_STMT_LINHA__TYPE_CASE_CLAUSE:
        getTypeCaseClause().clear();
        getTypeCaseClause().addAll((Collection<? extends TypeCaseClause>)newValue);
        return;
      case GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA:
        setSwitch_stmt_linha((switch_stmt_linha)newValue);
        return;
      case GoPackage.SWITCH_STMT_LINHA__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case GoPackage.SWITCH_STMT_LINHA__EXPR_CASE_CLAUSE:
        getExprCaseClause().clear();
        getExprCaseClause().addAll((Collection<? extends ExprCaseClause>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD:
        setTypeSwitchGuard((TypeSwitchGuard)null);
        return;
      case GoPackage.SWITCH_STMT_LINHA__TYPE_CASE_CLAUSE:
        getTypeCaseClause().clear();
        return;
      case GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA:
        setSwitch_stmt_linha((switch_stmt_linha)null);
        return;
      case GoPackage.SWITCH_STMT_LINHA__EXPRESSION:
        setExpression((Expression)null);
        return;
      case GoPackage.SWITCH_STMT_LINHA__EXPR_CASE_CLAUSE:
        getExprCaseClause().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT_LINHA__TYPE_SWITCH_GUARD:
        return typeSwitchGuard != null;
      case GoPackage.SWITCH_STMT_LINHA__TYPE_CASE_CLAUSE:
        return typeCaseClause != null && !typeCaseClause.isEmpty();
      case GoPackage.SWITCH_STMT_LINHA__SWITCH_STMT_LINHA:
        return switch_stmt_linha != null;
      case GoPackage.SWITCH_STMT_LINHA__EXPRESSION:
        return expression != null;
      case GoPackage.SWITCH_STMT_LINHA__EXPR_CASE_CLAUSE:
        return exprCaseClause != null && !exprCaseClause.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //switch_stmt_linhaImpl
