/**
 * generated by Xtext 2.13.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.AliasDecl;
import com.ufcg.compiladores.go.Arguments;
import com.ufcg.compiladores.go.ConstDecl;
import com.ufcg.compiladores.go.ConstSpec;
import com.ufcg.compiladores.go.Conversion;
import com.ufcg.compiladores.go.Declaration;
import com.ufcg.compiladores.go.Expression;
import com.ufcg.compiladores.go.ExpressionList;
import com.ufcg.compiladores.go.FunctionDecl;
import com.ufcg.compiladores.go.FunctionLit;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.Literal;
import com.ufcg.compiladores.go.MethodDecl;
import com.ufcg.compiladores.go.MethodExpr;
import com.ufcg.compiladores.go.MethodSpec;
import com.ufcg.compiladores.go.Operand;
import com.ufcg.compiladores.go.ParameterDecl;
import com.ufcg.compiladores.go.ParameterList;
import com.ufcg.compiladores.go.Parameters;
import com.ufcg.compiladores.go.PrimaryExpr;
import com.ufcg.compiladores.go.Receiver;
import com.ufcg.compiladores.go.ReceiverType;
import com.ufcg.compiladores.go.Result;
import com.ufcg.compiladores.go.Signature;
import com.ufcg.compiladores.go.TopLevelDecl;
import com.ufcg.compiladores.go.Type;
import com.ufcg.compiladores.go.TypeAssertion;
import com.ufcg.compiladores.go.TypeDecl;
import com.ufcg.compiladores.go.TypeDef;
import com.ufcg.compiladores.go.TypeLit;
import com.ufcg.compiladores.go.TypeSpec;
import com.ufcg.compiladores.go.VarDecl;
import com.ufcg.compiladores.go.VarSpec;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getPrimaryExprLinha <em>Primary Expr Linha</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getFunctionBody <em>Function Body</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getSignature <em>Signature</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getResult <em>Result</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getParameterDecl <em>Parameter Decl</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getExpressionList <em>Expression List</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getTypeLit <em>Type Lit</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.TypeImpl#getExpression <em>Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeImpl extends FieldDeclImpl implements Type
{
  /**
   * The default value of the '{@link #getPrimaryExprLinha() <em>Primary Expr Linha</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryExprLinha()
   * @generated
   * @ordered
   */
  protected static final String PRIMARY_EXPR_LINHA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPrimaryExprLinha() <em>Primary Expr Linha</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryExprLinha()
   * @generated
   * @ordered
   */
  protected String primaryExprLinha = PRIMARY_EXPR_LINHA_EDEFAULT;

  /**
   * The default value of the '{@link #getFunctionBody() <em>Function Body</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionBody()
   * @generated
   * @ordered
   */
  protected static final String FUNCTION_BODY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFunctionBody() <em>Function Body</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionBody()
   * @generated
   * @ordered
   */
  protected String functionBody = FUNCTION_BODY_EDEFAULT;

  /**
   * The cached value of the '{@link #getSignature() <em>Signature</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignature()
   * @generated
   * @ordered
   */
  protected Signature signature;

  /**
   * The cached value of the '{@link #getResult() <em>Result</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected Result result;

  /**
   * The cached value of the '{@link #getParameterDecl() <em>Parameter Decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterDecl()
   * @generated
   * @ordered
   */
  protected ParameterDecl parameterDecl;

  /**
   * The cached value of the '{@link #getExpressionList() <em>Expression List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionList()
   * @generated
   * @ordered
   */
  protected ExpressionList expressionList;

  /**
   * The cached value of the '{@link #getTypeLit() <em>Type Lit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeLit()
   * @generated
   * @ordered
   */
  protected TypeLit typeLit;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPrimaryExprLinha()
  {
    return primaryExprLinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrimaryExprLinha(String newPrimaryExprLinha)
  {
    String oldPrimaryExprLinha = primaryExprLinha;
    primaryExprLinha = newPrimaryExprLinha;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__PRIMARY_EXPR_LINHA, oldPrimaryExprLinha, primaryExprLinha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFunctionBody()
  {
    return functionBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionBody(String newFunctionBody)
  {
    String oldFunctionBody = functionBody;
    functionBody = newFunctionBody;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__FUNCTION_BODY, oldFunctionBody, functionBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Signature getSignature()
  {
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSignature(Signature newSignature, NotificationChain msgs)
  {
    Signature oldSignature = signature;
    signature = newSignature;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__SIGNATURE, oldSignature, newSignature);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSignature(Signature newSignature)
  {
    if (newSignature != signature)
    {
      NotificationChain msgs = null;
      if (signature != null)
        msgs = ((InternalEObject)signature).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__SIGNATURE, null, msgs);
      if (newSignature != null)
        msgs = ((InternalEObject)newSignature).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__SIGNATURE, null, msgs);
      msgs = basicSetSignature(newSignature, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__SIGNATURE, newSignature, newSignature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Result getResult()
  {
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetResult(Result newResult, NotificationChain msgs)
  {
    Result oldResult = result;
    result = newResult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__RESULT, oldResult, newResult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setResult(Result newResult)
  {
    if (newResult != result)
    {
      NotificationChain msgs = null;
      if (result != null)
        msgs = ((InternalEObject)result).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__RESULT, null, msgs);
      if (newResult != null)
        msgs = ((InternalEObject)newResult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__RESULT, null, msgs);
      msgs = basicSetResult(newResult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__RESULT, newResult, newResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterDecl getParameterDecl()
  {
    return parameterDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParameterDecl(ParameterDecl newParameterDecl, NotificationChain msgs)
  {
    ParameterDecl oldParameterDecl = parameterDecl;
    parameterDecl = newParameterDecl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__PARAMETER_DECL, oldParameterDecl, newParameterDecl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParameterDecl(ParameterDecl newParameterDecl)
  {
    if (newParameterDecl != parameterDecl)
    {
      NotificationChain msgs = null;
      if (parameterDecl != null)
        msgs = ((InternalEObject)parameterDecl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__PARAMETER_DECL, null, msgs);
      if (newParameterDecl != null)
        msgs = ((InternalEObject)newParameterDecl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__PARAMETER_DECL, null, msgs);
      msgs = basicSetParameterDecl(newParameterDecl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__PARAMETER_DECL, newParameterDecl, newParameterDecl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionList getExpressionList()
  {
    return expressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionList(ExpressionList newExpressionList, NotificationChain msgs)
  {
    ExpressionList oldExpressionList = expressionList;
    expressionList = newExpressionList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__EXPRESSION_LIST, oldExpressionList, newExpressionList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionList(ExpressionList newExpressionList)
  {
    if (newExpressionList != expressionList)
    {
      NotificationChain msgs = null;
      if (expressionList != null)
        msgs = ((InternalEObject)expressionList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__EXPRESSION_LIST, null, msgs);
      if (newExpressionList != null)
        msgs = ((InternalEObject)newExpressionList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__EXPRESSION_LIST, null, msgs);
      msgs = basicSetExpressionList(newExpressionList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__EXPRESSION_LIST, newExpressionList, newExpressionList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLit getTypeLit()
  {
    return typeLit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeLit(TypeLit newTypeLit, NotificationChain msgs)
  {
    TypeLit oldTypeLit = typeLit;
    typeLit = newTypeLit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__TYPE_LIT, oldTypeLit, newTypeLit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeLit(TypeLit newTypeLit)
  {
    if (newTypeLit != typeLit)
    {
      NotificationChain msgs = null;
      if (typeLit != null)
        msgs = ((InternalEObject)typeLit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__TYPE_LIT, null, msgs);
      if (newTypeLit != null)
        msgs = ((InternalEObject)newTypeLit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__TYPE_LIT, null, msgs);
      msgs = basicSetTypeLit(newTypeLit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__TYPE_LIT, newTypeLit, newTypeLit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__SIGNATURE:
        return basicSetSignature(null, msgs);
      case GoPackage.TYPE__RESULT:
        return basicSetResult(null, msgs);
      case GoPackage.TYPE__PARAMETER_DECL:
        return basicSetParameterDecl(null, msgs);
      case GoPackage.TYPE__EXPRESSION_LIST:
        return basicSetExpressionList(null, msgs);
      case GoPackage.TYPE__TYPE_LIT:
        return basicSetTypeLit(null, msgs);
      case GoPackage.TYPE__EXPRESSION:
        return basicSetExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__PRIMARY_EXPR_LINHA:
        return getPrimaryExprLinha();
      case GoPackage.TYPE__FUNCTION_BODY:
        return getFunctionBody();
      case GoPackage.TYPE__SIGNATURE:
        return getSignature();
      case GoPackage.TYPE__RESULT:
        return getResult();
      case GoPackage.TYPE__PARAMETER_DECL:
        return getParameterDecl();
      case GoPackage.TYPE__EXPRESSION_LIST:
        return getExpressionList();
      case GoPackage.TYPE__TYPE_LIT:
        return getTypeLit();
      case GoPackage.TYPE__EXPRESSION:
        return getExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__PRIMARY_EXPR_LINHA:
        setPrimaryExprLinha((String)newValue);
        return;
      case GoPackage.TYPE__FUNCTION_BODY:
        setFunctionBody((String)newValue);
        return;
      case GoPackage.TYPE__SIGNATURE:
        setSignature((Signature)newValue);
        return;
      case GoPackage.TYPE__RESULT:
        setResult((Result)newValue);
        return;
      case GoPackage.TYPE__PARAMETER_DECL:
        setParameterDecl((ParameterDecl)newValue);
        return;
      case GoPackage.TYPE__EXPRESSION_LIST:
        setExpressionList((ExpressionList)newValue);
        return;
      case GoPackage.TYPE__TYPE_LIT:
        setTypeLit((TypeLit)newValue);
        return;
      case GoPackage.TYPE__EXPRESSION:
        setExpression((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__PRIMARY_EXPR_LINHA:
        setPrimaryExprLinha(PRIMARY_EXPR_LINHA_EDEFAULT);
        return;
      case GoPackage.TYPE__FUNCTION_BODY:
        setFunctionBody(FUNCTION_BODY_EDEFAULT);
        return;
      case GoPackage.TYPE__SIGNATURE:
        setSignature((Signature)null);
        return;
      case GoPackage.TYPE__RESULT:
        setResult((Result)null);
        return;
      case GoPackage.TYPE__PARAMETER_DECL:
        setParameterDecl((ParameterDecl)null);
        return;
      case GoPackage.TYPE__EXPRESSION_LIST:
        setExpressionList((ExpressionList)null);
        return;
      case GoPackage.TYPE__TYPE_LIT:
        setTypeLit((TypeLit)null);
        return;
      case GoPackage.TYPE__EXPRESSION:
        setExpression((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__PRIMARY_EXPR_LINHA:
        return PRIMARY_EXPR_LINHA_EDEFAULT == null ? primaryExprLinha != null : !PRIMARY_EXPR_LINHA_EDEFAULT.equals(primaryExprLinha);
      case GoPackage.TYPE__FUNCTION_BODY:
        return FUNCTION_BODY_EDEFAULT == null ? functionBody != null : !FUNCTION_BODY_EDEFAULT.equals(functionBody);
      case GoPackage.TYPE__SIGNATURE:
        return signature != null;
      case GoPackage.TYPE__RESULT:
        return result != null;
      case GoPackage.TYPE__PARAMETER_DECL:
        return parameterDecl != null;
      case GoPackage.TYPE__EXPRESSION_LIST:
        return expressionList != null;
      case GoPackage.TYPE__TYPE_LIT:
        return typeLit != null;
      case GoPackage.TYPE__EXPRESSION:
        return expression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == Result.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == MethodSpec.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TopLevelDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == FunctionDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrimaryExpr.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.TYPE__PRIMARY_EXPR_LINHA: return GoPackage.PRIMARY_EXPR__PRIMARY_EXPR_LINHA;
        default: return -1;
      }
    }
    if (baseClass == Operand.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Literal.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == FunctionLit.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Signature.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.TYPE__FUNCTION_BODY: return GoPackage.SIGNATURE__FUNCTION_BODY;
        default: return -1;
      }
    }
    if (baseClass == MethodDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Receiver.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.TYPE__SIGNATURE: return GoPackage.RECEIVER__SIGNATURE;
        default: return -1;
      }
    }
    if (baseClass == Parameters.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.TYPE__RESULT: return GoPackage.PARAMETERS__RESULT;
        default: return -1;
      }
    }
    if (baseClass == ParameterList.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ParameterDecl.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.TYPE__PARAMETER_DECL: return GoPackage.PARAMETER_DECL__PARAMETER_DECL;
        default: return -1;
      }
    }
    if (baseClass == Declaration.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ConstDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ConstSpec.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.TYPE__EXPRESSION_LIST: return GoPackage.CONST_SPEC__EXPRESSION_LIST;
        default: return -1;
      }
    }
    if (baseClass == TypeDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSpec.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == AliasDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeDef.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarSpec.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeAssertion.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Arguments.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == MethodExpr.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ReceiverType.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Conversion.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == Result.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == MethodSpec.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TopLevelDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == FunctionDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PrimaryExpr.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__PRIMARY_EXPR_LINHA: return GoPackage.TYPE__PRIMARY_EXPR_LINHA;
        default: return -1;
      }
    }
    if (baseClass == Operand.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Literal.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == FunctionLit.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Signature.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.SIGNATURE__FUNCTION_BODY: return GoPackage.TYPE__FUNCTION_BODY;
        default: return -1;
      }
    }
    if (baseClass == MethodDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Receiver.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.RECEIVER__SIGNATURE: return GoPackage.TYPE__SIGNATURE;
        default: return -1;
      }
    }
    if (baseClass == Parameters.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.PARAMETERS__RESULT: return GoPackage.TYPE__RESULT;
        default: return -1;
      }
    }
    if (baseClass == ParameterList.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ParameterDecl.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.PARAMETER_DECL__PARAMETER_DECL: return GoPackage.TYPE__PARAMETER_DECL;
        default: return -1;
      }
    }
    if (baseClass == Declaration.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ConstDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ConstSpec.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.CONST_SPEC__EXPRESSION_LIST: return GoPackage.TYPE__EXPRESSION_LIST;
        default: return -1;
      }
    }
    if (baseClass == TypeDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSpec.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == AliasDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeDef.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarSpec.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeAssertion.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Arguments.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == MethodExpr.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ReceiverType.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Conversion.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (PrimaryExprLinha: ");
    result.append(primaryExprLinha);
    result.append(", FunctionBody: ");
    result.append(functionBody);
    result.append(')');
    return result.toString();
  }

} //TypeImpl
