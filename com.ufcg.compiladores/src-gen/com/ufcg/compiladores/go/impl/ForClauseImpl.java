/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.Condition;
import com.ufcg.compiladores.go.ForClause;
import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.InitStmt;
import com.ufcg.compiladores.go.PostStmt;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Clause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.ForClauseImpl#getInitStmt <em>Init Stmt</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ForClauseImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ForClauseImpl#getPostStmt <em>Post Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForClauseImpl extends MinimalEObjectImpl.Container implements ForClause
{
  /**
   * The cached value of the '{@link #getInitStmt() <em>Init Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitStmt()
   * @generated
   * @ordered
   */
  protected InitStmt initStmt;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The cached value of the '{@link #getPostStmt() <em>Post Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostStmt()
   * @generated
   * @ordered
   */
  protected PostStmt postStmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForClauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.FOR_CLAUSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitStmt getInitStmt()
  {
    return initStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitStmt(InitStmt newInitStmt, NotificationChain msgs)
  {
    InitStmt oldInitStmt = initStmt;
    initStmt = newInitStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__INIT_STMT, oldInitStmt, newInitStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitStmt(InitStmt newInitStmt)
  {
    if (newInitStmt != initStmt)
    {
      NotificationChain msgs = null;
      if (initStmt != null)
        msgs = ((InternalEObject)initStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__INIT_STMT, null, msgs);
      if (newInitStmt != null)
        msgs = ((InternalEObject)newInitStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__INIT_STMT, null, msgs);
      msgs = basicSetInitStmt(newInitStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__INIT_STMT, newInitStmt, newInitStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostStmt getPostStmt()
  {
    return postStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostStmt(PostStmt newPostStmt, NotificationChain msgs)
  {
    PostStmt oldPostStmt = postStmt;
    postStmt = newPostStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__POST_STMT, oldPostStmt, newPostStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPostStmt(PostStmt newPostStmt)
  {
    if (newPostStmt != postStmt)
    {
      NotificationChain msgs = null;
      if (postStmt != null)
        msgs = ((InternalEObject)postStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__POST_STMT, null, msgs);
      if (newPostStmt != null)
        msgs = ((InternalEObject)newPostStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__POST_STMT, null, msgs);
      msgs = basicSetPostStmt(newPostStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__POST_STMT, newPostStmt, newPostStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__INIT_STMT:
        return basicSetInitStmt(null, msgs);
      case GoPackage.FOR_CLAUSE__CONDITION:
        return basicSetCondition(null, msgs);
      case GoPackage.FOR_CLAUSE__POST_STMT:
        return basicSetPostStmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__INIT_STMT:
        return getInitStmt();
      case GoPackage.FOR_CLAUSE__CONDITION:
        return getCondition();
      case GoPackage.FOR_CLAUSE__POST_STMT:
        return getPostStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__INIT_STMT:
        setInitStmt((InitStmt)newValue);
        return;
      case GoPackage.FOR_CLAUSE__CONDITION:
        setCondition((Condition)newValue);
        return;
      case GoPackage.FOR_CLAUSE__POST_STMT:
        setPostStmt((PostStmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__INIT_STMT:
        setInitStmt((InitStmt)null);
        return;
      case GoPackage.FOR_CLAUSE__CONDITION:
        setCondition((Condition)null);
        return;
      case GoPackage.FOR_CLAUSE__POST_STMT:
        setPostStmt((PostStmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__INIT_STMT:
        return initStmt != null;
      case GoPackage.FOR_CLAUSE__CONDITION:
        return condition != null;
      case GoPackage.FOR_CLAUSE__POST_STMT:
        return postStmt != null;
    }
    return super.eIsSet(featureID);
  }

} //ForClauseImpl
