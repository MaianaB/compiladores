/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.impl;

import com.ufcg.compiladores.go.GoPackage;
import com.ufcg.compiladores.go.ImportPath;
import com.ufcg.compiladores.go.ImportSpec;
import com.ufcg.compiladores.go.PackageName;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Import Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ufcg.compiladores.go.impl.ImportSpecImpl#getPackageName <em>Package Name</em>}</li>
 *   <li>{@link com.ufcg.compiladores.go.impl.ImportSpecImpl#getImportPath <em>Import Path</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImportSpecImpl extends MinimalEObjectImpl.Container implements ImportSpec
{
  /**
   * The cached value of the '{@link #getPackageName() <em>Package Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackageName()
   * @generated
   * @ordered
   */
  protected PackageName packageName;

  /**
   * The cached value of the '{@link #getImportPath() <em>Import Path</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImportPath()
   * @generated
   * @ordered
   */
  protected ImportPath importPath;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImportSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.IMPORT_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageName getPackageName()
  {
    return packageName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPackageName(PackageName newPackageName, NotificationChain msgs)
  {
    PackageName oldPackageName = packageName;
    packageName = newPackageName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.IMPORT_SPEC__PACKAGE_NAME, oldPackageName, newPackageName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPackageName(PackageName newPackageName)
  {
    if (newPackageName != packageName)
    {
      NotificationChain msgs = null;
      if (packageName != null)
        msgs = ((InternalEObject)packageName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.IMPORT_SPEC__PACKAGE_NAME, null, msgs);
      if (newPackageName != null)
        msgs = ((InternalEObject)newPackageName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.IMPORT_SPEC__PACKAGE_NAME, null, msgs);
      msgs = basicSetPackageName(newPackageName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.IMPORT_SPEC__PACKAGE_NAME, newPackageName, newPackageName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportPath getImportPath()
  {
    return importPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImportPath(ImportPath newImportPath, NotificationChain msgs)
  {
    ImportPath oldImportPath = importPath;
    importPath = newImportPath;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.IMPORT_SPEC__IMPORT_PATH, oldImportPath, newImportPath);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImportPath(ImportPath newImportPath)
  {
    if (newImportPath != importPath)
    {
      NotificationChain msgs = null;
      if (importPath != null)
        msgs = ((InternalEObject)importPath).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.IMPORT_SPEC__IMPORT_PATH, null, msgs);
      if (newImportPath != null)
        msgs = ((InternalEObject)newImportPath).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.IMPORT_SPEC__IMPORT_PATH, null, msgs);
      msgs = basicSetImportPath(newImportPath, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.IMPORT_SPEC__IMPORT_PATH, newImportPath, newImportPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.IMPORT_SPEC__PACKAGE_NAME:
        return basicSetPackageName(null, msgs);
      case GoPackage.IMPORT_SPEC__IMPORT_PATH:
        return basicSetImportPath(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.IMPORT_SPEC__PACKAGE_NAME:
        return getPackageName();
      case GoPackage.IMPORT_SPEC__IMPORT_PATH:
        return getImportPath();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.IMPORT_SPEC__PACKAGE_NAME:
        setPackageName((PackageName)newValue);
        return;
      case GoPackage.IMPORT_SPEC__IMPORT_PATH:
        setImportPath((ImportPath)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.IMPORT_SPEC__PACKAGE_NAME:
        setPackageName((PackageName)null);
        return;
      case GoPackage.IMPORT_SPEC__IMPORT_PATH:
        setImportPath((ImportPath)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.IMPORT_SPEC__PACKAGE_NAME:
        return packageName != null;
      case GoPackage.IMPORT_SPEC__IMPORT_PATH:
        return importPath != null;
    }
    return super.eIsSet(featureID);
  }

} //ImportSpecImpl
