/**
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.go.util;

import com.ufcg.compiladores.go.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.ufcg.compiladores.go.GoPackage
 * @generated
 */
public class GoSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GoPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = GoPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case GoPackage.SOUCE_FILE:
      {
        SouceFile souceFile = (SouceFile)theEObject;
        T result = caseSouceFile(souceFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = caseElementType(type);
        if (result == null) result = caseFieldDecl(type);
        if (result == null) result = casePointerType(type);
        if (result == null) result = caseParameterDecl(type);
        if (result == null) result = caseKeyType(type);
        if (result == null) result = caseConstSpec(type);
        if (result == null) result = caseAliasDecl(type);
        if (result == null) result = caseTypeDef(type);
        if (result == null) result = caseVarSpec(type);
        if (result == null) result = caseTypeAssertion(type);
        if (result == null) result = caseArguments(type);
        if (result == null) result = caseReceiverType(type);
        if (result == null) result = caseConversion(type);
        if (result == null) result = caseTypeList(type);
        if (result == null) result = caseTypeLitLinha(type);
        if (result == null) result = caseChannelType(type);
        if (result == null) result = caseLiteralTypeLinha(type);
        if (result == null) result = caseParameterList(type);
        if (result == null) result = caseMapType(type);
        if (result == null) result = caseConstDecl(type);
        if (result == null) result = caseTypeSpec(type);
        if (result == null) result = caseVarDecl(type);
        if (result == null) result = caseMethodExpr(type);
        if (result == null) result = caseTypeSwitchCase(type);
        if (result == null) result = caseLiteralType(type);
        if (result == null) result = caseCompositeLit(type);
        if (result == null) result = caseParameters(type);
        if (result == null) result = caseTypeDecl(type);
        if (result == null) result = caseTypeCaseClause(type);
        if (result == null) result = caseResult(type);
        if (result == null) result = caseSignature(type);
        if (result == null) result = caseReceiver(type);
        if (result == null) result = caseDeclaration(type);
        if (result == null) result = caseOperand(type);
        if (result == null) result = caseFunctionType(type);
        if (result == null) result = caseMethodSpec(type);
        if (result == null) result = casetopLevelDeclLinha(type);
        if (result == null) result = caseFunctionDecl(type);
        if (result == null) result = caseFunctionLit(type);
        if (result == null) result = caseMethodDecl(type);
        if (result == null) result = caseLiteral(type);
        if (result == null) result = casePrimaryExpr(type);
        if (result == null) result = caseInterfaceType(type);
        if (result == null) result = caseTopLevelDecl(type);
        if (result == null) result = casePrimaryExprLinha(type);
        if (result == null) result = caseTypeSwitchGuard(type);
        if (result == null) result = caseSouceFile(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_LIT:
      {
        TypeLit typeLit = (TypeLit)theEObject;
        T result = caseTypeLit(typeLit);
        if (result == null) result = caseType(typeLit);
        if (result == null) result = caseElementType(typeLit);
        if (result == null) result = caseFieldDecl(typeLit);
        if (result == null) result = casePointerType(typeLit);
        if (result == null) result = caseParameterDecl(typeLit);
        if (result == null) result = caseKeyType(typeLit);
        if (result == null) result = caseConstSpec(typeLit);
        if (result == null) result = caseAliasDecl(typeLit);
        if (result == null) result = caseTypeDef(typeLit);
        if (result == null) result = caseVarSpec(typeLit);
        if (result == null) result = caseTypeAssertion(typeLit);
        if (result == null) result = caseArguments(typeLit);
        if (result == null) result = caseReceiverType(typeLit);
        if (result == null) result = caseConversion(typeLit);
        if (result == null) result = caseTypeList(typeLit);
        if (result == null) result = caseTypeLitLinha(typeLit);
        if (result == null) result = caseChannelType(typeLit);
        if (result == null) result = caseLiteralTypeLinha(typeLit);
        if (result == null) result = caseParameterList(typeLit);
        if (result == null) result = caseMapType(typeLit);
        if (result == null) result = caseConstDecl(typeLit);
        if (result == null) result = caseTypeSpec(typeLit);
        if (result == null) result = caseVarDecl(typeLit);
        if (result == null) result = caseMethodExpr(typeLit);
        if (result == null) result = caseTypeSwitchCase(typeLit);
        if (result == null) result = caseLiteralType(typeLit);
        if (result == null) result = caseCompositeLit(typeLit);
        if (result == null) result = caseParameters(typeLit);
        if (result == null) result = caseTypeDecl(typeLit);
        if (result == null) result = caseTypeCaseClause(typeLit);
        if (result == null) result = caseResult(typeLit);
        if (result == null) result = caseSignature(typeLit);
        if (result == null) result = caseReceiver(typeLit);
        if (result == null) result = caseDeclaration(typeLit);
        if (result == null) result = caseOperand(typeLit);
        if (result == null) result = caseFunctionType(typeLit);
        if (result == null) result = caseMethodSpec(typeLit);
        if (result == null) result = casetopLevelDeclLinha(typeLit);
        if (result == null) result = caseFunctionDecl(typeLit);
        if (result == null) result = caseFunctionLit(typeLit);
        if (result == null) result = caseMethodDecl(typeLit);
        if (result == null) result = caseLiteral(typeLit);
        if (result == null) result = casePrimaryExpr(typeLit);
        if (result == null) result = caseInterfaceType(typeLit);
        if (result == null) result = caseTopLevelDecl(typeLit);
        if (result == null) result = casePrimaryExprLinha(typeLit);
        if (result == null) result = caseTypeSwitchGuard(typeLit);
        if (result == null) result = caseSouceFile(typeLit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_LIT_LINHA:
      {
        TypeLitLinha typeLitLinha = (TypeLitLinha)theEObject;
        T result = caseTypeLitLinha(typeLitLinha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ARRAY_LENGTH:
      {
        ArrayLength arrayLength = (ArrayLength)theEObject;
        T result = caseArrayLength(arrayLength);
        if (result == null) result = caseTypeLitLinha(arrayLength);
        if (result == null) result = caseLiteralTypeLinha(arrayLength);
        if (result == null) result = caseLiteralType(arrayLength);
        if (result == null) result = caseCompositeLit(arrayLength);
        if (result == null) result = caseLiteral(arrayLength);
        if (result == null) result = caseOperand(arrayLength);
        if (result == null) result = casePrimaryExpr(arrayLength);
        if (result == null) result = casePrimaryExprLinha(arrayLength);
        if (result == null) result = caseTypeSwitchGuard(arrayLength);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ELEMENT_TYPE:
      {
        ElementType elementType = (ElementType)theEObject;
        T result = caseElementType(elementType);
        if (result == null) result = caseTypeLitLinha(elementType);
        if (result == null) result = caseChannelType(elementType);
        if (result == null) result = caseLiteralTypeLinha(elementType);
        if (result == null) result = caseLiteralType(elementType);
        if (result == null) result = caseCompositeLit(elementType);
        if (result == null) result = caseLiteral(elementType);
        if (result == null) result = caseOperand(elementType);
        if (result == null) result = casePrimaryExpr(elementType);
        if (result == null) result = casePrimaryExprLinha(elementType);
        if (result == null) result = caseTypeSwitchGuard(elementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.STRUCT_TYPE:
      {
        StructType structType = (StructType)theEObject;
        T result = caseStructType(structType);
        if (result == null) result = caseLiteralType(structType);
        if (result == null) result = caseCompositeLit(structType);
        if (result == null) result = caseLiteral(structType);
        if (result == null) result = caseOperand(structType);
        if (result == null) result = casePrimaryExpr(structType);
        if (result == null) result = casePrimaryExprLinha(structType);
        if (result == null) result = caseTypeSwitchGuard(structType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FIELD_DECL:
      {
        FieldDecl fieldDecl = (FieldDecl)theEObject;
        T result = caseFieldDecl(fieldDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.POINTER_TYPE:
      {
        PointerType pointerType = (PointerType)theEObject;
        T result = casePointerType(pointerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_TYPE:
      {
        FunctionType functionType = (FunctionType)theEObject;
        T result = caseFunctionType(functionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SIGNATURE:
      {
        Signature signature = (Signature)theEObject;
        T result = caseSignature(signature);
        if (result == null) result = caseFunctionType(signature);
        if (result == null) result = caseMethodSpec(signature);
        if (result == null) result = casetopLevelDeclLinha(signature);
        if (result == null) result = caseFunctionDecl(signature);
        if (result == null) result = caseFunctionLit(signature);
        if (result == null) result = caseInterfaceType(signature);
        if (result == null) result = caseTopLevelDecl(signature);
        if (result == null) result = caseLiteral(signature);
        if (result == null) result = caseSouceFile(signature);
        if (result == null) result = caseOperand(signature);
        if (result == null) result = casePrimaryExpr(signature);
        if (result == null) result = casePrimaryExprLinha(signature);
        if (result == null) result = caseTypeSwitchGuard(signature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RESULT:
      {
        Result result = (Result)theEObject;
        T theResult = caseResult(result);
        if (theResult == null) theResult = defaultCase(theEObject);
        return theResult;
      }
      case GoPackage.PARAMETERS:
      {
        Parameters parameters = (Parameters)theEObject;
        T result = caseParameters(parameters);
        if (result == null) result = caseSignature(parameters);
        if (result == null) result = caseResult(parameters);
        if (result == null) result = caseReceiver(parameters);
        if (result == null) result = caseFunctionType(parameters);
        if (result == null) result = caseMethodSpec(parameters);
        if (result == null) result = casetopLevelDeclLinha(parameters);
        if (result == null) result = caseFunctionDecl(parameters);
        if (result == null) result = caseFunctionLit(parameters);
        if (result == null) result = caseMethodDecl(parameters);
        if (result == null) result = caseInterfaceType(parameters);
        if (result == null) result = caseTopLevelDecl(parameters);
        if (result == null) result = caseLiteral(parameters);
        if (result == null) result = caseSouceFile(parameters);
        if (result == null) result = caseOperand(parameters);
        if (result == null) result = casePrimaryExpr(parameters);
        if (result == null) result = casePrimaryExprLinha(parameters);
        if (result == null) result = caseTypeSwitchGuard(parameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PARAMETER_LIST:
      {
        ParameterList parameterList = (ParameterList)theEObject;
        T result = caseParameterList(parameterList);
        if (result == null) result = caseParameters(parameterList);
        if (result == null) result = caseSignature(parameterList);
        if (result == null) result = caseResult(parameterList);
        if (result == null) result = caseReceiver(parameterList);
        if (result == null) result = caseFunctionType(parameterList);
        if (result == null) result = caseMethodSpec(parameterList);
        if (result == null) result = casetopLevelDeclLinha(parameterList);
        if (result == null) result = caseFunctionDecl(parameterList);
        if (result == null) result = caseFunctionLit(parameterList);
        if (result == null) result = caseMethodDecl(parameterList);
        if (result == null) result = caseInterfaceType(parameterList);
        if (result == null) result = caseTopLevelDecl(parameterList);
        if (result == null) result = caseLiteral(parameterList);
        if (result == null) result = caseSouceFile(parameterList);
        if (result == null) result = caseOperand(parameterList);
        if (result == null) result = casePrimaryExpr(parameterList);
        if (result == null) result = casePrimaryExprLinha(parameterList);
        if (result == null) result = caseTypeSwitchGuard(parameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PARAMETER_DECL:
      {
        ParameterDecl parameterDecl = (ParameterDecl)theEObject;
        T result = caseParameterDecl(parameterDecl);
        if (result == null) result = caseParameterList(parameterDecl);
        if (result == null) result = caseParameters(parameterDecl);
        if (result == null) result = caseSignature(parameterDecl);
        if (result == null) result = caseResult(parameterDecl);
        if (result == null) result = caseReceiver(parameterDecl);
        if (result == null) result = caseFunctionType(parameterDecl);
        if (result == null) result = caseMethodSpec(parameterDecl);
        if (result == null) result = casetopLevelDeclLinha(parameterDecl);
        if (result == null) result = caseFunctionDecl(parameterDecl);
        if (result == null) result = caseFunctionLit(parameterDecl);
        if (result == null) result = caseMethodDecl(parameterDecl);
        if (result == null) result = caseInterfaceType(parameterDecl);
        if (result == null) result = caseTopLevelDecl(parameterDecl);
        if (result == null) result = caseLiteral(parameterDecl);
        if (result == null) result = caseSouceFile(parameterDecl);
        if (result == null) result = caseOperand(parameterDecl);
        if (result == null) result = casePrimaryExpr(parameterDecl);
        if (result == null) result = casePrimaryExprLinha(parameterDecl);
        if (result == null) result = caseTypeSwitchGuard(parameterDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.INTERFACE_TYPE:
      {
        InterfaceType interfaceType = (InterfaceType)theEObject;
        T result = caseInterfaceType(interfaceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.METHOD_SPEC:
      {
        MethodSpec methodSpec = (MethodSpec)theEObject;
        T result = caseMethodSpec(methodSpec);
        if (result == null) result = caseInterfaceType(methodSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.MAP_TYPE:
      {
        MapType mapType = (MapType)theEObject;
        T result = caseMapType(mapType);
        if (result == null) result = caseLiteralType(mapType);
        if (result == null) result = caseCompositeLit(mapType);
        if (result == null) result = caseLiteral(mapType);
        if (result == null) result = caseOperand(mapType);
        if (result == null) result = casePrimaryExpr(mapType);
        if (result == null) result = casePrimaryExprLinha(mapType);
        if (result == null) result = caseTypeSwitchGuard(mapType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.KEY_TYPE:
      {
        KeyType keyType = (KeyType)theEObject;
        T result = caseKeyType(keyType);
        if (result == null) result = caseMapType(keyType);
        if (result == null) result = caseLiteralType(keyType);
        if (result == null) result = caseCompositeLit(keyType);
        if (result == null) result = caseLiteral(keyType);
        if (result == null) result = caseOperand(keyType);
        if (result == null) result = casePrimaryExpr(keyType);
        if (result == null) result = casePrimaryExprLinha(keyType);
        if (result == null) result = caseTypeSwitchGuard(keyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CHANNEL_TYPE:
      {
        ChannelType channelType = (ChannelType)theEObject;
        T result = caseChannelType(channelType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = caseFunctionBody(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.STATEMENT_LIST:
      {
        StatementList statementList = (StatementList)theEObject;
        T result = caseStatementList(statementList);
        if (result == null) result = caseBlock(statementList);
        if (result == null) result = caseFunctionBody(statementList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.DECLARATION:
      {
        Declaration declaration = (Declaration)theEObject;
        T result = caseDeclaration(declaration);
        if (result == null) result = caseTopLevelDecl(declaration);
        if (result == null) result = caseSouceFile(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TOP_LEVEL_DECL:
      {
        TopLevelDecl topLevelDecl = (TopLevelDecl)theEObject;
        T result = caseTopLevelDecl(topLevelDecl);
        if (result == null) result = caseSouceFile(topLevelDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TOP_LEVEL_DECL_LINHA:
      {
        topLevelDeclLinha topLevelDeclLinha = (topLevelDeclLinha)theEObject;
        T result = casetopLevelDeclLinha(topLevelDeclLinha);
        if (result == null) result = caseTopLevelDecl(topLevelDeclLinha);
        if (result == null) result = caseSouceFile(topLevelDeclLinha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONST_DECL:
      {
        ConstDecl constDecl = (ConstDecl)theEObject;
        T result = caseConstDecl(constDecl);
        if (result == null) result = caseDeclaration(constDecl);
        if (result == null) result = caseTopLevelDecl(constDecl);
        if (result == null) result = caseSouceFile(constDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONST_SPEC:
      {
        ConstSpec constSpec = (ConstSpec)theEObject;
        T result = caseConstSpec(constSpec);
        if (result == null) result = caseConstDecl(constSpec);
        if (result == null) result = caseDeclaration(constSpec);
        if (result == null) result = caseTopLevelDecl(constSpec);
        if (result == null) result = caseSouceFile(constSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_LIST:
      {
        ExpressionList expressionList = (ExpressionList)theEObject;
        T result = caseExpressionList(expressionList);
        if (result == null) result = caseVarSpec(expressionList);
        if (result == null) result = caseShortVarDecl(expressionList);
        if (result == null) result = caseArguments(expressionList);
        if (result == null) result = caseAssignment(expressionList);
        if (result == null) result = caseExprSwitchCase(expressionList);
        if (result == null) result = caseRangeClause(expressionList);
        if (result == null) result = caseRecvStmt(expressionList);
        if (result == null) result = caseVarDecl(expressionList);
        if (result == null) result = caseSimpleStmt(expressionList);
        if (result == null) result = casePrimaryExprLinha(expressionList);
        if (result == null) result = caseExprCaseClause(expressionList);
        if (result == null) result = caseCommCase(expressionList);
        if (result == null) result = caseDeclaration(expressionList);
        if (result == null) result = caseIfStmt(expressionList);
        if (result == null) result = caseSwitchStmt(expressionList);
        if (result == null) result = caseInitStmt(expressionList);
        if (result == null) result = casePostStmt(expressionList);
        if (result == null) result = caseCommClause(expressionList);
        if (result == null) result = caseTopLevelDecl(expressionList);
        if (result == null) result = caseForClause(expressionList);
        if (result == null) result = caseSouceFile(expressionList);
        if (result == null) result = caseForStmt(expressionList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_DECL:
      {
        TypeDecl typeDecl = (TypeDecl)theEObject;
        T result = caseTypeDecl(typeDecl);
        if (result == null) result = caseDeclaration(typeDecl);
        if (result == null) result = caseTopLevelDecl(typeDecl);
        if (result == null) result = caseSouceFile(typeDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_SPEC:
      {
        TypeSpec typeSpec = (TypeSpec)theEObject;
        T result = caseTypeSpec(typeSpec);
        if (result == null) result = caseTypeDecl(typeSpec);
        if (result == null) result = caseDeclaration(typeSpec);
        if (result == null) result = caseTopLevelDecl(typeSpec);
        if (result == null) result = caseSouceFile(typeSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ALIAS_DECL:
      {
        AliasDecl aliasDecl = (AliasDecl)theEObject;
        T result = caseAliasDecl(aliasDecl);
        if (result == null) result = caseTypeSpec(aliasDecl);
        if (result == null) result = caseTypeDecl(aliasDecl);
        if (result == null) result = caseDeclaration(aliasDecl);
        if (result == null) result = caseTopLevelDecl(aliasDecl);
        if (result == null) result = caseSouceFile(aliasDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_DEF:
      {
        TypeDef typeDef = (TypeDef)theEObject;
        T result = caseTypeDef(typeDef);
        if (result == null) result = caseTypeSpec(typeDef);
        if (result == null) result = caseTypeDecl(typeDef);
        if (result == null) result = caseDeclaration(typeDef);
        if (result == null) result = caseTopLevelDecl(typeDef);
        if (result == null) result = caseSouceFile(typeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.VAR_DECL:
      {
        VarDecl varDecl = (VarDecl)theEObject;
        T result = caseVarDecl(varDecl);
        if (result == null) result = caseDeclaration(varDecl);
        if (result == null) result = caseTopLevelDecl(varDecl);
        if (result == null) result = caseSouceFile(varDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.VAR_SPEC:
      {
        VarSpec varSpec = (VarSpec)theEObject;
        T result = caseVarSpec(varSpec);
        if (result == null) result = caseVarDecl(varSpec);
        if (result == null) result = caseDeclaration(varSpec);
        if (result == null) result = caseTopLevelDecl(varSpec);
        if (result == null) result = caseSouceFile(varSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SHORT_VAR_DECL:
      {
        ShortVarDecl shortVarDecl = (ShortVarDecl)theEObject;
        T result = caseShortVarDecl(shortVarDecl);
        if (result == null) result = caseSimpleStmt(shortVarDecl);
        if (result == null) result = caseIfStmt(shortVarDecl);
        if (result == null) result = caseSwitchStmt(shortVarDecl);
        if (result == null) result = caseInitStmt(shortVarDecl);
        if (result == null) result = casePostStmt(shortVarDecl);
        if (result == null) result = caseForClause(shortVarDecl);
        if (result == null) result = caseForStmt(shortVarDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_DECL:
      {
        FunctionDecl functionDecl = (FunctionDecl)theEObject;
        T result = caseFunctionDecl(functionDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_BODY:
      {
        FunctionBody functionBody = (FunctionBody)theEObject;
        T result = caseFunctionBody(functionBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.METHOD_DECL:
      {
        MethodDecl methodDecl = (MethodDecl)theEObject;
        T result = caseMethodDecl(methodDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RECEIVER:
      {
        Receiver receiver = (Receiver)theEObject;
        T result = caseReceiver(receiver);
        if (result == null) result = casetopLevelDeclLinha(receiver);
        if (result == null) result = caseMethodDecl(receiver);
        if (result == null) result = caseTopLevelDecl(receiver);
        if (result == null) result = caseSouceFile(receiver);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.OPERAND:
      {
        Operand operand = (Operand)theEObject;
        T result = caseOperand(operand);
        if (result == null) result = casePrimaryExpr(operand);
        if (result == null) result = casePrimaryExprLinha(operand);
        if (result == null) result = caseTypeSwitchGuard(operand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseOperand(literal);
        if (result == null) result = casePrimaryExpr(literal);
        if (result == null) result = casePrimaryExprLinha(literal);
        if (result == null) result = caseTypeSwitchGuard(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.COMPOSITE_LIT:
      {
        CompositeLit compositeLit = (CompositeLit)theEObject;
        T result = caseCompositeLit(compositeLit);
        if (result == null) result = caseLiteral(compositeLit);
        if (result == null) result = caseOperand(compositeLit);
        if (result == null) result = casePrimaryExpr(compositeLit);
        if (result == null) result = casePrimaryExprLinha(compositeLit);
        if (result == null) result = caseTypeSwitchGuard(compositeLit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LITERAL_TYPE:
      {
        LiteralType literalType = (LiteralType)theEObject;
        T result = caseLiteralType(literalType);
        if (result == null) result = caseCompositeLit(literalType);
        if (result == null) result = caseLiteral(literalType);
        if (result == null) result = caseOperand(literalType);
        if (result == null) result = casePrimaryExpr(literalType);
        if (result == null) result = casePrimaryExprLinha(literalType);
        if (result == null) result = caseTypeSwitchGuard(literalType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LITERAL_TYPE_LINHA:
      {
        LiteralTypeLinha literalTypeLinha = (LiteralTypeLinha)theEObject;
        T result = caseLiteralTypeLinha(literalTypeLinha);
        if (result == null) result = caseLiteralType(literalTypeLinha);
        if (result == null) result = caseCompositeLit(literalTypeLinha);
        if (result == null) result = caseLiteral(literalTypeLinha);
        if (result == null) result = caseOperand(literalTypeLinha);
        if (result == null) result = casePrimaryExpr(literalTypeLinha);
        if (result == null) result = casePrimaryExprLinha(literalTypeLinha);
        if (result == null) result = caseTypeSwitchGuard(literalTypeLinha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LITERAL_VALUE:
      {
        LiteralValue literalValue = (LiteralValue)theEObject;
        T result = caseLiteralValue(literalValue);
        if (result == null) result = caseElement(literalValue);
        if (result == null) result = caseKey(literalValue);
        if (result == null) result = caseKeyedElement(literalValue);
        if (result == null) result = caseElementList(literalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ELEMENT_LIST:
      {
        ElementList elementList = (ElementList)theEObject;
        T result = caseElementList(elementList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.KEYED_ELEMENT:
      {
        KeyedElement keyedElement = (KeyedElement)theEObject;
        T result = caseKeyedElement(keyedElement);
        if (result == null) result = caseElementList(keyedElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.KEY:
      {
        Key key = (Key)theEObject;
        T result = caseKey(key);
        if (result == null) result = caseKeyedElement(key);
        if (result == null) result = caseElementList(key);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_LIT:
      {
        FunctionLit functionLit = (FunctionLit)theEObject;
        T result = caseFunctionLit(functionLit);
        if (result == null) result = caseLiteral(functionLit);
        if (result == null) result = caseOperand(functionLit);
        if (result == null) result = casePrimaryExpr(functionLit);
        if (result == null) result = casePrimaryExprLinha(functionLit);
        if (result == null) result = caseTypeSwitchGuard(functionLit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PRIMARY_EXPR:
      {
        PrimaryExpr primaryExpr = (PrimaryExpr)theEObject;
        T result = casePrimaryExpr(primaryExpr);
        if (result == null) result = casePrimaryExprLinha(primaryExpr);
        if (result == null) result = caseTypeSwitchGuard(primaryExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PRIMARY_EXPR_LINHA:
      {
        PrimaryExprLinha primaryExprLinha = (PrimaryExprLinha)theEObject;
        T result = casePrimaryExprLinha(primaryExprLinha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_ASSERTION:
      {
        TypeAssertion typeAssertion = (TypeAssertion)theEObject;
        T result = caseTypeAssertion(typeAssertion);
        if (result == null) result = casePrimaryExprLinha(typeAssertion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ARGUMENTS:
      {
        Arguments arguments = (Arguments)theEObject;
        T result = caseArguments(arguments);
        if (result == null) result = casePrimaryExprLinha(arguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.METHOD_EXPR:
      {
        MethodExpr methodExpr = (MethodExpr)theEObject;
        T result = caseMethodExpr(methodExpr);
        if (result == null) result = casePrimaryExpr(methodExpr);
        if (result == null) result = casePrimaryExprLinha(methodExpr);
        if (result == null) result = caseTypeSwitchGuard(methodExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RECEIVER_TYPE:
      {
        ReceiverType receiverType = (ReceiverType)theEObject;
        T result = caseReceiverType(receiverType);
        if (result == null) result = caseMethodExpr(receiverType);
        if (result == null) result = casePrimaryExpr(receiverType);
        if (result == null) result = casePrimaryExprLinha(receiverType);
        if (result == null) result = caseTypeSwitchGuard(receiverType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseArrayLength(expression);
        if (result == null) result = caseExpressionList(expression);
        if (result == null) result = caseElement(expression);
        if (result == null) result = caseExpressionLinha(expression);
        if (result == null) result = caseExpressionStmt(expression);
        if (result == null) result = caseChannel(expression);
        if (result == null) result = caseIncDecStmt(expression);
        if (result == null) result = caseCondition(expression);
        if (result == null) result = caseGoStmt(expression);
        if (result == null) result = caseRecvExpr(expression);
        if (result == null) result = caseTypeLitLinha(expression);
        if (result == null) result = caseLiteralTypeLinha(expression);
        if (result == null) result = caseVarSpec(expression);
        if (result == null) result = caseShortVarDecl(expression);
        if (result == null) result = caseArguments(expression);
        if (result == null) result = caseAssignment(expression);
        if (result == null) result = caseExprSwitchCase(expression);
        if (result == null) result = caseRangeClause(expression);
        if (result == null) result = caseRecvStmt(expression);
        if (result == null) result = caseSendStmt(expression);
        if (result == null) result = caseLiteralType(expression);
        if (result == null) result = caseVarDecl(expression);
        if (result == null) result = caseSimpleStmt(expression);
        if (result == null) result = caseExprCaseClause(expression);
        if (result == null) result = caseCommCase(expression);
        if (result == null) result = caseCompositeLit(expression);
        if (result == null) result = caseDeclaration(expression);
        if (result == null) result = caseIfStmt(expression);
        if (result == null) result = caseSwitchStmt(expression);
        if (result == null) result = caseInitStmt(expression);
        if (result == null) result = casePostStmt(expression);
        if (result == null) result = caseCommClause(expression);
        if (result == null) result = caseLiteral(expression);
        if (result == null) result = caseTopLevelDecl(expression);
        if (result == null) result = caseForClause(expression);
        if (result == null) result = caseOperand(expression);
        if (result == null) result = caseSouceFile(expression);
        if (result == null) result = caseForStmt(expression);
        if (result == null) result = casePrimaryExpr(expression);
        if (result == null) result = casePrimaryExprLinha(expression);
        if (result == null) result = caseTypeSwitchGuard(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_LINHA:
      {
        ExpressionLinha expressionLinha = (ExpressionLinha)theEObject;
        T result = caseExpressionLinha(expressionLinha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONVERSION:
      {
        Conversion conversion = (Conversion)theEObject;
        T result = caseConversion(conversion);
        if (result == null) result = casePrimaryExpr(conversion);
        if (result == null) result = casePrimaryExprLinha(conversion);
        if (result == null) result = caseTypeSwitchGuard(conversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = caseStatementList(statement);
        if (result == null) result = caseLabeledStmt(statement);
        if (result == null) result = caseBlock(statement);
        if (result == null) result = caseFunctionBody(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SIMPLE_STMT:
      {
        SimpleStmt simpleStmt = (SimpleStmt)theEObject;
        T result = caseSimpleStmt(simpleStmt);
        if (result == null) result = caseIfStmt(simpleStmt);
        if (result == null) result = caseSwitchStmt(simpleStmt);
        if (result == null) result = caseInitStmt(simpleStmt);
        if (result == null) result = casePostStmt(simpleStmt);
        if (result == null) result = caseForClause(simpleStmt);
        if (result == null) result = caseForStmt(simpleStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LABELED_STMT:
      {
        LabeledStmt labeledStmt = (LabeledStmt)theEObject;
        T result = caseLabeledStmt(labeledStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_STMT:
      {
        ExpressionStmt expressionStmt = (ExpressionStmt)theEObject;
        T result = caseExpressionStmt(expressionStmt);
        if (result == null) result = caseSimpleStmt(expressionStmt);
        if (result == null) result = caseIfStmt(expressionStmt);
        if (result == null) result = caseSwitchStmt(expressionStmt);
        if (result == null) result = caseInitStmt(expressionStmt);
        if (result == null) result = casePostStmt(expressionStmt);
        if (result == null) result = caseForClause(expressionStmt);
        if (result == null) result = caseForStmt(expressionStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SEND_STMT:
      {
        SendStmt sendStmt = (SendStmt)theEObject;
        T result = caseSendStmt(sendStmt);
        if (result == null) result = caseSimpleStmt(sendStmt);
        if (result == null) result = caseCommCase(sendStmt);
        if (result == null) result = caseIfStmt(sendStmt);
        if (result == null) result = caseSwitchStmt(sendStmt);
        if (result == null) result = caseInitStmt(sendStmt);
        if (result == null) result = casePostStmt(sendStmt);
        if (result == null) result = caseCommClause(sendStmt);
        if (result == null) result = caseForClause(sendStmt);
        if (result == null) result = caseForStmt(sendStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CHANNEL:
      {
        Channel channel = (Channel)theEObject;
        T result = caseChannel(channel);
        if (result == null) result = caseSendStmt(channel);
        if (result == null) result = caseSimpleStmt(channel);
        if (result == null) result = caseCommCase(channel);
        if (result == null) result = caseIfStmt(channel);
        if (result == null) result = caseSwitchStmt(channel);
        if (result == null) result = caseInitStmt(channel);
        if (result == null) result = casePostStmt(channel);
        if (result == null) result = caseCommClause(channel);
        if (result == null) result = caseForClause(channel);
        if (result == null) result = caseForStmt(channel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.INC_DEC_STMT:
      {
        IncDecStmt incDecStmt = (IncDecStmt)theEObject;
        T result = caseIncDecStmt(incDecStmt);
        if (result == null) result = caseSimpleStmt(incDecStmt);
        if (result == null) result = caseIfStmt(incDecStmt);
        if (result == null) result = caseSwitchStmt(incDecStmt);
        if (result == null) result = caseInitStmt(incDecStmt);
        if (result == null) result = casePostStmt(incDecStmt);
        if (result == null) result = caseForClause(incDecStmt);
        if (result == null) result = caseForStmt(incDecStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseSimpleStmt(assignment);
        if (result == null) result = caseIfStmt(assignment);
        if (result == null) result = caseSwitchStmt(assignment);
        if (result == null) result = caseInitStmt(assignment);
        if (result == null) result = casePostStmt(assignment);
        if (result == null) result = caseForClause(assignment);
        if (result == null) result = caseForStmt(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.IF_STMT:
      {
        IfStmt ifStmt = (IfStmt)theEObject;
        T result = caseIfStmt(ifStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SWITCH_STMT:
      {
        SwitchStmt switchStmt = (SwitchStmt)theEObject;
        T result = caseSwitchStmt(switchStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPR_CASE_CLAUSE:
      {
        ExprCaseClause exprCaseClause = (ExprCaseClause)theEObject;
        T result = caseExprCaseClause(exprCaseClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPR_SWITCH_CASE:
      {
        ExprSwitchCase exprSwitchCase = (ExprSwitchCase)theEObject;
        T result = caseExprSwitchCase(exprSwitchCase);
        if (result == null) result = caseExprCaseClause(exprSwitchCase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SWITCH_STMT_LINHA:
      {
        switch_stmt_linha switch_stmt_linha = (switch_stmt_linha)theEObject;
        T result = caseswitch_stmt_linha(switch_stmt_linha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_SWITCH_GUARD:
      {
        TypeSwitchGuard typeSwitchGuard = (TypeSwitchGuard)theEObject;
        T result = caseTypeSwitchGuard(typeSwitchGuard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_CASE_CLAUSE:
      {
        TypeCaseClause typeCaseClause = (TypeCaseClause)theEObject;
        T result = caseTypeCaseClause(typeCaseClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_SWITCH_CASE:
      {
        TypeSwitchCase typeSwitchCase = (TypeSwitchCase)theEObject;
        T result = caseTypeSwitchCase(typeSwitchCase);
        if (result == null) result = caseTypeCaseClause(typeSwitchCase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_LIST:
      {
        TypeList typeList = (TypeList)theEObject;
        T result = caseTypeList(typeList);
        if (result == null) result = caseTypeSwitchCase(typeList);
        if (result == null) result = caseTypeCaseClause(typeList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FOR_STMT:
      {
        ForStmt forStmt = (ForStmt)theEObject;
        T result = caseForStmt(forStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = caseForStmt(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FOR_CLAUSE:
      {
        ForClause forClause = (ForClause)theEObject;
        T result = caseForClause(forClause);
        if (result == null) result = caseForStmt(forClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.INIT_STMT:
      {
        InitStmt initStmt = (InitStmt)theEObject;
        T result = caseInitStmt(initStmt);
        if (result == null) result = caseForClause(initStmt);
        if (result == null) result = caseForStmt(initStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.POST_STMT:
      {
        PostStmt postStmt = (PostStmt)theEObject;
        T result = casePostStmt(postStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RANGE_CLAUSE:
      {
        RangeClause rangeClause = (RangeClause)theEObject;
        T result = caseRangeClause(rangeClause);
        if (result == null) result = caseForStmt(rangeClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.GO_STMT:
      {
        GoStmt goStmt = (GoStmt)theEObject;
        T result = caseGoStmt(goStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SELECT_STMT:
      {
        SelectStmt selectStmt = (SelectStmt)theEObject;
        T result = caseSelectStmt(selectStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.COMM_CLAUSE:
      {
        CommClause commClause = (CommClause)theEObject;
        T result = caseCommClause(commClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.COMM_CASE:
      {
        CommCase commCase = (CommCase)theEObject;
        T result = caseCommCase(commCase);
        if (result == null) result = caseCommClause(commCase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RECV_STMT:
      {
        RecvStmt recvStmt = (RecvStmt)theEObject;
        T result = caseRecvStmt(recvStmt);
        if (result == null) result = caseCommCase(recvStmt);
        if (result == null) result = caseCommClause(recvStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RECV_EXPR:
      {
        RecvExpr recvExpr = (RecvExpr)theEObject;
        T result = caseRecvExpr(recvExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RETURN_STMT:
      {
        ReturnStmt returnStmt = (ReturnStmt)theEObject;
        T result = caseReturnStmt(returnStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.DEFER_STMT:
      {
        DeferStmt deferStmt = (DeferStmt)theEObject;
        T result = caseDeferStmt(deferStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Souce File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Souce File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSouceFile(SouceFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Lit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Lit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLit(TypeLit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Lit Linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Lit Linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLitLinha(TypeLitLinha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayLength(ArrayLength object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementType(ElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Struct Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Struct Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructType(StructType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldDecl(FieldDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pointer Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pointer Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointerType(PointerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionType(FunctionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignature(Signature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Result</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Result</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResult(Result object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameters(Parameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterList(ParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterDecl(ParameterDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceType(InterfaceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodSpec(MethodSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapType(MapType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyType(KeyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelType(ChannelType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementList(StatementList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaration(Declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Top Level Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Top Level Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopLevelDecl(TopLevelDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>top Level Decl Linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>top Level Decl Linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetopLevelDeclLinha(topLevelDeclLinha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstDecl(ConstDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstSpec(ConstSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionList(ExpressionList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDecl(TypeDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeSpec(TypeSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alias Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alias Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAliasDecl(AliasDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDef(TypeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDecl(VarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarSpec(VarSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Short Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Short Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortVarDecl(ShortVarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDecl(FunctionDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionBody(FunctionBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodDecl(MethodDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Receiver</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Receiver</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReceiver(Receiver object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperand(Operand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composite Lit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composite Lit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositeLit(CompositeLit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralType(LiteralType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Type Linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Type Linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralTypeLinha(LiteralTypeLinha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralValue(LiteralValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementList(ElementList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Keyed Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Keyed Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyedElement(KeyedElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKey(Key object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Lit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Lit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionLit(FunctionLit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpr(PrimaryExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expr Linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expr Linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExprLinha(PrimaryExprLinha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Assertion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Assertion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeAssertion(TypeAssertion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArguments(Arguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodExpr(MethodExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Receiver Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Receiver Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReceiverType(ReceiverType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionLinha(ExpressionLinha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConversion(Conversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleStmt(SimpleStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Labeled Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Labeled Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLabeledStmt(LabeledStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionStmt(ExpressionStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Send Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Send Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSendStmt(SendStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannel(Channel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inc Dec Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inc Dec Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIncDecStmt(IncDecStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStmt(IfStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Switch Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Switch Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSwitchStmt(SwitchStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr Case Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr Case Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprCaseClause(ExprCaseClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr Switch Case</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr Switch Case</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprSwitchCase(ExprSwitchCase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>switch stmt linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>switch stmt linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseswitch_stmt_linha(switch_stmt_linha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Switch Guard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Switch Guard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeSwitchGuard(TypeSwitchGuard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Case Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Case Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeCaseClause(TypeCaseClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Switch Case</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Switch Case</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeSwitchCase(TypeSwitchCase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeList(TypeList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForStmt(ForStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForClause(ForClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Init Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Init Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitStmt(InitStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Post Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Post Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostStmt(PostStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeClause(RangeClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGoStmt(GoStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Select Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Select Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectStmt(SelectStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comm Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comm Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommClause(CommClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comm Case</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comm Case</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommCase(CommCase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Recv Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Recv Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecvStmt(RecvStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Recv Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Recv Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecvExpr(RecvExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnStmt(ReturnStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Defer Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Defer Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeferStmt(DeferStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //GoSwitch
