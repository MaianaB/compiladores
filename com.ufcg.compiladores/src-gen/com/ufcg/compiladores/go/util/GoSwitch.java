/**
 * generated by Xtext 2.13.0
 */
package com.ufcg.compiladores.go.util;

import com.ufcg.compiladores.go.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.ufcg.compiladores.go.GoPackage
 * @generated
 */
public class GoSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GoPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = GoPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case GoPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.GREETING:
      {
        Greeting greeting = (Greeting)theEObject;
        T result = caseGreeting(greeting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = caseFieldDecl(type);
        if (result == null) result = caseParameterDecl(type);
        if (result == null) result = caseConstSpec(type);
        if (result == null) result = caseAliasDecl(type);
        if (result == null) result = caseTypeDef(type);
        if (result == null) result = caseVarSpec(type);
        if (result == null) result = caseTypeAssertion(type);
        if (result == null) result = caseArguments(type);
        if (result == null) result = caseReceiverType(type);
        if (result == null) result = caseConversion(type);
        if (result == null) result = caseParameterList(type);
        if (result == null) result = caseConstDecl(type);
        if (result == null) result = caseTypeSpec(type);
        if (result == null) result = caseVarDecl(type);
        if (result == null) result = caseMethodExpr(type);
        if (result == null) result = caseParameters(type);
        if (result == null) result = caseTypeDecl(type);
        if (result == null) result = caseResult(type);
        if (result == null) result = caseSignature(type);
        if (result == null) result = caseReceiver(type);
        if (result == null) result = caseDeclaration(type);
        if (result == null) result = caseMethodSpec(type);
        if (result == null) result = caseFunctionDecl(type);
        if (result == null) result = caseFunctionLit(type);
        if (result == null) result = caseMethodDecl(type);
        if (result == null) result = caseTopLevelDecl(type);
        if (result == null) result = caseLiteral(type);
        if (result == null) result = caseOperand(type);
        if (result == null) result = casePrimaryExpr(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_LIT:
      {
        TypeLit typeLit = (TypeLit)theEObject;
        T result = caseTypeLit(typeLit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ARRAY_LENGTH:
      {
        ArrayLength arrayLength = (ArrayLength)theEObject;
        T result = caseArrayLength(arrayLength);
        if (result == null) result = caseArrayType(arrayLength);
        if (result == null) result = caseTypeLit(arrayLength);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ARRAY_TYPE:
      {
        ArrayType arrayType = (ArrayType)theEObject;
        T result = caseArrayType(arrayType);
        if (result == null) result = caseTypeLit(arrayType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ELEMENT_TYPE:
      {
        ElementType elementType = (ElementType)theEObject;
        T result = caseElementType(elementType);
        if (result == null) result = caseSliceType(elementType);
        if (result == null) result = caseChannelType(elementType);
        if (result == null) result = caseTypeLit(elementType);
        if (result == null) result = caseLiteralType(elementType);
        if (result == null) result = caseCompositeLit(elementType);
        if (result == null) result = caseLiteral(elementType);
        if (result == null) result = caseOperand(elementType);
        if (result == null) result = casePrimaryExpr(elementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SLICE_TYPE:
      {
        SliceType sliceType = (SliceType)theEObject;
        T result = caseSliceType(sliceType);
        if (result == null) result = caseTypeLit(sliceType);
        if (result == null) result = caseLiteralType(sliceType);
        if (result == null) result = caseCompositeLit(sliceType);
        if (result == null) result = caseLiteral(sliceType);
        if (result == null) result = caseOperand(sliceType);
        if (result == null) result = casePrimaryExpr(sliceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.STRUCT_TYPE:
      {
        StructType structType = (StructType)theEObject;
        T result = caseStructType(structType);
        if (result == null) result = caseTypeLit(structType);
        if (result == null) result = caseLiteralType(structType);
        if (result == null) result = caseCompositeLit(structType);
        if (result == null) result = caseLiteral(structType);
        if (result == null) result = caseOperand(structType);
        if (result == null) result = casePrimaryExpr(structType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FIELD_DECL:
      {
        FieldDecl fieldDecl = (FieldDecl)theEObject;
        T result = caseFieldDecl(fieldDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.POINTER_TYPE:
      {
        PointerType pointerType = (PointerType)theEObject;
        T result = casePointerType(pointerType);
        if (result == null) result = caseTypeLit(pointerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.BASE_TYPE:
      {
        BaseType baseType = (BaseType)theEObject;
        T result = caseBaseType(baseType);
        if (result == null) result = casePointerType(baseType);
        if (result == null) result = caseTypeLit(baseType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_TYPE:
      {
        FunctionType functionType = (FunctionType)theEObject;
        T result = caseFunctionType(functionType);
        if (result == null) result = caseTypeLit(functionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SIGNATURE:
      {
        Signature signature = (Signature)theEObject;
        T result = caseSignature(signature);
        if (result == null) result = caseMethodSpec(signature);
        if (result == null) result = caseFunctionDecl(signature);
        if (result == null) result = caseFunctionLit(signature);
        if (result == null) result = caseTopLevelDecl(signature);
        if (result == null) result = caseLiteral(signature);
        if (result == null) result = caseOperand(signature);
        if (result == null) result = casePrimaryExpr(signature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RESULT:
      {
        Result result = (Result)theEObject;
        T theResult = caseResult(result);
        if (theResult == null) theResult = defaultCase(theEObject);
        return theResult;
      }
      case GoPackage.PARAMETERS:
      {
        Parameters parameters = (Parameters)theEObject;
        T result = caseParameters(parameters);
        if (result == null) result = caseSignature(parameters);
        if (result == null) result = caseResult(parameters);
        if (result == null) result = caseReceiver(parameters);
        if (result == null) result = caseMethodSpec(parameters);
        if (result == null) result = caseFunctionDecl(parameters);
        if (result == null) result = caseFunctionLit(parameters);
        if (result == null) result = caseMethodDecl(parameters);
        if (result == null) result = caseTopLevelDecl(parameters);
        if (result == null) result = caseLiteral(parameters);
        if (result == null) result = caseOperand(parameters);
        if (result == null) result = casePrimaryExpr(parameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PARAMETER_LIST:
      {
        ParameterList parameterList = (ParameterList)theEObject;
        T result = caseParameterList(parameterList);
        if (result == null) result = caseParameters(parameterList);
        if (result == null) result = caseSignature(parameterList);
        if (result == null) result = caseResult(parameterList);
        if (result == null) result = caseReceiver(parameterList);
        if (result == null) result = caseMethodSpec(parameterList);
        if (result == null) result = caseFunctionDecl(parameterList);
        if (result == null) result = caseFunctionLit(parameterList);
        if (result == null) result = caseMethodDecl(parameterList);
        if (result == null) result = caseTopLevelDecl(parameterList);
        if (result == null) result = caseLiteral(parameterList);
        if (result == null) result = caseOperand(parameterList);
        if (result == null) result = casePrimaryExpr(parameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PARAMETER_DECL:
      {
        ParameterDecl parameterDecl = (ParameterDecl)theEObject;
        T result = caseParameterDecl(parameterDecl);
        if (result == null) result = caseParameterList(parameterDecl);
        if (result == null) result = caseParameters(parameterDecl);
        if (result == null) result = caseSignature(parameterDecl);
        if (result == null) result = caseResult(parameterDecl);
        if (result == null) result = caseReceiver(parameterDecl);
        if (result == null) result = caseMethodSpec(parameterDecl);
        if (result == null) result = caseFunctionDecl(parameterDecl);
        if (result == null) result = caseFunctionLit(parameterDecl);
        if (result == null) result = caseMethodDecl(parameterDecl);
        if (result == null) result = caseTopLevelDecl(parameterDecl);
        if (result == null) result = caseLiteral(parameterDecl);
        if (result == null) result = caseOperand(parameterDecl);
        if (result == null) result = casePrimaryExpr(parameterDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.INTERFACE_TYPE:
      {
        InterfaceType interfaceType = (InterfaceType)theEObject;
        T result = caseInterfaceType(interfaceType);
        if (result == null) result = caseTypeLit(interfaceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.METHOD_SPEC:
      {
        MethodSpec methodSpec = (MethodSpec)theEObject;
        T result = caseMethodSpec(methodSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.MAP_TYPE:
      {
        MapType mapType = (MapType)theEObject;
        T result = caseMapType(mapType);
        if (result == null) result = caseTypeLit(mapType);
        if (result == null) result = caseLiteralType(mapType);
        if (result == null) result = caseCompositeLit(mapType);
        if (result == null) result = caseLiteral(mapType);
        if (result == null) result = caseOperand(mapType);
        if (result == null) result = casePrimaryExpr(mapType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.KEY_TYPE:
      {
        KeyType keyType = (KeyType)theEObject;
        T result = caseKeyType(keyType);
        if (result == null) result = caseMapType(keyType);
        if (result == null) result = caseTypeLit(keyType);
        if (result == null) result = caseLiteralType(keyType);
        if (result == null) result = caseCompositeLit(keyType);
        if (result == null) result = caseLiteral(keyType);
        if (result == null) result = caseOperand(keyType);
        if (result == null) result = casePrimaryExpr(keyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CHANNEL_TYPE:
      {
        ChannelType channelType = (ChannelType)theEObject;
        T result = caseChannelType(channelType);
        if (result == null) result = caseTypeLit(channelType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.DECLARATION:
      {
        Declaration declaration = (Declaration)theEObject;
        T result = caseDeclaration(declaration);
        if (result == null) result = caseTopLevelDecl(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TOP_LEVEL_DECL:
      {
        TopLevelDecl topLevelDecl = (TopLevelDecl)theEObject;
        T result = caseTopLevelDecl(topLevelDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONST_DECL:
      {
        ConstDecl constDecl = (ConstDecl)theEObject;
        T result = caseConstDecl(constDecl);
        if (result == null) result = caseDeclaration(constDecl);
        if (result == null) result = caseTopLevelDecl(constDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONST_SPEC:
      {
        ConstSpec constSpec = (ConstSpec)theEObject;
        T result = caseConstSpec(constSpec);
        if (result == null) result = caseConstDecl(constSpec);
        if (result == null) result = caseDeclaration(constSpec);
        if (result == null) result = caseTopLevelDecl(constSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_LIST:
      {
        ExpressionList expressionList = (ExpressionList)theEObject;
        T result = caseExpressionList(expressionList);
        if (result == null) result = caseVarSpec(expressionList);
        if (result == null) result = caseShortVarDecl(expressionList);
        if (result == null) result = caseArguments(expressionList);
        if (result == null) result = caseVarDecl(expressionList);
        if (result == null) result = caseDeclaration(expressionList);
        if (result == null) result = caseTopLevelDecl(expressionList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_DECL:
      {
        TypeDecl typeDecl = (TypeDecl)theEObject;
        T result = caseTypeDecl(typeDecl);
        if (result == null) result = caseDeclaration(typeDecl);
        if (result == null) result = caseTopLevelDecl(typeDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_SPEC:
      {
        TypeSpec typeSpec = (TypeSpec)theEObject;
        T result = caseTypeSpec(typeSpec);
        if (result == null) result = caseTypeDecl(typeSpec);
        if (result == null) result = caseDeclaration(typeSpec);
        if (result == null) result = caseTopLevelDecl(typeSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ALIAS_DECL:
      {
        AliasDecl aliasDecl = (AliasDecl)theEObject;
        T result = caseAliasDecl(aliasDecl);
        if (result == null) result = caseTypeSpec(aliasDecl);
        if (result == null) result = caseTypeDecl(aliasDecl);
        if (result == null) result = caseDeclaration(aliasDecl);
        if (result == null) result = caseTopLevelDecl(aliasDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_DEF:
      {
        TypeDef typeDef = (TypeDef)theEObject;
        T result = caseTypeDef(typeDef);
        if (result == null) result = caseTypeSpec(typeDef);
        if (result == null) result = caseTypeDecl(typeDef);
        if (result == null) result = caseDeclaration(typeDef);
        if (result == null) result = caseTopLevelDecl(typeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.VAR_DECL:
      {
        VarDecl varDecl = (VarDecl)theEObject;
        T result = caseVarDecl(varDecl);
        if (result == null) result = caseDeclaration(varDecl);
        if (result == null) result = caseTopLevelDecl(varDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.VAR_SPEC:
      {
        VarSpec varSpec = (VarSpec)theEObject;
        T result = caseVarSpec(varSpec);
        if (result == null) result = caseVarDecl(varSpec);
        if (result == null) result = caseDeclaration(varSpec);
        if (result == null) result = caseTopLevelDecl(varSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SHORT_VAR_DECL:
      {
        ShortVarDecl shortVarDecl = (ShortVarDecl)theEObject;
        T result = caseShortVarDecl(shortVarDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_DECL:
      {
        FunctionDecl functionDecl = (FunctionDecl)theEObject;
        T result = caseFunctionDecl(functionDecl);
        if (result == null) result = caseTopLevelDecl(functionDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.METHOD_DECL:
      {
        MethodDecl methodDecl = (MethodDecl)theEObject;
        T result = caseMethodDecl(methodDecl);
        if (result == null) result = caseTopLevelDecl(methodDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RECEIVER:
      {
        Receiver receiver = (Receiver)theEObject;
        T result = caseReceiver(receiver);
        if (result == null) result = caseMethodDecl(receiver);
        if (result == null) result = caseTopLevelDecl(receiver);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.OPERAND:
      {
        Operand operand = (Operand)theEObject;
        T result = caseOperand(operand);
        if (result == null) result = casePrimaryExpr(operand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseOperand(literal);
        if (result == null) result = casePrimaryExpr(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.COMPOSITE_LIT:
      {
        CompositeLit compositeLit = (CompositeLit)theEObject;
        T result = caseCompositeLit(compositeLit);
        if (result == null) result = caseLiteral(compositeLit);
        if (result == null) result = caseOperand(compositeLit);
        if (result == null) result = casePrimaryExpr(compositeLit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LITERAL_TYPE:
      {
        LiteralType literalType = (LiteralType)theEObject;
        T result = caseLiteralType(literalType);
        if (result == null) result = caseCompositeLit(literalType);
        if (result == null) result = caseLiteral(literalType);
        if (result == null) result = caseOperand(literalType);
        if (result == null) result = casePrimaryExpr(literalType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LITERAL_VALUE:
      {
        LiteralValue literalValue = (LiteralValue)theEObject;
        T result = caseLiteralValue(literalValue);
        if (result == null) result = caseElement(literalValue);
        if (result == null) result = caseKey(literalValue);
        if (result == null) result = caseKeyedElement(literalValue);
        if (result == null) result = caseElementList(literalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ELEMENT_LIST:
      {
        ElementList elementList = (ElementList)theEObject;
        T result = caseElementList(elementList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.KEYED_ELEMENT:
      {
        KeyedElement keyedElement = (KeyedElement)theEObject;
        T result = caseKeyedElement(keyedElement);
        if (result == null) result = caseElementList(keyedElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.KEY:
      {
        Key key = (Key)theEObject;
        T result = caseKey(key);
        if (result == null) result = caseKeyedElement(key);
        if (result == null) result = caseElementList(key);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_LIT:
      {
        FunctionLit functionLit = (FunctionLit)theEObject;
        T result = caseFunctionLit(functionLit);
        if (result == null) result = caseLiteral(functionLit);
        if (result == null) result = caseOperand(functionLit);
        if (result == null) result = casePrimaryExpr(functionLit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PRIMARY_EXPR:
      {
        PrimaryExpr primaryExpr = (PrimaryExpr)theEObject;
        T result = casePrimaryExpr(primaryExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.INDEX:
      {
        Index index = (Index)theEObject;
        T result = caseIndex(index);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SLICE:
      {
        Slice slice = (Slice)theEObject;
        T result = caseSlice(slice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SLICE_LINHA:
      {
        SliceLinha sliceLinha = (SliceLinha)theEObject;
        T result = caseSliceLinha(sliceLinha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.TYPE_ASSERTION:
      {
        TypeAssertion typeAssertion = (TypeAssertion)theEObject;
        T result = caseTypeAssertion(typeAssertion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.ARGUMENTS:
      {
        Arguments arguments = (Arguments)theEObject;
        T result = caseArguments(arguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.METHOD_EXPR:
      {
        MethodExpr methodExpr = (MethodExpr)theEObject;
        T result = caseMethodExpr(methodExpr);
        if (result == null) result = casePrimaryExpr(methodExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RECEIVER_TYPE:
      {
        ReceiverType receiverType = (ReceiverType)theEObject;
        T result = caseReceiverType(receiverType);
        if (result == null) result = caseMethodExpr(receiverType);
        if (result == null) result = casePrimaryExpr(receiverType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseArrayLength(expression);
        if (result == null) result = caseExpressionList(expression);
        if (result == null) result = caseOperand(expression);
        if (result == null) result = caseElement(expression);
        if (result == null) result = caseKey(expression);
        if (result == null) result = caseIndex(expression);
        if (result == null) result = caseSlice(expression);
        if (result == null) result = caseSliceLinha(expression);
        if (result == null) result = caseExpressionLinha(expression);
        if (result == null) result = caseArrayType(expression);
        if (result == null) result = caseVarSpec(expression);
        if (result == null) result = caseShortVarDecl(expression);
        if (result == null) result = caseArguments(expression);
        if (result == null) result = casePrimaryExpr(expression);
        if (result == null) result = caseKeyedElement(expression);
        if (result == null) result = caseTypeLit(expression);
        if (result == null) result = caseVarDecl(expression);
        if (result == null) result = caseElementList(expression);
        if (result == null) result = caseDeclaration(expression);
        if (result == null) result = caseTopLevelDecl(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_LINHA:
      {
        ExpressionLinha expressionLinha = (ExpressionLinha)theEObject;
        T result = caseExpressionLinha(expressionLinha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.UNARY_EXPR:
      {
        UnaryExpr unaryExpr = (UnaryExpr)theEObject;
        T result = caseUnaryExpr(unaryExpr);
        if (result == null) result = caseExpression(unaryExpr);
        if (result == null) result = caseArrayLength(unaryExpr);
        if (result == null) result = caseExpressionList(unaryExpr);
        if (result == null) result = caseOperand(unaryExpr);
        if (result == null) result = caseElement(unaryExpr);
        if (result == null) result = caseKey(unaryExpr);
        if (result == null) result = caseIndex(unaryExpr);
        if (result == null) result = caseSlice(unaryExpr);
        if (result == null) result = caseSliceLinha(unaryExpr);
        if (result == null) result = caseExpressionLinha(unaryExpr);
        if (result == null) result = caseArrayType(unaryExpr);
        if (result == null) result = caseVarSpec(unaryExpr);
        if (result == null) result = caseShortVarDecl(unaryExpr);
        if (result == null) result = caseArguments(unaryExpr);
        if (result == null) result = casePrimaryExpr(unaryExpr);
        if (result == null) result = caseKeyedElement(unaryExpr);
        if (result == null) result = caseTypeLit(unaryExpr);
        if (result == null) result = caseVarDecl(unaryExpr);
        if (result == null) result = caseElementList(unaryExpr);
        if (result == null) result = caseDeclaration(unaryExpr);
        if (result == null) result = caseTopLevelDecl(unaryExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONVERSION:
      {
        Conversion conversion = (Conversion)theEObject;
        T result = caseConversion(conversion);
        if (result == null) result = casePrimaryExpr(conversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Greeting</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Greeting</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGreeting(Greeting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Lit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Lit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLit(TypeLit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayLength(ArrayLength object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayType(ArrayType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementType(ElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slice Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slice Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSliceType(SliceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Struct Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Struct Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructType(StructType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldDecl(FieldDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pointer Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pointer Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointerType(PointerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Base Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Base Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBaseType(BaseType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionType(FunctionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignature(Signature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Result</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Result</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResult(Result object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameters(Parameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterList(ParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterDecl(ParameterDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceType(InterfaceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodSpec(MethodSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapType(MapType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyType(KeyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelType(ChannelType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaration(Declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Top Level Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Top Level Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopLevelDecl(TopLevelDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstDecl(ConstDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstSpec(ConstSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionList(ExpressionList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDecl(TypeDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeSpec(TypeSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alias Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alias Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAliasDecl(AliasDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDef(TypeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDecl(VarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarSpec(VarSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Short Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Short Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortVarDecl(ShortVarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDecl(FunctionDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodDecl(MethodDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Receiver</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Receiver</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReceiver(Receiver object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperand(Operand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composite Lit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composite Lit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositeLit(CompositeLit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralType(LiteralType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralValue(LiteralValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementList(ElementList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Keyed Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Keyed Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyedElement(KeyedElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKey(Key object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Lit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Lit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionLit(FunctionLit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpr(PrimaryExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndex(Index object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSlice(Slice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slice Linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slice Linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSliceLinha(SliceLinha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Assertion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Assertion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeAssertion(TypeAssertion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArguments(Arguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodExpr(MethodExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Receiver Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Receiver Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReceiverType(ReceiverType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Linha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Linha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionLinha(ExpressionLinha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryExpr(UnaryExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConversion(Conversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //GoSwitch
