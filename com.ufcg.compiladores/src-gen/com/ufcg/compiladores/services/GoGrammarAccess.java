/*
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SouceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SouceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackageClausePackageClauseParserRuleCall_0_0 = (RuleCall)cPackageClauseAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cImportDeclAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cImportDeclImportDeclParserRuleCall_2_0_0 = (RuleCall)cImportDeclAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTopLevelDeclAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTopLevelDeclTopLevelDeclParserRuleCall_3_0_0 = (RuleCall)cTopLevelDeclAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//SouceFile:
		//	PackageClause=PackageClause ";" (ImportDecl+=ImportDecl ";")* (TopLevelDecl=TopLevelDecl ";")?;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageClause=PackageClause ";" (ImportDecl+=ImportDecl ";")* (TopLevelDecl=TopLevelDecl ";")?
		public Group getGroup() { return cGroup; }
		
		//PackageClause=PackageClause
		public Assignment getPackageClauseAssignment_0() { return cPackageClauseAssignment_0; }
		
		//PackageClause
		public RuleCall getPackageClausePackageClauseParserRuleCall_0_0() { return cPackageClausePackageClauseParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//(ImportDecl+=ImportDecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//ImportDecl+=ImportDecl
		public Assignment getImportDeclAssignment_2_0() { return cImportDeclAssignment_2_0; }
		
		//ImportDecl
		public RuleCall getImportDeclImportDeclParserRuleCall_2_0_0() { return cImportDeclImportDeclParserRuleCall_2_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(TopLevelDecl=TopLevelDecl ";")?
		public Group getGroup_3() { return cGroup_3; }
		
		//TopLevelDecl=TopLevelDecl
		public Assignment getTopLevelDeclAssignment_3_0() { return cTopLevelDeclAssignment_3_0; }
		
		//TopLevelDecl
		public RuleCall getTopLevelDeclTopLevelDeclParserRuleCall_3_0_0() { return cTopLevelDeclTopLevelDeclParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeNameTypeNameParserRuleCall_0_0 = (RuleCall)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeLitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeLitTypeLitParserRuleCall_1_0 = (RuleCall)cTypeLitAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Type:
		//	TypeName=TypeName | TypeLit=TypeLit | "(" Type=Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName=TypeName | TypeLit=TypeLit | "(" Type=Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeName=TypeName
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_0_0() { return cTypeNameTypeNameParserRuleCall_0_0; }
		
		//TypeLit=TypeLit
		public Assignment getTypeLitAssignment_1() { return cTypeLitAssignment_1; }
		
		//TypeLit
		public RuleCall getTypeLitTypeLitParserRuleCall_1_0() { return cTypeLitTypeLitParserRuleCall_1_0; }
		
		//"(" Type=Type ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cTypeNameLinhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameLinhaTypeNameLinhaParserRuleCall_1_0 = (RuleCall)cTypeNameLinhaAssignment_1.eContents().get(0);
		
		//TypeName:
		//	identifier=identifier TypeNameLinha=TypeNameLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier TypeNameLinha=TypeNameLinha
		public Group getGroup() { return cGroup; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//TypeNameLinha=TypeNameLinha
		public Assignment getTypeNameLinhaAssignment_1() { return cTypeNameLinhaAssignment_1; }
		
		//TypeNameLinha
		public RuleCall getTypeNameLinhaTypeNameLinhaParserRuleCall_1_0() { return cTypeNameLinhaTypeNameLinhaParserRuleCall_1_0; }
	}
	public class TypeNameLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeNameLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_1_0 = (RuleCall)cIdentifierAssignment_0_1.eContents().get(0);
		private final Assignment cTypeNameLinhaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeNameLinhaTypeNameLinhaParserRuleCall_0_2_0 = (RuleCall)cTypeNameLinhaAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cQualifiedIdentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cQualifiedIdentQualifiedIdentParserRuleCall_1_0_0 = (RuleCall)cQualifiedIdentAssignment_1_0.eContents().get(0);
		private final Assignment cTypeNameLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeNameLinhaTypeNameLinhaParserRuleCall_1_1_0 = (RuleCall)cTypeNameLinhaAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTypeNameLinhaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//TypeNameLinha:
		//	"." identifier=identifier TypeNameLinha=TypeNameLinha | QualifiedIdent=QualifiedIdent TypeNameLinha=TypeNameLinha |
		//	{TypeNameLinha} ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." identifier=identifier TypeNameLinha=TypeNameLinha | QualifiedIdent=QualifiedIdent TypeNameLinha=TypeNameLinha |
		//{TypeNameLinha} ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." identifier=identifier TypeNameLinha=TypeNameLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0_1() { return cIdentifierAssignment_0_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_1_0() { return cIdentifierIdentifierParserRuleCall_0_1_0; }
		
		//TypeNameLinha=TypeNameLinha
		public Assignment getTypeNameLinhaAssignment_0_2() { return cTypeNameLinhaAssignment_0_2; }
		
		//TypeNameLinha
		public RuleCall getTypeNameLinhaTypeNameLinhaParserRuleCall_0_2_0() { return cTypeNameLinhaTypeNameLinhaParserRuleCall_0_2_0; }
		
		//QualifiedIdent=QualifiedIdent TypeNameLinha=TypeNameLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//QualifiedIdent=QualifiedIdent
		public Assignment getQualifiedIdentAssignment_1_0() { return cQualifiedIdentAssignment_1_0; }
		
		//QualifiedIdent
		public RuleCall getQualifiedIdentQualifiedIdentParserRuleCall_1_0_0() { return cQualifiedIdentQualifiedIdentParserRuleCall_1_0_0; }
		
		//TypeNameLinha=TypeNameLinha
		public Assignment getTypeNameLinhaAssignment_1_1() { return cTypeNameLinhaAssignment_1_1; }
		
		//TypeNameLinha
		public RuleCall getTypeNameLinhaTypeNameLinhaParserRuleCall_1_1_0() { return cTypeNameLinhaTypeNameLinhaParserRuleCall_1_1_0; }
		
		//{TypeNameLinha} ANY_OTHER
		public Group getGroup_2() { return cGroup_2; }
		
		//{TypeNameLinha}
		public Action getTypeNameLinhaAction_2_0() { return cTypeNameLinhaAction_2_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2_1() { return cANY_OTHERTerminalRuleCall_2_1; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeLitLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0 = (RuleCall)cTypeLitLinhaAssignment_0_1.eContents().get(0);
		private final Assignment cStructTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStructTypeStructTypeParserRuleCall_1_0 = (RuleCall)cStructTypeAssignment_1.eContents().get(0);
		private final Assignment cPointerTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPointerTypePointerTypeParserRuleCall_2_0 = (RuleCall)cPointerTypeAssignment_2.eContents().get(0);
		private final Assignment cFunctionTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionTypeFunctionTypeParserRuleCall_3_0 = (RuleCall)cFunctionTypeAssignment_3.eContents().get(0);
		private final Assignment cInterfaceTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cInterfaceTypeInterfaceTypeParserRuleCall_4_0 = (RuleCall)cInterfaceTypeAssignment_4.eContents().get(0);
		private final Assignment cMapTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMapTypeMapTypeParserRuleCall_5_0 = (RuleCall)cMapTypeAssignment_5.eContents().get(0);
		private final Assignment cChannelTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cChannelTypeChannelTypeParserRuleCall_6_0 = (RuleCall)cChannelTypeAssignment_6.eContents().get(0);
		
		//TypeLit:
		//	"[" TypeLitLinha=TypeLitLinha | StructType=StructType | PointerType=PointerType | FunctionType=FunctionType |
		//	InterfaceType=InterfaceType | MapType=MapType | ChannelType=ChannelType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" TypeLitLinha=TypeLitLinha | StructType=StructType | PointerType=PointerType | FunctionType=FunctionType |
		//InterfaceType=InterfaceType | MapType=MapType | ChannelType=ChannelType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" TypeLitLinha=TypeLitLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//TypeLitLinha=TypeLitLinha
		public Assignment getTypeLitLinhaAssignment_0_1() { return cTypeLitLinhaAssignment_0_1; }
		
		//TypeLitLinha
		public RuleCall getTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0() { return cTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0; }
		
		//StructType=StructType
		public Assignment getStructTypeAssignment_1() { return cStructTypeAssignment_1; }
		
		//StructType
		public RuleCall getStructTypeStructTypeParserRuleCall_1_0() { return cStructTypeStructTypeParserRuleCall_1_0; }
		
		//PointerType=PointerType
		public Assignment getPointerTypeAssignment_2() { return cPointerTypeAssignment_2; }
		
		//PointerType
		public RuleCall getPointerTypePointerTypeParserRuleCall_2_0() { return cPointerTypePointerTypeParserRuleCall_2_0; }
		
		//FunctionType=FunctionType
		public Assignment getFunctionTypeAssignment_3() { return cFunctionTypeAssignment_3; }
		
		//FunctionType
		public RuleCall getFunctionTypeFunctionTypeParserRuleCall_3_0() { return cFunctionTypeFunctionTypeParserRuleCall_3_0; }
		
		//InterfaceType=InterfaceType
		public Assignment getInterfaceTypeAssignment_4() { return cInterfaceTypeAssignment_4; }
		
		//InterfaceType
		public RuleCall getInterfaceTypeInterfaceTypeParserRuleCall_4_0() { return cInterfaceTypeInterfaceTypeParserRuleCall_4_0; }
		
		//MapType=MapType
		public Assignment getMapTypeAssignment_5() { return cMapTypeAssignment_5; }
		
		//MapType
		public RuleCall getMapTypeMapTypeParserRuleCall_5_0() { return cMapTypeMapTypeParserRuleCall_5_0; }
		
		//ChannelType=ChannelType
		public Assignment getChannelTypeAssignment_6() { return cChannelTypeAssignment_6; }
		
		//ChannelType
		public RuleCall getChannelTypeChannelTypeParserRuleCall_6_0() { return cChannelTypeChannelTypeParserRuleCall_6_0; }
	}
	public class TypeLitLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeLitLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArrayLengthAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArrayLengthArrayLengthParserRuleCall_0_0_0 = (RuleCall)cArrayLengthAssignment_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_2_0 = (RuleCall)cElementTypeAssignment_0_2.eContents().get(0);
		private final Assignment cTypeLitLinhaAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeLitLinhaTypeLitLinhaParserRuleCall_0_3_0 = (RuleCall)cTypeLitLinhaAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_1_0 = (RuleCall)cElementTypeAssignment_1_1.eContents().get(0);
		private final Assignment cTypeLitLinhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeLitLinhaTypeLitLinhaParserRuleCall_1_2_0 = (RuleCall)cTypeLitLinhaAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTypeLitLinhaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//TypeLitLinha:
		//	ArrayLength=ArrayLength "]" ElementType=ElementType TypeLitLinha=TypeLitLinha |
		//	"]" ElementType=ElementType TypeLitLinha=TypeLitLinha | {TypeLitLinha} ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength=ArrayLength "]" ElementType=ElementType TypeLitLinha=TypeLitLinha | "]" ElementType=ElementType
		//TypeLitLinha=TypeLitLinha | {TypeLitLinha} ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayLength=ArrayLength "]" ElementType=ElementType TypeLitLinha=TypeLitLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//ArrayLength=ArrayLength
		public Assignment getArrayLengthAssignment_0_0() { return cArrayLengthAssignment_0_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthArrayLengthParserRuleCall_0_0_0() { return cArrayLengthArrayLengthParserRuleCall_0_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//ElementType=ElementType
		public Assignment getElementTypeAssignment_0_2() { return cElementTypeAssignment_0_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_2_0() { return cElementTypeElementTypeParserRuleCall_0_2_0; }
		
		//TypeLitLinha=TypeLitLinha
		public Assignment getTypeLitLinhaAssignment_0_3() { return cTypeLitLinhaAssignment_0_3; }
		
		//TypeLitLinha
		public RuleCall getTypeLitLinhaTypeLitLinhaParserRuleCall_0_3_0() { return cTypeLitLinhaTypeLitLinhaParserRuleCall_0_3_0; }
		
		//"]" ElementType=ElementType TypeLitLinha=TypeLitLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0() { return cRightSquareBracketKeyword_1_0; }
		
		//ElementType=ElementType
		public Assignment getElementTypeAssignment_1_1() { return cElementTypeAssignment_1_1; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_1_0() { return cElementTypeElementTypeParserRuleCall_1_1_0; }
		
		//TypeLitLinha=TypeLitLinha
		public Assignment getTypeLitLinhaAssignment_1_2() { return cTypeLitLinhaAssignment_1_2; }
		
		//TypeLitLinha
		public RuleCall getTypeLitLinhaTypeLitLinhaParserRuleCall_1_2_0() { return cTypeLitLinhaTypeLitLinhaParserRuleCall_1_2_0; }
		
		//{TypeLitLinha} ANY_OTHER
		public Group getGroup_2() { return cGroup_2; }
		
		//{TypeLitLinha}
		public Action getTypeLitLinhaAction_2_0() { return cTypeLitLinhaAction_2_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2_1() { return cANY_OTHERTerminalRuleCall_2_1; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ArrayLength");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ArrayLength:
		//	Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ElementType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ElementType:
		//	Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFieldDeclAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFieldDeclFieldDeclParserRuleCall_3_0_0 = (RuleCall)cFieldDeclAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructType:
		//	{StructType} "struct" "{" (FieldDecl+=FieldDecl ";")* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{StructType} "struct" "{" (FieldDecl+=FieldDecl ";")* ";"
		public Group getGroup() { return cGroup; }
		
		//{StructType}
		public Action getStructTypeAction_0() { return cStructTypeAction_0; }
		
		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(FieldDecl+=FieldDecl ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//FieldDecl+=FieldDecl
		public Assignment getFieldDeclAssignment_3_0() { return cFieldDeclAssignment_3_0; }
		
		//FieldDecl
		public RuleCall getFieldDeclFieldDeclParserRuleCall_3_0_0() { return cFieldDeclFieldDeclParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0_0_0 = (RuleCall)cIdentifierListAssignment_0_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_0_1_0 = (RuleCall)cTypeAssignment_0_0_1.eContents().get(0);
		private final Assignment cEmbeddedFieldAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cEmbeddedFieldEmbeddedFieldParserRuleCall_0_1_0 = (RuleCall)cEmbeddedFieldAssignment_0_1.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//FieldDecl:
		//	(IdentifierList=IdentifierList Type=Type | EmbeddedField=EmbeddedField) Tag=Tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//(IdentifierList=IdentifierList Type=Type | EmbeddedField=EmbeddedField) Tag=Tag?
		public Group getGroup() { return cGroup; }
		
		//IdentifierList=IdentifierList Type=Type | EmbeddedField=EmbeddedField
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//IdentifierList=IdentifierList Type=Type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//IdentifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0_0_0() { return cIdentifierListAssignment_0_0_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0_0_0; }
		
		//Type=Type
		public Assignment getTypeAssignment_0_0_1() { return cTypeAssignment_0_0_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_1_0() { return cTypeTypeParserRuleCall_0_0_1_0; }
		
		//EmbeddedField=EmbeddedField
		public Assignment getEmbeddedFieldAssignment_0_1() { return cEmbeddedFieldAssignment_0_1; }
		
		//EmbeddedField
		public RuleCall getEmbeddedFieldEmbeddedFieldParserRuleCall_0_1_0() { return cEmbeddedFieldEmbeddedFieldParserRuleCall_0_1_0; }
		
		//Tag=Tag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//Tag
		public RuleCall getTagTagParserRuleCall_1_0() { return cTagTagParserRuleCall_1_0; }
	}
	public class EmbeddedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.EmbeddedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		
		//EmbeddedField:
		//	"*"? TypeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"? TypeName=TypeName
		public Group getGroup() { return cGroup; }
		
		//"*"?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//TypeName=TypeName
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_0() { return cTypeNameTypeNameParserRuleCall_1_0; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Tag");
		private final Assignment cString_litAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cString_litString_litParserRuleCall_0 = (RuleCall)cString_litAssignment.eContents().get(0);
		
		//Tag:
		//	string_lit=string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit=string_lit
		public Assignment getString_litAssignment() { return cString_litAssignment; }
		
		//string_lit
		public RuleCall getString_litString_litParserRuleCall_0() { return cString_litString_litParserRuleCall_0; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//PointerType:
		//	"*" Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" Type=Type
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//Type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_1_0 = (RuleCall)cSignatureAssignment_1.eContents().get(0);
		
		//FunctionType:
		//	"func" Signature=Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature=Signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_0() { return cSignatureSignatureParserRuleCall_1_0; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParametersParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Assignment cResultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		
		//Signature:
		//	Parameters=Parameters Result=Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters=Parameters Result=Result?
		public Group getGroup() { return cGroup; }
		
		//Parameters=Parameters
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_0_0() { return cParametersParametersParserRuleCall_0_0; }
		
		//Result=Result?
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_1_0() { return cResultResultParserRuleCall_1_0; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParametersParametersParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Result:
		//	Parameters=Parameters | Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters=Parameters | Type=Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameters=Parameters
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_0_0() { return cParametersParametersParserRuleCall_0_0; }
		
		//Type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterListParameterListParserRuleCall_2_0_0 = (RuleCall)cParameterListAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameters:
		//	{Parameters} "(" (ParameterList=ParameterList ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameters} "(" (ParameterList=ParameterList ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//{Parameters}
		public Action getParametersAction_0() { return cParametersAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(ParameterList=ParameterList ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ParameterList=ParameterList
		public Assignment getParameterListAssignment_2_0() { return cParameterListAssignment_2_0; }
		
		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_2_0_0() { return cParameterListParameterListParserRuleCall_2_0_0; }
		
		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterDeclParameterDeclParserRuleCall_0_0 = (RuleCall)cParameterDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclParserRuleCall_1_1_0 = (RuleCall)cParameterDeclAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	ParameterDecl+=ParameterDecl ("," ParameterDecl+=ParameterDecl)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDecl+=ParameterDecl ("," ParameterDecl+=ParameterDecl)?
		public Group getGroup() { return cGroup; }
		
		//ParameterDecl+=ParameterDecl
		public Assignment getParameterDeclAssignment_0() { return cParameterDeclAssignment_0; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParameterDeclParserRuleCall_0_0() { return cParameterDeclParameterDeclParserRuleCall_0_0; }
		
		//("," ParameterDecl+=ParameterDecl)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ParameterDecl+=ParameterDecl
		public Assignment getParameterDeclAssignment_1_1() { return cParameterDeclAssignment_1_1; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParameterDeclParserRuleCall_1_1_0() { return cParameterDeclParameterDeclParserRuleCall_1_1_0; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ParameterDecl:
		//	IdentifierList=IdentifierList? "..."? Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList=IdentifierList? "..."? Type=Type
		public Group getGroup() { return cGroup; }
		
		//IdentifierList=IdentifierList?
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//Type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.InterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMethodSpecAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMethodSpecMethodSpecParserRuleCall_3_0_0 = (RuleCall)cMethodSpecAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfaceType:
		//	{InterfaceType} "interface" "{" (MethodSpec=MethodSpec ";")? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{InterfaceType} "interface" "{" (MethodSpec=MethodSpec ";")? "}"
		public Group getGroup() { return cGroup; }
		
		//{InterfaceType}
		public Action getInterfaceTypeAction_0() { return cInterfaceTypeAction_0; }
		
		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(MethodSpec=MethodSpec ";")?
		public Group getGroup_3() { return cGroup_3; }
		
		//MethodSpec=MethodSpec
		public Assignment getMethodSpecAssignment_3_0() { return cMethodSpecAssignment_3_0; }
		
		//MethodSpec
		public RuleCall getMethodSpecMethodSpecParserRuleCall_3_0_0() { return cMethodSpecMethodSpecParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMethodNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMethodNameMethodNameParserRuleCall_0_0_0 = (RuleCall)cMethodNameAssignment_0_0.eContents().get(0);
		private final Assignment cSignatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_0_1_0 = (RuleCall)cSignatureAssignment_0_1.eContents().get(0);
		private final Assignment cInterfaceTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceTypeNameInterfaceTypeNameParserRuleCall_1_0 = (RuleCall)cInterfaceTypeNameAssignment_1.eContents().get(0);
		
		//MethodSpec:
		//	MethodName=MethodName Signature=Signature | InterfaceTypeName=InterfaceTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodName=MethodName Signature=Signature | InterfaceTypeName=InterfaceTypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodName=MethodName Signature=Signature
		public Group getGroup_0() { return cGroup_0; }
		
		//MethodName=MethodName
		public Assignment getMethodNameAssignment_0_0() { return cMethodNameAssignment_0_0; }
		
		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_0_0_0() { return cMethodNameMethodNameParserRuleCall_0_0_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_0_1() { return cSignatureAssignment_0_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_0_1_0() { return cSignatureSignatureParserRuleCall_0_1_0; }
		
		//InterfaceTypeName=InterfaceTypeName
		public Assignment getInterfaceTypeNameAssignment_1() { return cInterfaceTypeNameAssignment_1; }
		
		//InterfaceTypeName
		public RuleCall getInterfaceTypeNameInterfaceTypeNameParserRuleCall_1_0() { return cInterfaceTypeNameInterfaceTypeNameParserRuleCall_1_0; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//MethodName:
		//	identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0() { return cIdentifierIdentifierParserRuleCall_0; }
	}
	public class InterfaceTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.InterfaceTypeName");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_0 = (RuleCall)cTypeNameAssignment.eContents().get(0);
		
		//InterfaceTypeName:
		//	TypeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName=TypeName
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_0() { return cTypeNameTypeNameParserRuleCall_0; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeKeyTypeParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementTypeElementTypeParserRuleCall_4_0 = (RuleCall)cElementTypeAssignment_4.eContents().get(0);
		
		//MapType:
		//	"map" "[" KeyType=KeyType "]" ElementType=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//"map" "[" KeyType=KeyType "]" ElementType=ElementType
		public Group getGroup() { return cGroup; }
		
		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//KeyType=KeyType
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//KeyType
		public RuleCall getKeyTypeKeyTypeParserRuleCall_2_0() { return cKeyTypeKeyTypeParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//ElementType=ElementType
		public Assignment getElementTypeAssignment_4() { return cElementTypeAssignment_4; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_4_0() { return cElementTypeElementTypeParserRuleCall_4_0; }
	}
	public class KeyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.KeyType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//KeyType:
		//	Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ChannelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cChanKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cChanKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cChanKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cElementTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_0 = (RuleCall)cElementTypeAssignment_1.eContents().get(0);
		
		//ChannelType:
		//	("chan" | "chan" "<-" | "<-" "chan") ElementType=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//("chan" | "chan" "<-" | "<-" "chan") ElementType=ElementType
		public Group getGroup() { return cGroup; }
		
		//"chan" | "chan" "<-" | "<-" "chan"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_0() { return cChanKeyword_0_0; }
		
		//"chan" "<-"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"chan"
		public Keyword getChanKeyword_0_1_0() { return cChanKeyword_0_1_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_1() { return cLessThanSignHyphenMinusKeyword_0_1_1; }
		
		//"<-" "chan"
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_2_0() { return cLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_2_1() { return cChanKeyword_0_2_1; }
		
		//ElementType=ElementType
		public Assignment getElementTypeAssignment_1() { return cElementTypeAssignment_1; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_0() { return cElementTypeElementTypeParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementListStatementListParserRuleCall_1_0 = (RuleCall)cStatementListAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" StatementList=StatementList "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" StatementList=StatementList "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//StatementList=StatementList
		public Assignment getStatementListAssignment_1() { return cStatementListAssignment_1; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_1_0() { return cStatementListStatementListParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_1_0_0 = (RuleCall)cStatementAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StatementList:
		//	{StatementList} (Statement+=Statement ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementList} (Statement+=Statement ";")*
		public Group getGroup() { return cGroup; }
		
		//{StatementList}
		public Action getStatementListAction_0() { return cStatementListAction_0; }
		
		//(Statement+=Statement ";")*
		public Group getGroup_1() { return cGroup_1; }
		
		//Statement+=Statement
		public Assignment getStatementAssignment_1_0() { return cStatementAssignment_1_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0_0() { return cStatementStatementParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstDeclConstDeclParserRuleCall_0_0 = (RuleCall)cConstDeclAssignment_0.eContents().get(0);
		private final Assignment cTypeDeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDeclTypeDeclParserRuleCall_1_0 = (RuleCall)cTypeDeclAssignment_1.eContents().get(0);
		private final Assignment cVarDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVarDeclVarDeclParserRuleCall_2_0 = (RuleCall)cVarDeclAssignment_2.eContents().get(0);
		
		//Declaration:
		//	ConstDecl=ConstDecl | TypeDecl=TypeDecl | VarDecl=VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstDecl=ConstDecl | TypeDecl=TypeDecl | VarDecl=VarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstDecl=ConstDecl
		public Assignment getConstDeclAssignment_0() { return cConstDeclAssignment_0; }
		
		//ConstDecl
		public RuleCall getConstDeclConstDeclParserRuleCall_0_0() { return cConstDeclConstDeclParserRuleCall_0_0; }
		
		//TypeDecl=TypeDecl
		public Assignment getTypeDeclAssignment_1() { return cTypeDeclAssignment_1; }
		
		//TypeDecl
		public RuleCall getTypeDeclTypeDeclParserRuleCall_1_0() { return cTypeDeclTypeDeclParserRuleCall_1_0; }
		
		//VarDecl=VarDecl
		public Assignment getVarDeclAssignment_2() { return cVarDeclAssignment_2; }
		
		//VarDecl
		public RuleCall getVarDeclVarDeclParserRuleCall_2_0() { return cVarDeclVarDeclParserRuleCall_2_0; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFuncKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTopLevelDeclLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTopLevelDeclLinhaTopLevelDeclLinhaParserRuleCall_1_1_0 = (RuleCall)cTopLevelDeclLinhaAssignment_1_1.eContents().get(0);
		
		//TopLevelDecl:
		//	Declaration=Declaration | "func" topLevelDeclLinha=topLevelDeclLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration=Declaration | "func" topLevelDeclLinha=topLevelDeclLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//"func" topLevelDeclLinha=topLevelDeclLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//"func"
		public Keyword getFuncKeyword_1_0() { return cFuncKeyword_1_0; }
		
		//topLevelDeclLinha=topLevelDeclLinha
		public Assignment getTopLevelDeclLinhaAssignment_1_1() { return cTopLevelDeclLinhaAssignment_1_1; }
		
		//topLevelDeclLinha
		public RuleCall getTopLevelDeclLinhaTopLevelDeclLinhaParserRuleCall_1_1_0() { return cTopLevelDeclLinhaTopLevelDeclLinhaParserRuleCall_1_1_0; }
	}
	public class TopLevelDeclLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.topLevelDeclLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFunctionNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFunctionNameFunctionNameParserRuleCall_0_0_0 = (RuleCall)cFunctionNameAssignment_0_0.eContents().get(0);
		private final Assignment cSignatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_0_1_0 = (RuleCall)cSignatureAssignment_0_1.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_0_2_0 = (RuleCall)cFunctionBodyAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cReceiverAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cReceiverReceiverParserRuleCall_1_0_0 = (RuleCall)cReceiverAssignment_1_0.eContents().get(0);
		private final Assignment cMethodNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMethodNameMethodNameParserRuleCall_1_1_0 = (RuleCall)cMethodNameAssignment_1_1.eContents().get(0);
		private final Assignment cSignatureAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_1_2_0 = (RuleCall)cSignatureAssignment_1_2.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_1_3_0 = (RuleCall)cFunctionBodyAssignment_1_3.eContents().get(0);
		
		//topLevelDeclLinha:
		//	FunctionName=FunctionName Signature=Signature FunctionBody=FunctionBody? | Receiver=Receiver MethodName=MethodName
		//	Signature=Signature FunctionBody=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionName=FunctionName Signature=Signature FunctionBody=FunctionBody? | Receiver=Receiver MethodName=MethodName
		//Signature=Signature FunctionBody=FunctionBody?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionName=FunctionName Signature=Signature FunctionBody=FunctionBody?
		public Group getGroup_0() { return cGroup_0; }
		
		//FunctionName=FunctionName
		public Assignment getFunctionNameAssignment_0_0() { return cFunctionNameAssignment_0_0; }
		
		//FunctionName
		public RuleCall getFunctionNameFunctionNameParserRuleCall_0_0_0() { return cFunctionNameFunctionNameParserRuleCall_0_0_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_0_1() { return cSignatureAssignment_0_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_0_1_0() { return cSignatureSignatureParserRuleCall_0_1_0; }
		
		//FunctionBody=FunctionBody?
		public Assignment getFunctionBodyAssignment_0_2() { return cFunctionBodyAssignment_0_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_0_2_0() { return cFunctionBodyFunctionBodyParserRuleCall_0_2_0; }
		
		//Receiver=Receiver MethodName=MethodName Signature=Signature FunctionBody=FunctionBody?
		public Group getGroup_1() { return cGroup_1; }
		
		//Receiver=Receiver
		public Assignment getReceiverAssignment_1_0() { return cReceiverAssignment_1_0; }
		
		//Receiver
		public RuleCall getReceiverReceiverParserRuleCall_1_0_0() { return cReceiverReceiverParserRuleCall_1_0_0; }
		
		//MethodName=MethodName
		public Assignment getMethodNameAssignment_1_1() { return cMethodNameAssignment_1_1; }
		
		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_1_1_0() { return cMethodNameMethodNameParserRuleCall_1_1_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_1_2() { return cSignatureAssignment_1_2; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_2_0() { return cSignatureSignatureParserRuleCall_1_2_0; }
		
		//FunctionBody=FunctionBody?
		public Assignment getFunctionBodyAssignment_1_3() { return cFunctionBodyAssignment_1_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_1_3_0() { return cFunctionBodyFunctionBodyParserRuleCall_1_3_0; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstSpecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConstSpecConstSpecParserRuleCall_2_0_0 = (RuleCall)cConstSpecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cConstSpecAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cConstSpecConstSpecParserRuleCall_2_1_1_0_0 = (RuleCall)cConstSpecAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ConstDecl:
		//	{ConstDecl} "const" (ConstSpec=ConstSpec | "(" (ConstSpec=ConstSpec ";")? ")");
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstDecl} "const" (ConstSpec=ConstSpec | "(" (ConstSpec=ConstSpec ";")? ")")
		public Group getGroup() { return cGroup; }
		
		//{ConstDecl}
		public Action getConstDeclAction_0() { return cConstDeclAction_0; }
		
		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//ConstSpec=ConstSpec | "(" (ConstSpec=ConstSpec ";")? ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ConstSpec=ConstSpec
		public Assignment getConstSpecAssignment_2_0() { return cConstSpecAssignment_2_0; }
		
		//ConstSpec
		public RuleCall getConstSpecConstSpecParserRuleCall_2_0_0() { return cConstSpecConstSpecParserRuleCall_2_0_0; }
		
		//"(" (ConstSpec=ConstSpec ";")? ")"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(ConstSpec=ConstSpec ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//ConstSpec=ConstSpec
		public Assignment getConstSpecAssignment_2_1_1_0() { return cConstSpecAssignment_2_1_1_0; }
		
		//ConstSpec
		public RuleCall getConstSpecConstSpecParserRuleCall_2_1_1_0_0() { return cConstSpecConstSpecParserRuleCall_2_1_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ConstSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_2_0 = (RuleCall)cExpressionListAssignment_1_2.eContents().get(0);
		
		//ConstSpec:
		//	IdentifierList=IdentifierList (Type=Type? "=" ExpressionList=ExpressionList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList=IdentifierList (Type=Type? "=" ExpressionList=ExpressionList)?
		public Group getGroup() { return cGroup; }
		
		//IdentifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//(Type=Type? "=" ExpressionList=ExpressionList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Type=Type?
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_0() { return cTypeTypeParserRuleCall_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_2() { return cExpressionListAssignment_1_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_2_0() { return cExpressionListExpressionListParserRuleCall_1_2_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		
		//IdentifierList:
		//	identifier+=identifier ("," identifier+=identifier)?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier+=identifier ("," identifier+=identifier)?
		public Group getGroup() { return cGroup; }
		
		//identifier+=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//("," identifier+=identifier)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//identifier+=identifier
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_1_0() { return cIdentifierIdentifierParserRuleCall_1_1_0; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	Expression+=Expression ("," Expression+=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression+=Expression ("," Expression+=Expression)?
		public Group getGroup() { return cGroup; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//("," Expression+=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeSpecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeSpecTypeSpecParserRuleCall_2_0_0 = (RuleCall)cTypeSpecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cTypeSpecAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cTypeSpecTypeSpecParserRuleCall_2_1_1_0_0 = (RuleCall)cTypeSpecAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//TypeDecl:
		//	{TypeDecl} "type" (TypeSpec=TypeSpec | "(" (TypeSpec=TypeSpec ";")? ")");
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeDecl} "type" (TypeSpec=TypeSpec | "(" (TypeSpec=TypeSpec ";")? ")")
		public Group getGroup() { return cGroup; }
		
		//{TypeDecl}
		public Action getTypeDeclAction_0() { return cTypeDeclAction_0; }
		
		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//TypeSpec=TypeSpec | "(" (TypeSpec=TypeSpec ";")? ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//TypeSpec=TypeSpec
		public Assignment getTypeSpecAssignment_2_0() { return cTypeSpecAssignment_2_0; }
		
		//TypeSpec
		public RuleCall getTypeSpecTypeSpecParserRuleCall_2_0_0() { return cTypeSpecTypeSpecParserRuleCall_2_0_0; }
		
		//"(" (TypeSpec=TypeSpec ";")? ")"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(TypeSpec=TypeSpec ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//TypeSpec=TypeSpec
		public Assignment getTypeSpecAssignment_2_1_1_0() { return cTypeSpecAssignment_2_1_1_0; }
		
		//TypeSpec
		public RuleCall getTypeSpecTypeSpecParserRuleCall_2_1_1_0_0() { return cTypeSpecTypeSpecParserRuleCall_2_1_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpec:
		//	AliasDecl | TypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//AliasDecl | TypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AliasDecl
		public RuleCall getAliasDeclParserRuleCall_0() { return cAliasDeclParserRuleCall_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_1() { return cTypeDefParserRuleCall_1; }
	}
	public class AliasDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.AliasDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//AliasDecl:
		//	identifier=identifier "=" Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier "=" Type=Type
		public Group getGroup() { return cGroup; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//Type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeDef:
		//	identifier=identifier Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier Type=Type
		public Group getGroup() { return cGroup; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//Type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVarSpecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVarSpecVarSpecParserRuleCall_2_0_0 = (RuleCall)cVarSpecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cVarSpecAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cVarSpecVarSpecParserRuleCall_2_1_1_0_0 = (RuleCall)cVarSpecAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//VarDecl:
		//	{VarDecl} "var" (VarSpec=VarSpec | "(" (VarSpec=VarSpec ";")? ")");
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDecl} "var" (VarSpec=VarSpec | "(" (VarSpec=VarSpec ";")? ")")
		public Group getGroup() { return cGroup; }
		
		//{VarDecl}
		public Action getVarDeclAction_0() { return cVarDeclAction_0; }
		
		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//VarSpec=VarSpec | "(" (VarSpec=VarSpec ";")? ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//VarSpec=VarSpec
		public Assignment getVarSpecAssignment_2_0() { return cVarSpecAssignment_2_0; }
		
		//VarSpec
		public RuleCall getVarSpecVarSpecParserRuleCall_2_0_0() { return cVarSpecVarSpecParserRuleCall_2_0_0; }
		
		//"(" (VarSpec=VarSpec ";")? ")"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(VarSpec=VarSpec ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//VarSpec=VarSpec
		public Assignment getVarSpecAssignment_2_1_1_0() { return cVarSpecAssignment_2_1_1_0; }
		
		//VarSpec
		public RuleCall getVarSpecVarSpecParserRuleCall_2_1_1_0_0() { return cVarSpecVarSpecParserRuleCall_2_1_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.VarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0_0 = (RuleCall)cTypeAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_1_1_0 = (RuleCall)cExpressionListAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_1_1_0 = (RuleCall)cExpressionListAssignment_1_1_1.eContents().get(0);
		
		//VarSpec:
		//	IdentifierList=IdentifierList (Type=Type ("=" ExpressionList=ExpressionList)? | "=" ExpressionList=ExpressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList=IdentifierList (Type=Type ("=" ExpressionList=ExpressionList)? | "=" ExpressionList=ExpressionList)
		public Group getGroup() { return cGroup; }
		
		//IdentifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//Type=Type ("=" ExpressionList=ExpressionList)? | "=" ExpressionList=ExpressionList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Type=Type ("=" ExpressionList=ExpressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Type=Type
		public Assignment getTypeAssignment_1_0_0() { return cTypeAssignment_1_0_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_0_0() { return cTypeTypeParserRuleCall_1_0_0_0; }
		
		//("=" ExpressionList=ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_0_1_1() { return cExpressionListAssignment_1_0_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_0_1_1_0; }
		
		//"=" ExpressionList=ExpressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_1_1() { return cExpressionListAssignment_1_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_1_1_0; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ShortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionListAssignment_2.eContents().get(0);
		
		//ShortVarDecl:
		//	IdentifierList=IdentifierList ":=" ExpressionList=ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList=IdentifierList ":=" ExpressionList=ExpressionList
		public Group getGroup() { return cGroup; }
		
		//IdentifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_2() { return cExpressionListAssignment_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0() { return cExpressionListExpressionListParserRuleCall_2_0; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionNameFunctionNameParserRuleCall_1_0 = (RuleCall)cFunctionNameAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_3_0 = (RuleCall)cFunctionBodyAssignment_3.eContents().get(0);
		
		//FunctionDecl:
		//	"func" FunctionName=FunctionName Signature=Signature FunctionBody=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" FunctionName=FunctionName Signature=Signature FunctionBody=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//FunctionName=FunctionName
		public Assignment getFunctionNameAssignment_1() { return cFunctionNameAssignment_1; }
		
		//FunctionName
		public RuleCall getFunctionNameFunctionNameParserRuleCall_1_0() { return cFunctionNameFunctionNameParserRuleCall_1_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_2_0() { return cSignatureSignatureParserRuleCall_2_0; }
		
		//FunctionBody=FunctionBody?
		public Assignment getFunctionBodyAssignment_3() { return cFunctionBodyAssignment_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_3_0() { return cFunctionBodyFunctionBodyParserRuleCall_3_0; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//FunctionName:
		//	identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0() { return cIdentifierIdentifierParserRuleCall_0; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionBody");
		private final Assignment cBlockAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_0 = (RuleCall)cBlockAssignment.eContents().get(0);
		
		//FunctionBody:
		//	Block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block=Block
		public Assignment getBlockAssignment() { return cBlockAssignment; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_0() { return cBlockBlockParserRuleCall_0; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReceiverAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReceiverReceiverParserRuleCall_1_0 = (RuleCall)cReceiverAssignment_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameMethodNameParserRuleCall_2_0 = (RuleCall)cMethodNameAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_4_0 = (RuleCall)cFunctionBodyAssignment_4.eContents().get(0);
		
		//MethodDecl:
		//	"func" Receiver=Receiver MethodName=MethodName Signature=Signature FunctionBody=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Receiver=Receiver MethodName=MethodName Signature=Signature FunctionBody=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Receiver=Receiver
		public Assignment getReceiverAssignment_1() { return cReceiverAssignment_1; }
		
		//Receiver
		public RuleCall getReceiverReceiverParserRuleCall_1_0() { return cReceiverReceiverParserRuleCall_1_0; }
		
		//MethodName=MethodName
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }
		
		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_2_0() { return cMethodNameMethodNameParserRuleCall_2_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_3_0() { return cSignatureSignatureParserRuleCall_3_0; }
		
		//FunctionBody=FunctionBody?
		public Assignment getFunctionBodyAssignment_4() { return cFunctionBodyAssignment_4; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_4_0() { return cFunctionBodyFunctionBodyParserRuleCall_4_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Receiver:
		//	Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cOperandNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperandNameOperandNameParserRuleCall_1_0 = (RuleCall)cOperandNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Operand:
		//	Literal=Literal | OperandName=OperandName | "(" Expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Literal=Literal | OperandName=OperandName | "(" Expression=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }
		
		//OperandName=OperandName
		public Assignment getOperandNameAssignment_1() { return cOperandNameAssignment_1; }
		
		//OperandName
		public RuleCall getOperandNameOperandNameParserRuleCall_1_0() { return cOperandNameOperandNameParserRuleCall_1_0; }
		
		//"(" Expression=Expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicLitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasicLitBasicLitParserRuleCall_0_0 = (RuleCall)cBasicLitAssignment_0.eContents().get(0);
		private final RuleCall cCompositeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	BasicLit=BasicLit | CompositeLit | FunctionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicLit=BasicLit | CompositeLit | FunctionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicLit=BasicLit
		public Assignment getBasicLitAssignment_0() { return cBasicLitAssignment_0; }
		
		//BasicLit
		public RuleCall getBasicLitBasicLitParserRuleCall_0_0() { return cBasicLitBasicLitParserRuleCall_0_0; }
		
		//CompositeLit
		public RuleCall getCompositeLitParserRuleCall_1() { return cCompositeLitParserRuleCall_1; }
		
		//FunctionLit
		public RuleCall getFunctionLitParserRuleCall_2() { return cFunctionLitParserRuleCall_2; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BasicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBasicLitAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cInt_litAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInt_litInt_litParserRuleCall_0_1_0 = (RuleCall)cInt_litAssignment_0_1.eContents().get(0);
		private final Assignment cFloat_litAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFloat_litFloat_litParserRuleCall_1_0 = (RuleCall)cFloat_litAssignment_1.eContents().get(0);
		private final Assignment cRune_litAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRune_litRune_litParserRuleCall_2_0 = (RuleCall)cRune_litAssignment_2.eContents().get(0);
		private final Assignment cString_litAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cString_litString_litParserRuleCall_3_0 = (RuleCall)cString_litAssignment_3.eContents().get(0);
		
		//BasicLit:
		//	{BasicLit} int_lit=int_lit | float_lit=float_lit | rune_lit=rune_lit | string_lit=string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//{BasicLit} int_lit=int_lit | float_lit=float_lit | rune_lit=rune_lit | string_lit=string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BasicLit} int_lit=int_lit
		public Group getGroup_0() { return cGroup_0; }
		
		//{BasicLit}
		public Action getBasicLitAction_0_0() { return cBasicLitAction_0_0; }
		
		//int_lit=int_lit
		public Assignment getInt_litAssignment_0_1() { return cInt_litAssignment_0_1; }
		
		//int_lit
		public RuleCall getInt_litInt_litParserRuleCall_0_1_0() { return cInt_litInt_litParserRuleCall_0_1_0; }
		
		//float_lit=float_lit
		public Assignment getFloat_litAssignment_1() { return cFloat_litAssignment_1; }
		
		//float_lit
		public RuleCall getFloat_litFloat_litParserRuleCall_1_0() { return cFloat_litFloat_litParserRuleCall_1_0; }
		
		//rune_lit=rune_lit
		public Assignment getRune_litAssignment_2() { return cRune_litAssignment_2; }
		
		//rune_lit
		public RuleCall getRune_litRune_litParserRuleCall_2_0() { return cRune_litRune_litParserRuleCall_2_0; }
		
		//string_lit=string_lit
		public Assignment getString_litAssignment_3() { return cString_litAssignment_3; }
		
		//string_lit
		public RuleCall getString_litString_litParserRuleCall_3_0() { return cString_litString_litParserRuleCall_3_0; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.OperandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandName:
		//	identifier | QualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier | QualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//QualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
	}
	public class QualifiedIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.QualifiedIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackageNamePackageNameParserRuleCall_0_0 = (RuleCall)cPackageNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIdentifierParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		
		//QualifiedIdent:
		//	PackageName=PackageName "." identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageName=PackageName "." identifier=identifier
		public Group getGroup() { return cGroup; }
		
		//PackageName=PackageName
		public Assignment getPackageNameAssignment_0() { return cPackageNameAssignment_0; }
		
		//PackageName
		public RuleCall getPackageNamePackageNameParserRuleCall_0_0() { return cPackageNamePackageNameParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_2_0() { return cIdentifierIdentifierParserRuleCall_2_0; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CompositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteralTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteralTypeLiteralTypeParserRuleCall_0_0 = (RuleCall)cLiteralTypeAssignment_0.eContents().get(0);
		private final Assignment cLiteralValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralValueAssignment_1.eContents().get(0);
		
		//CompositeLit:
		//	LiteralType=LiteralType LiteralValue=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralType=LiteralType LiteralValue=LiteralValue
		public Group getGroup() { return cGroup; }
		
		//LiteralType=LiteralType
		public Assignment getLiteralTypeAssignment_0() { return cLiteralTypeAssignment_0; }
		
		//LiteralType
		public RuleCall getLiteralTypeLiteralTypeParserRuleCall_0_0() { return cLiteralTypeLiteralTypeParserRuleCall_0_0; }
		
		//LiteralValue=LiteralValue
		public Assignment getLiteralValueAssignment_1() { return cLiteralValueAssignment_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_1_0() { return cLiteralValueLiteralValueParserRuleCall_1_0; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LiteralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStructTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStructTypeStructTypeParserRuleCall_0_0 = (RuleCall)cStructTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLiteralTypeLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralTypeLinhaLiteralTypeLinhaParserRuleCall_1_1_0 = (RuleCall)cLiteralTypeLinhaAssignment_1_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Assignment cMapTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMapTypeMapTypeParserRuleCall_3_0 = (RuleCall)cMapTypeAssignment_3.eContents().get(0);
		private final Assignment cTypeNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTypeNameTypeNameParserRuleCall_4_0 = (RuleCall)cTypeNameAssignment_4.eContents().get(0);
		
		//LiteralType:
		//	StructType=StructType | "[" LiteralTypeLinha=LiteralTypeLinha | ElementType=ElementType | MapType=MapType |
		//	TypeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//StructType=StructType | "[" LiteralTypeLinha=LiteralTypeLinha | ElementType=ElementType | MapType=MapType |
		//TypeName=TypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StructType=StructType
		public Assignment getStructTypeAssignment_0() { return cStructTypeAssignment_0; }
		
		//StructType
		public RuleCall getStructTypeStructTypeParserRuleCall_0_0() { return cStructTypeStructTypeParserRuleCall_0_0; }
		
		//"[" LiteralTypeLinha=LiteralTypeLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//LiteralTypeLinha=LiteralTypeLinha
		public Assignment getLiteralTypeLinhaAssignment_1_1() { return cLiteralTypeLinhaAssignment_1_1; }
		
		//LiteralTypeLinha
		public RuleCall getLiteralTypeLinhaLiteralTypeLinhaParserRuleCall_1_1_0() { return cLiteralTypeLinhaLiteralTypeLinhaParserRuleCall_1_1_0; }
		
		//ElementType=ElementType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_2_0() { return cElementTypeElementTypeParserRuleCall_2_0; }
		
		//MapType=MapType
		public Assignment getMapTypeAssignment_3() { return cMapTypeAssignment_3; }
		
		//MapType
		public RuleCall getMapTypeMapTypeParserRuleCall_3_0() { return cMapTypeMapTypeParserRuleCall_3_0; }
		
		//TypeName=TypeName
		public Assignment getTypeNameAssignment_4() { return cTypeNameAssignment_4; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_4_0() { return cTypeNameTypeNameParserRuleCall_4_0; }
	}
	public class LiteralTypeLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LiteralTypeLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArrayLengthAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArrayLengthArrayLengthParserRuleCall_0_0_0 = (RuleCall)cArrayLengthAssignment_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_2_0 = (RuleCall)cElementTypeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_1_0 = (RuleCall)cElementTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralTypeLinhaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//LiteralTypeLinha:
		//	ArrayLength=ArrayLength "]" ElementType=ElementType |
		//	"]" ElementType=ElementType | {LiteralTypeLinha} "..." "]";
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength=ArrayLength "]" ElementType=ElementType | "]" ElementType=ElementType | {LiteralTypeLinha} "..." "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayLength=ArrayLength "]" ElementType=ElementType
		public Group getGroup_0() { return cGroup_0; }
		
		//ArrayLength=ArrayLength
		public Assignment getArrayLengthAssignment_0_0() { return cArrayLengthAssignment_0_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthArrayLengthParserRuleCall_0_0_0() { return cArrayLengthArrayLengthParserRuleCall_0_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//ElementType=ElementType
		public Assignment getElementTypeAssignment_0_2() { return cElementTypeAssignment_0_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_2_0() { return cElementTypeElementTypeParserRuleCall_0_2_0; }
		
		//"]" ElementType=ElementType
		public Group getGroup_1() { return cGroup_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0() { return cRightSquareBracketKeyword_1_0; }
		
		//ElementType=ElementType
		public Assignment getElementTypeAssignment_1_1() { return cElementTypeAssignment_1_1; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_1_0() { return cElementTypeElementTypeParserRuleCall_1_1_0; }
		
		//{LiteralTypeLinha} "..." "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//{LiteralTypeLinha}
		public Action getLiteralTypeLinhaAction_2_0() { return cLiteralTypeLinhaAction_2_0; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LiteralValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementListElementListParserRuleCall_2_0_0 = (RuleCall)cElementListAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LiteralValue:
		//	{LiteralValue} "{" (ElementList=ElementList ","?)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralValue} "{" (ElementList=ElementList ","?)? "}"
		public Group getGroup() { return cGroup; }
		
		//{LiteralValue}
		public Action getLiteralValueAction_0() { return cLiteralValueAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(ElementList=ElementList ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ElementList=ElementList
		public Assignment getElementListAssignment_2_0() { return cElementListAssignment_2_0; }
		
		//ElementList
		public RuleCall getElementListElementListParserRuleCall_2_0_0() { return cElementListElementListParserRuleCall_2_0_0; }
		
		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyedElementKeyedElementParserRuleCall_0_0 = (RuleCall)cKeyedElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyedElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyedElementKeyedElementParserRuleCall_1_1_0 = (RuleCall)cKeyedElementAssignment_1_1.eContents().get(0);
		
		//ElementList:
		//	KeyedElement+=KeyedElement ("," KeyedElement+=KeyedElement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//KeyedElement+=KeyedElement ("," KeyedElement+=KeyedElement)?
		public Group getGroup() { return cGroup; }
		
		//KeyedElement+=KeyedElement
		public Assignment getKeyedElementAssignment_0() { return cKeyedElementAssignment_0; }
		
		//KeyedElement
		public RuleCall getKeyedElementKeyedElementParserRuleCall_0_0() { return cKeyedElementKeyedElementParserRuleCall_0_0; }
		
		//("," KeyedElement+=KeyedElement)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//KeyedElement+=KeyedElement
		public Assignment getKeyedElementAssignment_1_1() { return cKeyedElementAssignment_1_1; }
		
		//KeyedElement
		public RuleCall getKeyedElementKeyedElementParserRuleCall_1_1_0() { return cKeyedElementKeyedElementParserRuleCall_1_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cLiteralValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralValueAssignment_1.eContents().get(0);
		
		//Element:
		//	Expression=Expression | LiteralValue=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression=Expression | LiteralValue=LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//LiteralValue=LiteralValue
		public Assignment getLiteralValueAssignment_1() { return cLiteralValueAssignment_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_1_0() { return cLiteralValueLiteralValueParserRuleCall_1_0; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.KeyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyKeyParserRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//KeyedElement:
		//	(Key=Key ":")? Element=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//(Key=Key ":")? Element=Element
		public Group getGroup() { return cGroup; }
		
		//(Key=Key ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//Key=Key
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//Key
		public RuleCall getKeyKeyParserRuleCall_0_0_0() { return cKeyKeyParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//Element=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFieldNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFieldNameFieldNameParserRuleCall_0_0 = (RuleCall)cFieldNameAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cLiteralValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_2_0 = (RuleCall)cLiteralValueAssignment_2.eContents().get(0);
		
		//Key:
		//	FieldName=FieldName | Expression=Expression | LiteralValue=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//FieldName=FieldName | Expression=Expression | LiteralValue=LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FieldName=FieldName
		public Assignment getFieldNameAssignment_0() { return cFieldNameAssignment_0; }
		
		//FieldName
		public RuleCall getFieldNameFieldNameParserRuleCall_0_0() { return cFieldNameFieldNameParserRuleCall_0_0; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//LiteralValue=LiteralValue
		public Assignment getLiteralValueAssignment_2() { return cLiteralValueAssignment_2; }
		
		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_2_0() { return cLiteralValueLiteralValueParserRuleCall_2_0; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FieldName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//FieldName:
		//	identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0() { return cIdentifierIdentifierParserRuleCall_0; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_1_0 = (RuleCall)cSignatureAssignment_1.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_2_0 = (RuleCall)cFunctionBodyAssignment_2.eContents().get(0);
		
		//FunctionLit:
		//	"func" Signature=Signature FunctionBody=FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature=Signature FunctionBody=FunctionBody
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_0() { return cSignatureSignatureParserRuleCall_1_0; }
		
		//FunctionBody=FunctionBody
		public Assignment getFunctionBodyAssignment_2() { return cFunctionBodyAssignment_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_2_0() { return cFunctionBodyFunctionBodyParserRuleCall_2_0; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperandAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperandOperandParserRuleCall_0_0_0 = (RuleCall)cOperandAssignment_0_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cConversionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConversionConversionParserRuleCall_1_0_0 = (RuleCall)cConversionAssignment_1_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMethodExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMethodExprMethodExprParserRuleCall_2_0_0 = (RuleCall)cMethodExprAssignment_2_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_2_1.eContents().get(0);
		
		//PrimaryExpr:
		//	Operand=Operand PrimaryExprLinha=PrimaryExprLinha | Conversion=Conversion PrimaryExprLinha=PrimaryExprLinha |
		//	MethodExpr=MethodExpr PrimaryExprLinha=PrimaryExprLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//Operand=Operand PrimaryExprLinha=PrimaryExprLinha | Conversion=Conversion PrimaryExprLinha=PrimaryExprLinha |
		//MethodExpr=MethodExpr PrimaryExprLinha=PrimaryExprLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operand=Operand PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//Operand=Operand
		public Assignment getOperandAssignment_0_0() { return cOperandAssignment_0_0; }
		
		//Operand
		public RuleCall getOperandOperandParserRuleCall_0_0_0() { return cOperandOperandParserRuleCall_0_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_0_1() { return cPrimaryExprLinhaAssignment_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0; }
		
		//Conversion=Conversion PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//Conversion=Conversion
		public Assignment getConversionAssignment_1_0() { return cConversionAssignment_1_0; }
		
		//Conversion
		public RuleCall getConversionConversionParserRuleCall_1_0_0() { return cConversionConversionParserRuleCall_1_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_1() { return cPrimaryExprLinhaAssignment_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0; }
		
		//MethodExpr=MethodExpr PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_2() { return cGroup_2; }
		
		//MethodExpr=MethodExpr
		public Assignment getMethodExprAssignment_2_0() { return cMethodExprAssignment_2_0; }
		
		//MethodExpr
		public RuleCall getMethodExprMethodExprParserRuleCall_2_0_0() { return cMethodExprMethodExprParserRuleCall_2_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_2_1() { return cPrimaryExprLinhaAssignment_2_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0; }
	}
	public class PrimaryExprLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PrimaryExprLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgumentsArgumentsParserRuleCall_0_0_0 = (RuleCall)cArgumentsAssignment_0_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPontoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPontoPontoParserRuleCall_1_1_0 = (RuleCall)cPontoAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCochetesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCochetesCochetesParserRuleCall_2_1_0 = (RuleCall)cCochetesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrimaryExprLinhaAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//PrimaryExprLinha:
		//	Arguments=Arguments PrimaryExprLinha=PrimaryExprLinha |
		//	"." ponto=ponto |
		//	"[" cochetes=cochetes | {PrimaryExprLinha} ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//Arguments=Arguments PrimaryExprLinha=PrimaryExprLinha | "." ponto=ponto | "[" cochetes=cochetes | {PrimaryExprLinha}
		//ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Arguments=Arguments PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//Arguments=Arguments
		public Assignment getArgumentsAssignment_0_0() { return cArgumentsAssignment_0_0; }
		
		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_0_0_0() { return cArgumentsArgumentsParserRuleCall_0_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_0_1() { return cPrimaryExprLinhaAssignment_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0; }
		
		//"." ponto=ponto
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ponto=ponto
		public Assignment getPontoAssignment_1_1() { return cPontoAssignment_1_1; }
		
		//ponto
		public RuleCall getPontoPontoParserRuleCall_1_1_0() { return cPontoPontoParserRuleCall_1_1_0; }
		
		//"[" cochetes=cochetes
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cochetes=cochetes
		public Assignment getCochetesAssignment_2_1() { return cCochetesAssignment_2_1; }
		
		//cochetes
		public RuleCall getCochetesCochetesParserRuleCall_2_1_0() { return cCochetesCochetesParserRuleCall_2_1_0; }
		
		//{PrimaryExprLinha} ANY_OTHER
		public Group getGroup_3() { return cGroup_3; }
		
		//{PrimaryExprLinha}
		public Action getPrimaryExprLinhaAction_3_0() { return cPrimaryExprLinhaAction_3_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_3_1() { return cANY_OTHERTerminalRuleCall_3_1; }
	}
	public class PontoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ponto");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSelectorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_0_0 = (RuleCall)cSelectorAssignment_0_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssertionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeAssertionTypeAssertionParserRuleCall_1_0_0 = (RuleCall)cTypeAssertionAssignment_1_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_1.eContents().get(0);
		
		//ponto:
		//	Selector=Selector PrimaryExprLinha=PrimaryExprLinha | TypeAssertion=TypeAssertion PrimaryExprLinha=PrimaryExprLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//Selector=Selector PrimaryExprLinha=PrimaryExprLinha | TypeAssertion=TypeAssertion PrimaryExprLinha=PrimaryExprLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Selector=Selector PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//Selector=Selector
		public Assignment getSelectorAssignment_0_0() { return cSelectorAssignment_0_0; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_0_0_0() { return cSelectorSelectorParserRuleCall_0_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_0_1() { return cPrimaryExprLinhaAssignment_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0; }
		
		//TypeAssertion=TypeAssertion PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//TypeAssertion=TypeAssertion
		public Assignment getTypeAssertionAssignment_1_0() { return cTypeAssertionAssignment_1_0; }
		
		//TypeAssertion
		public RuleCall getTypeAssertionTypeAssertionParserRuleCall_1_0_0() { return cTypeAssertionTypeAssertionParserRuleCall_1_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_1() { return cPrimaryExprLinhaAssignment_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0; }
	}
	public class CochetesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.cochetes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIndexAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIndexIndexParserRuleCall_0_0_0 = (RuleCall)cIndexAssignment_0_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSliceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSliceSliceParserRuleCall_1_0_0 = (RuleCall)cSliceAssignment_1_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_1.eContents().get(0);
		
		//cochetes:
		//	Index=Index PrimaryExprLinha=PrimaryExprLinha | Slice=Slice PrimaryExprLinha=PrimaryExprLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//Index=Index PrimaryExprLinha=PrimaryExprLinha | Slice=Slice PrimaryExprLinha=PrimaryExprLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Index=Index PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//Index=Index
		public Assignment getIndexAssignment_0_0() { return cIndexAssignment_0_0; }
		
		//Index
		public RuleCall getIndexIndexParserRuleCall_0_0_0() { return cIndexIndexParserRuleCall_0_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_0_1() { return cPrimaryExprLinhaAssignment_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0; }
		
		//Slice=Slice PrimaryExprLinha=PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//Slice=Slice
		public Assignment getSliceAssignment_1_0() { return cSliceAssignment_1_0; }
		
		//Slice
		public RuleCall getSliceSliceParserRuleCall_1_0_0() { return cSliceSliceParserRuleCall_1_0_0; }
		
		//PrimaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_1() { return cPrimaryExprLinhaAssignment_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Selector");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//Selector:
		//	identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0() { return cIdentifierIdentifierParserRuleCall_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Index");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIndexAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSliceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSliceSliceParserRuleCall_1_0 = (RuleCall)cSliceAssignment_1.eContents().get(0);
		
		//Index:
		//	{Index} "]" | Slice=Slice;
		@Override public ParserRule getRule() { return rule; }
		
		//{Index} "]" | Slice=Slice
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Index} "]"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Index}
		public Action getIndexAction_0_0() { return cIndexAction_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//Slice=Slice
		public Assignment getSliceAssignment_1() { return cSliceAssignment_1; }
		
		//Slice
		public RuleCall getSliceSliceParserRuleCall_1_0() { return cSliceSliceParserRuleCall_1_0; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDecimalsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecimalsDecimalsParserRuleCall_1_0 = (RuleCall)cDecimalsAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDecimalsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDecimalsDecimalsParserRuleCall_3_0 = (RuleCall)cDecimalsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Slice:
		//	":" decimals+=decimals? ":" decimals+=decimals "]";
		@Override public ParserRule getRule() { return rule; }
		
		//":" decimals+=decimals? ":" decimals+=decimals "]"
		public Group getGroup() { return cGroup; }
		
		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//decimals+=decimals?
		public Assignment getDecimalsAssignment_1() { return cDecimalsAssignment_1; }
		
		//decimals
		public RuleCall getDecimalsDecimalsParserRuleCall_1_0() { return cDecimalsDecimalsParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//decimals+=decimals
		public Assignment getDecimalsAssignment_3() { return cDecimalsAssignment_3; }
		
		//decimals
		public RuleCall getDecimalsDecimalsParserRuleCall_3_0() { return cDecimalsDecimalsParserRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeAssertion:
		//	"(" Type=Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Type=Type ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cExpressionListAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0_0_0 = (RuleCall)cExpressionListAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0_1_1_1_0 = (RuleCall)cExpressionListAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//	{Arguments} "(" ((ExpressionList=ExpressionList | Type=Type ("," ExpressionList=ExpressionList)?) "..."? ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Arguments} "(" ((ExpressionList=ExpressionList | Type=Type ("," ExpressionList=ExpressionList)?) "..."? ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((ExpressionList=ExpressionList | Type=Type ("," ExpressionList=ExpressionList)?) "..."? ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ExpressionList=ExpressionList | Type=Type ("," ExpressionList=ExpressionList)?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_2_0_0() { return cExpressionListAssignment_2_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0_0_0() { return cExpressionListExpressionListParserRuleCall_2_0_0_0; }
		
		//Type=Type ("," ExpressionList=ExpressionList)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//Type=Type
		public Assignment getTypeAssignment_2_0_1_0() { return cTypeAssignment_2_0_1_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0_1_0_0() { return cTypeTypeParserRuleCall_2_0_1_0_0; }
		
		//("," ExpressionList=ExpressionList)?
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_2_0_1_1_1() { return cExpressionListAssignment_2_0_1_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0_1_1_1_0() { return cExpressionListExpressionListParserRuleCall_2_0_1_1_1_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//","?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceiverTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReceiverTypeReceiverTypeParserRuleCall_0_0 = (RuleCall)cReceiverTypeAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameMethodNameParserRuleCall_2_0 = (RuleCall)cMethodNameAssignment_2.eContents().get(0);
		
		//MethodExpr:
		//	ReceiverType=ReceiverType "." MethodName=MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//ReceiverType=ReceiverType "." MethodName=MethodName
		public Group getGroup() { return cGroup; }
		
		//ReceiverType=ReceiverType
		public Assignment getReceiverTypeAssignment_0() { return cReceiverTypeAssignment_0; }
		
		//ReceiverType
		public RuleCall getReceiverTypeReceiverTypeParserRuleCall_0_0() { return cReceiverTypeReceiverTypeParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//MethodName=MethodName
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }
		
		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_2_0() { return cMethodNameMethodNameParserRuleCall_2_0; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ReceiverType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ReceiverType:
		//	Type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryExprUnaryExprParserRuleCall_0_0 = (RuleCall)cUnaryExprAssignment_0.eContents().get(0);
		private final Assignment cExpressionLinhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLinhaExpressionLinhaParserRuleCall_1_0 = (RuleCall)cExpressionLinhaAssignment_1.eContents().get(0);
		
		//Expression:
		//	UnaryExpr=UnaryExpr ExpressionLinha=ExpressionLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr=UnaryExpr ExpressionLinha=ExpressionLinha
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr=UnaryExpr
		public Assignment getUnaryExprAssignment_0() { return cUnaryExprAssignment_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprUnaryExprParserRuleCall_0_0() { return cUnaryExprUnaryExprParserRuleCall_0_0; }
		
		//ExpressionLinha=ExpressionLinha
		public Assignment getExpressionLinhaAssignment_1() { return cExpressionLinhaAssignment_1; }
		
		//ExpressionLinha
		public RuleCall getExpressionLinhaExpressionLinhaParserRuleCall_1_0() { return cExpressionLinhaExpressionLinhaParserRuleCall_1_0; }
	}
	public class ExpressionLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExpressionLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBinary_opAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBinary_opBinary_opParserRuleCall_0_0_0 = (RuleCall)cBinary_opAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionLinhaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionLinhaExpressionLinhaParserRuleCall_0_2_0 = (RuleCall)cExpressionLinhaAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionLinhaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExpressionLinha:
		//	binary_op=binary_op Expression=Expression ExpressionLinha=ExpressionLinha | {ExpressionLinha} ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//binary_op=binary_op Expression=Expression ExpressionLinha=ExpressionLinha | {ExpressionLinha} ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//binary_op=binary_op Expression=Expression ExpressionLinha=ExpressionLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//binary_op=binary_op
		public Assignment getBinary_opAssignment_0_0() { return cBinary_opAssignment_0_0; }
		
		//binary_op
		public RuleCall getBinary_opBinary_opParserRuleCall_0_0_0() { return cBinary_opBinary_opParserRuleCall_0_0_0; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//ExpressionLinha=ExpressionLinha
		public Assignment getExpressionLinhaAssignment_0_2() { return cExpressionLinhaAssignment_0_2; }
		
		//ExpressionLinha
		public RuleCall getExpressionLinhaExpressionLinhaParserRuleCall_0_2_0() { return cExpressionLinhaExpressionLinhaParserRuleCall_0_2_0; }
		
		//{ExpressionLinha} ANY_OTHER
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionLinha}
		public Action getExpressionLinhaAction_1_0() { return cExpressionLinhaAction_1_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1_1() { return cANY_OTHERTerminalRuleCall_1_1; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimaryExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExprPrimaryExprParserRuleCall_0_0 = (RuleCall)cPrimaryExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnary_opAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnary_opUnary_opParserRuleCall_1_0_0 = (RuleCall)cUnary_opAssignment_1_0.eContents().get(0);
		private final Assignment cUnaryExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryExprUnaryExprParserRuleCall_1_1_0 = (RuleCall)cUnaryExprAssignment_1_1.eContents().get(0);
		
		//UnaryExpr:
		//	PrimaryExpr=PrimaryExpr | unary_op=unary_op UnaryExpr=UnaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr=PrimaryExpr | unary_op=unary_op UnaryExpr=UnaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpr=PrimaryExpr
		public Assignment getPrimaryExprAssignment_0() { return cPrimaryExprAssignment_0; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprPrimaryExprParserRuleCall_0_0() { return cPrimaryExprPrimaryExprParserRuleCall_0_0; }
		
		//unary_op=unary_op UnaryExpr=UnaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//unary_op=unary_op
		public Assignment getUnary_opAssignment_1_0() { return cUnary_opAssignment_1_0; }
		
		//unary_op
		public RuleCall getUnary_opUnary_opParserRuleCall_1_0_0() { return cUnary_opUnary_opParserRuleCall_1_0_0; }
		
		//UnaryExpr=UnaryExpr
		public Assignment getUnaryExprAssignment_1_1() { return cUnaryExprAssignment_1_1; }
		
		//UnaryExpr
		public RuleCall getUnaryExprUnaryExprParserRuleCall_1_1_0() { return cUnaryExprUnaryExprParserRuleCall_1_1_0; }
	}
	public class Binary_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.binary_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBinary_opAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBinary_opAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRel_opAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRel_opRel_opParserRuleCall_2_0 = (RuleCall)cRel_opAssignment_2.eContents().get(0);
		private final Assignment cAdd_opAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAdd_opAdd_opParserRuleCall_3_0 = (RuleCall)cAdd_opAssignment_3.eContents().get(0);
		private final Assignment cMul_opAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMul_opMul_opParserRuleCall_4_0 = (RuleCall)cMul_opAssignment_4.eContents().get(0);
		
		//binary_op:
		//	{binary_op} "||" | {binary_op} "&&" | rel_op=rel_op | add_op=add_op | mul_op=mul_op;
		@Override public ParserRule getRule() { return rule; }
		
		//{binary_op} "||" | {binary_op} "&&" | rel_op=rel_op | add_op=add_op | mul_op=mul_op
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{binary_op} "||"
		public Group getGroup_0() { return cGroup_0; }
		
		//{binary_op}
		public Action getBinary_opAction_0_0() { return cBinary_opAction_0_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0_1() { return cVerticalLineVerticalLineKeyword_0_1; }
		
		//{binary_op} "&&"
		public Group getGroup_1() { return cGroup_1; }
		
		//{binary_op}
		public Action getBinary_opAction_1_0() { return cBinary_opAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//rel_op=rel_op
		public Assignment getRel_opAssignment_2() { return cRel_opAssignment_2; }
		
		//rel_op
		public RuleCall getRel_opRel_opParserRuleCall_2_0() { return cRel_opRel_opParserRuleCall_2_0; }
		
		//add_op=add_op
		public Assignment getAdd_opAssignment_3() { return cAdd_opAssignment_3; }
		
		//add_op
		public RuleCall getAdd_opAdd_opParserRuleCall_3_0() { return cAdd_opAdd_opParserRuleCall_3_0; }
		
		//mul_op=mul_op
		public Assignment getMul_opAssignment_4() { return cMul_opAssignment_4; }
		
		//mul_op
		public RuleCall getMul_opMul_opParserRuleCall_4_0() { return cMul_opMul_opParserRuleCall_4_0; }
	}
	public class Rel_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.rel_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//rel_op:
		//	"==" | "!=" | "<" | "<=" | ">" | ">=";
		@Override public ParserRule getRule() { return rule; }
		
		//"==" | "!=" | "<" | "<=" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}
	public class Add_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.add_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModifierLetterCircumflexAccentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//add_op:
		//	"+" | "-" | "|" | "ˆ";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "|" | "ˆ"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//"ˆ"
		public Keyword getModifierLetterCircumflexAccentKeyword_3() { return cModifierLetterCircumflexAccentKeyword_3; }
	}
	public class Mul_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.mul_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAmpersandCircumflexAccentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//mul_op:
		//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
		@Override public ParserRule getRule() { return rule; }
		
		//"*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_3() { return cLessThanSignLessThanSignKeyword_3; }
		
		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_4() { return cGreaterThanSignGreaterThanSignKeyword_4; }
		
		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//"&^"
		public Keyword getAmpersandCircumflexAccentKeyword_6() { return cAmpersandCircumflexAccentKeyword_6; }
	}
	public class Unary_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.unary_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignHyphenMinusKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//unary_op:
		//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "!" | "^" | "*" | "&" | "<-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_3() { return cCircumflexAccentKeyword_3; }
		
		//"*"
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }
		
		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_6() { return cLessThanSignHyphenMinusKeyword_6; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conversion:
		//	Type=Type "(" Expression=Expression ","? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Type=Type "(" Expression=Expression ","? ")"
		public Group getGroup() { return cGroup; }
		
		//Type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cLabeledStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLabeledStmtLabeledStmtParserRuleCall_1_0 = (RuleCall)cLabeledStmtAssignment_1.eContents().get(0);
		private final Assignment cSimpleStmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_2_0 = (RuleCall)cSimpleStmtAssignment_2.eContents().get(0);
		private final Assignment cGoStmtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGoStmtGoStmtParserRuleCall_3_0 = (RuleCall)cGoStmtAssignment_3.eContents().get(0);
		private final Assignment cReturnStmtAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cReturnStmtReturnStmtParserRuleCall_4_0 = (RuleCall)cReturnStmtAssignment_4.eContents().get(0);
		private final Assignment cBreakStmtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBreakStmtBreakStmtParserRuleCall_5_0 = (RuleCall)cBreakStmtAssignment_5.eContents().get(0);
		private final Assignment cContinueStmtAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cContinueStmtContinueStmtParserRuleCall_6_0 = (RuleCall)cContinueStmtAssignment_6.eContents().get(0);
		private final Assignment cGotoStmtAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGotoStmtGotoStmtParserRuleCall_7_0 = (RuleCall)cGotoStmtAssignment_7.eContents().get(0);
		private final Assignment cFallthroughStmtAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cFallthroughStmtFallthroughStmtParserRuleCall_8_0 = (RuleCall)cFallthroughStmtAssignment_8.eContents().get(0);
		private final Assignment cBlockAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cBlockBlockParserRuleCall_9_0 = (RuleCall)cBlockAssignment_9.eContents().get(0);
		private final Assignment cIfStmtAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cIfStmtIfStmtParserRuleCall_10_0 = (RuleCall)cIfStmtAssignment_10.eContents().get(0);
		private final Assignment cSwitchStmtAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cSwitchStmtSwitchStmtParserRuleCall_11_0 = (RuleCall)cSwitchStmtAssignment_11.eContents().get(0);
		private final Assignment cSelectStmtAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cSelectStmtSelectStmtParserRuleCall_12_0 = (RuleCall)cSelectStmtAssignment_12.eContents().get(0);
		private final Assignment cForStmtAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cForStmtForStmtParserRuleCall_13_0 = (RuleCall)cForStmtAssignment_13.eContents().get(0);
		private final Assignment cDeferStmtAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cDeferStmtDeferStmtParserRuleCall_14_0 = (RuleCall)cDeferStmtAssignment_14.eContents().get(0);
		
		//Statement:
		//	Declaration=Declaration | LabeledStmt=LabeledStmt | SimpleStmt=SimpleStmt | GoStmt=GoStmt | ReturnStmt=ReturnStmt |
		//	BreakStmt=BreakStmt | ContinueStmt=ContinueStmt | GotoStmt=GotoStmt | FallthroughStmt=FallthroughStmt | Block=Block |
		//	IfStmt=IfStmt | SwitchStmt=SwitchStmt | SelectStmt=SelectStmt | ForStmt=ForStmt | DeferStmt=DeferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration=Declaration | LabeledStmt=LabeledStmt | SimpleStmt=SimpleStmt | GoStmt=GoStmt | ReturnStmt=ReturnStmt |
		//BreakStmt=BreakStmt | ContinueStmt=ContinueStmt | GotoStmt=GotoStmt | FallthroughStmt=FallthroughStmt | Block=Block |
		//IfStmt=IfStmt | SwitchStmt=SwitchStmt | SelectStmt=SelectStmt | ForStmt=ForStmt | DeferStmt=DeferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//LabeledStmt=LabeledStmt
		public Assignment getLabeledStmtAssignment_1() { return cLabeledStmtAssignment_1; }
		
		//LabeledStmt
		public RuleCall getLabeledStmtLabeledStmtParserRuleCall_1_0() { return cLabeledStmtLabeledStmtParserRuleCall_1_0; }
		
		//SimpleStmt=SimpleStmt
		public Assignment getSimpleStmtAssignment_2() { return cSimpleStmtAssignment_2; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_2_0() { return cSimpleStmtSimpleStmtParserRuleCall_2_0; }
		
		//GoStmt=GoStmt
		public Assignment getGoStmtAssignment_3() { return cGoStmtAssignment_3; }
		
		//GoStmt
		public RuleCall getGoStmtGoStmtParserRuleCall_3_0() { return cGoStmtGoStmtParserRuleCall_3_0; }
		
		//ReturnStmt=ReturnStmt
		public Assignment getReturnStmtAssignment_4() { return cReturnStmtAssignment_4; }
		
		//ReturnStmt
		public RuleCall getReturnStmtReturnStmtParserRuleCall_4_0() { return cReturnStmtReturnStmtParserRuleCall_4_0; }
		
		//BreakStmt=BreakStmt
		public Assignment getBreakStmtAssignment_5() { return cBreakStmtAssignment_5; }
		
		//BreakStmt
		public RuleCall getBreakStmtBreakStmtParserRuleCall_5_0() { return cBreakStmtBreakStmtParserRuleCall_5_0; }
		
		//ContinueStmt=ContinueStmt
		public Assignment getContinueStmtAssignment_6() { return cContinueStmtAssignment_6; }
		
		//ContinueStmt
		public RuleCall getContinueStmtContinueStmtParserRuleCall_6_0() { return cContinueStmtContinueStmtParserRuleCall_6_0; }
		
		//GotoStmt=GotoStmt
		public Assignment getGotoStmtAssignment_7() { return cGotoStmtAssignment_7; }
		
		//GotoStmt
		public RuleCall getGotoStmtGotoStmtParserRuleCall_7_0() { return cGotoStmtGotoStmtParserRuleCall_7_0; }
		
		//FallthroughStmt=FallthroughStmt
		public Assignment getFallthroughStmtAssignment_8() { return cFallthroughStmtAssignment_8; }
		
		//FallthroughStmt
		public RuleCall getFallthroughStmtFallthroughStmtParserRuleCall_8_0() { return cFallthroughStmtFallthroughStmtParserRuleCall_8_0; }
		
		//Block=Block
		public Assignment getBlockAssignment_9() { return cBlockAssignment_9; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_9_0() { return cBlockBlockParserRuleCall_9_0; }
		
		//IfStmt=IfStmt
		public Assignment getIfStmtAssignment_10() { return cIfStmtAssignment_10; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_10_0() { return cIfStmtIfStmtParserRuleCall_10_0; }
		
		//SwitchStmt=SwitchStmt
		public Assignment getSwitchStmtAssignment_11() { return cSwitchStmtAssignment_11; }
		
		//SwitchStmt
		public RuleCall getSwitchStmtSwitchStmtParserRuleCall_11_0() { return cSwitchStmtSwitchStmtParserRuleCall_11_0; }
		
		//SelectStmt=SelectStmt
		public Assignment getSelectStmtAssignment_12() { return cSelectStmtAssignment_12; }
		
		//SelectStmt
		public RuleCall getSelectStmtSelectStmtParserRuleCall_12_0() { return cSelectStmtSelectStmtParserRuleCall_12_0; }
		
		//ForStmt=ForStmt
		public Assignment getForStmtAssignment_13() { return cForStmtAssignment_13; }
		
		//ForStmt
		public RuleCall getForStmtForStmtParserRuleCall_13_0() { return cForStmtForStmtParserRuleCall_13_0; }
		
		//DeferStmt=DeferStmt
		public Assignment getDeferStmtAssignment_14() { return cDeferStmtAssignment_14; }
		
		//DeferStmt
		public RuleCall getDeferStmtDeferStmtParserRuleCall_14_0() { return cDeferStmtDeferStmtParserRuleCall_14_0; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEmptyStmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyStmtEmptyStmtParserRuleCall_0_0 = (RuleCall)cEmptyStmtAssignment_0.eContents().get(0);
		private final Assignment cExpressionStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionStmtExpressionStmtParserRuleCall_1_0 = (RuleCall)cExpressionStmtAssignment_1.eContents().get(0);
		private final Assignment cSendStmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSendStmtSendStmtParserRuleCall_2_0 = (RuleCall)cSendStmtAssignment_2.eContents().get(0);
		private final Assignment cIncDecStmtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIncDecStmtIncDecStmtParserRuleCall_3_0 = (RuleCall)cIncDecStmtAssignment_3.eContents().get(0);
		private final Assignment cAssignmentAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAssignmentAssignmentParserRuleCall_4_0 = (RuleCall)cAssignmentAssignment_4.eContents().get(0);
		private final Assignment cShortVarDeclAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cShortVarDeclShortVarDeclParserRuleCall_5_0 = (RuleCall)cShortVarDeclAssignment_5.eContents().get(0);
		
		//SimpleStmt:
		//	EmptyStmt=EmptyStmt | ExpressionStmt=ExpressionStmt | SendStmt=SendStmt | IncDecStmt=IncDecStmt |
		//	Assignment=Assignment | ShortVarDecl=ShortVarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyStmt=EmptyStmt | ExpressionStmt=ExpressionStmt | SendStmt=SendStmt | IncDecStmt=IncDecStmt | Assignment=Assignment
		//| ShortVarDecl=ShortVarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyStmt=EmptyStmt
		public Assignment getEmptyStmtAssignment_0() { return cEmptyStmtAssignment_0; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtEmptyStmtParserRuleCall_0_0() { return cEmptyStmtEmptyStmtParserRuleCall_0_0; }
		
		//ExpressionStmt=ExpressionStmt
		public Assignment getExpressionStmtAssignment_1() { return cExpressionStmtAssignment_1; }
		
		//ExpressionStmt
		public RuleCall getExpressionStmtExpressionStmtParserRuleCall_1_0() { return cExpressionStmtExpressionStmtParserRuleCall_1_0; }
		
		//SendStmt=SendStmt
		public Assignment getSendStmtAssignment_2() { return cSendStmtAssignment_2; }
		
		//SendStmt
		public RuleCall getSendStmtSendStmtParserRuleCall_2_0() { return cSendStmtSendStmtParserRuleCall_2_0; }
		
		//IncDecStmt=IncDecStmt
		public Assignment getIncDecStmtAssignment_3() { return cIncDecStmtAssignment_3; }
		
		//IncDecStmt
		public RuleCall getIncDecStmtIncDecStmtParserRuleCall_3_0() { return cIncDecStmtIncDecStmtParserRuleCall_3_0; }
		
		//Assignment=Assignment
		public Assignment getAssignmentAssignment_4() { return cAssignmentAssignment_4; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_4_0() { return cAssignmentAssignmentParserRuleCall_4_0; }
		
		//ShortVarDecl=ShortVarDecl
		public Assignment getShortVarDeclAssignment_5() { return cShortVarDeclAssignment_5; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclShortVarDeclParserRuleCall_5_0() { return cShortVarDeclShortVarDeclParserRuleCall_5_0; }
	}
	public class EmptyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.EmptyStmt");
		private final RuleCall cANY_OTHERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EmptyStmt:
		//	ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall() { return cANY_OTHERTerminalRuleCall; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LabeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//LabeledStmt:
		//	Label=Label ":" Statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//Label=Label ":" Statement=Statement
		public Group getGroup() { return cGroup; }
		
		//Label=Label
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_0_0() { return cLabelLabelParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Label");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//Label:
		//	identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0() { return cIdentifierIdentifierParserRuleCall_0; }
	}
	public class ExpressionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExpressionStmt");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ExpressionStmt:
		//	Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class SendStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SendStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChannelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChannelChannelParserRuleCall_0_0 = (RuleCall)cChannelAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SendStmt:
		//	Channel=Channel "<-" Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Channel=Channel "<-" Expression=Expression
		public Group getGroup() { return cGroup; }
		
		//Channel=Channel
		public Assignment getChannelAssignment_0() { return cChannelAssignment_0; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_0_0() { return cChannelChannelParserRuleCall_0_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Channel");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Channel:
		//	Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class IncDecStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IncDecStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//IncDecStmt:
		//	Expression=Expression ("++" | "--");
		@Override public ParserRule getRule() { return rule; }
		
		//Expression=Expression ("++" | "--")
		public Group getGroup() { return cGroup; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//"++" | "--"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionListExpressionListParserRuleCall_0_0 = (RuleCall)cExpressionListAssignment_0.eContents().get(0);
		private final Assignment cAssign_opAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssign_opAssign_opParserRuleCall_1_0 = (RuleCall)cAssign_opAssignment_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionListAssignment_2.eContents().get(0);
		
		//Assignment:
		//	ExpressionList+=ExpressionList assign_op=assign_op ExpressionList+=ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionList+=ExpressionList assign_op=assign_op ExpressionList+=ExpressionList
		public Group getGroup() { return cGroup; }
		
		//ExpressionList+=ExpressionList
		public Assignment getExpressionListAssignment_0() { return cExpressionListAssignment_0; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_0_0() { return cExpressionListExpressionListParserRuleCall_0_0; }
		
		//assign_op=assign_op
		public Assignment getAssign_opAssignment_1() { return cAssign_opAssignment_1; }
		
		//assign_op
		public RuleCall getAssign_opAssign_opParserRuleCall_1_0() { return cAssign_opAssign_opParserRuleCall_1_0; }
		
		//ExpressionList+=ExpressionList
		public Assignment getExpressionListAssignment_2() { return cExpressionListAssignment_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0() { return cExpressionListExpressionListParserRuleCall_2_0; }
	}
	public class Assign_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.assign_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAdd_opParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMul_opParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//assign_op:
		//	(add_op | mul_op)? "=";
		@Override public ParserRule getRule() { return rule; }
		
		//(add_op | mul_op)? "="
		public Group getGroup() { return cGroup; }
		
		//(add_op | mul_op)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//add_op
		public RuleCall getAdd_opParserRuleCall_0_0() { return cAdd_opParserRuleCall_0_0; }
		
		//mul_op
		public RuleCall getMul_opParserRuleCall_0_1() { return cMul_opParserRuleCall_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSimpleStmtAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_1_0_0 = (RuleCall)cSimpleStmtAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cIfStmtAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cIfStmtIfStmtParserRuleCall_4_1_0_0 = (RuleCall)cIfStmtAssignment_4_1_0.eContents().get(0);
		private final Assignment cBlockAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_4_1_1_0 = (RuleCall)cBlockAssignment_4_1_1.eContents().get(0);
		
		//IfStmt:
		//	"if" (SimpleStmt=SimpleStmt ";")? Expression=Expression Block+=Block ("else" (IfStmt=IfStmt | Block+=Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" (SimpleStmt=SimpleStmt ";")? Expression=Expression Block+=Block ("else" (IfStmt=IfStmt | Block+=Block))?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(SimpleStmt=SimpleStmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt=SimpleStmt
		public Assignment getSimpleStmtAssignment_1_0() { return cSimpleStmtAssignment_1_0; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_1_0_0() { return cSimpleStmtSimpleStmtParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//Block+=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
		
		//("else" (IfStmt=IfStmt | Block+=Block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//IfStmt=IfStmt | Block+=Block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//IfStmt=IfStmt
		public Assignment getIfStmtAssignment_4_1_0() { return cIfStmtAssignment_4_1_0; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_4_1_0_0() { return cIfStmtIfStmtParserRuleCall_4_1_0_0; }
		
		//Block+=Block
		public Assignment getBlockAssignment_4_1_1() { return cBlockAssignment_4_1_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_1_1_0() { return cBlockBlockParserRuleCall_4_1_1_0; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSwitch_stmt_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_2_0 = (RuleCall)cSwitch_stmt_linhaAssignment_2.eContents().get(0);
		
		//SwitchStmt:
		//	"switch" (SimpleStmt ";")? switch_stmt_linha=switch_stmt_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" (SimpleStmt ";")? switch_stmt_linha=switch_stmt_linha
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(SimpleStmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//switch_stmt_linha=switch_stmt_linha
		public Assignment getSwitch_stmt_linhaAssignment_2() { return cSwitch_stmt_linhaAssignment_2; }
		
		//switch_stmt_linha
		public RuleCall getSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_2_0() { return cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_2_0; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprSwitchCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprSwitchCaseExprSwitchCaseParserRuleCall_0_0 = (RuleCall)cExprSwitchCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//ExprCaseClause:
		//	ExprSwitchCase=ExprSwitchCase ":" StatementList=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSwitchCase=ExprSwitchCase ":" StatementList=StatementList
		public Group getGroup() { return cGroup; }
		
		//ExprSwitchCase=ExprSwitchCase
		public Assignment getExprSwitchCaseAssignment_0() { return cExprSwitchCaseAssignment_0; }
		
		//ExprSwitchCase
		public RuleCall getExprSwitchCaseExprSwitchCaseParserRuleCall_0_0() { return cExprSwitchCaseExprSwitchCaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_0_1_0 = (RuleCall)cExpressionListAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprSwitchCaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExprSwitchCase:
		//	"case" ExpressionList=ExpressionList | {ExprSwitchCase} "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" ExpressionList=ExpressionList | {ExprSwitchCase} "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" ExpressionList=ExpressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_0_1() { return cExpressionListAssignment_0_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_0_1_0() { return cExpressionListExpressionListParserRuleCall_0_1_0; }
		
		//{ExprSwitchCase} "default"
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExprSwitchCase}
		public Action getExprSwitchCaseAction_1_0() { return cExprSwitchCaseAction_1_0; }
		
		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class Switch_stmt_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.switch_stmt_linha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeSwitchGuardAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeSwitchGuardTypeSwitchGuardParserRuleCall_0_0_0 = (RuleCall)cTypeSwitchGuardAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeCaseClauseAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeCaseClauseTypeCaseClauseParserRuleCall_0_2_0 = (RuleCall)cTypeCaseClauseAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSwitch_stmt_linhaAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_0_4_0 = (RuleCall)cSwitch_stmt_linhaAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSwitch_stmt_linhaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExprCaseClauseAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprCaseClauseExprCaseClauseParserRuleCall_1_3_0 = (RuleCall)cExprCaseClauseAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSwitch_stmt_linhaAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_1_5_0 = (RuleCall)cSwitch_stmt_linhaAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSwitch_stmt_linhaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//switch_stmt_linha:
		//	TypeSwitchGuard=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}" switch_stmt_linha=switch_stmt_linha |
		//	{switch_stmt_linha} Expression=Expression? "{" ExprCaseClause+=ExprCaseClause* "}" switch_stmt_linha=switch_stmt_linha
		//	| {switch_stmt_linha} ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSwitchGuard=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}" switch_stmt_linha=switch_stmt_linha |
		//{switch_stmt_linha} Expression=Expression? "{" ExprCaseClause+=ExprCaseClause* "}" switch_stmt_linha=switch_stmt_linha
		//| {switch_stmt_linha} ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeSwitchGuard=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}" switch_stmt_linha=switch_stmt_linha
		public Group getGroup_0() { return cGroup_0; }
		
		//TypeSwitchGuard=TypeSwitchGuard
		public Assignment getTypeSwitchGuardAssignment_0_0() { return cTypeSwitchGuardAssignment_0_0; }
		
		//TypeSwitchGuard
		public RuleCall getTypeSwitchGuardTypeSwitchGuardParserRuleCall_0_0_0() { return cTypeSwitchGuardTypeSwitchGuardParserRuleCall_0_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//TypeCaseClause+=TypeCaseClause*
		public Assignment getTypeCaseClauseAssignment_0_2() { return cTypeCaseClauseAssignment_0_2; }
		
		//TypeCaseClause
		public RuleCall getTypeCaseClauseTypeCaseClauseParserRuleCall_0_2_0() { return cTypeCaseClauseTypeCaseClauseParserRuleCall_0_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//switch_stmt_linha=switch_stmt_linha
		public Assignment getSwitch_stmt_linhaAssignment_0_4() { return cSwitch_stmt_linhaAssignment_0_4; }
		
		//switch_stmt_linha
		public RuleCall getSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_0_4_0() { return cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_0_4_0; }
		
		//{switch_stmt_linha} Expression=Expression? "{" ExprCaseClause+=ExprCaseClause* "}" switch_stmt_linha=switch_stmt_linha
		public Group getGroup_1() { return cGroup_1; }
		
		//{switch_stmt_linha}
		public Action getSwitch_stmt_linhaAction_1_0() { return cSwitch_stmt_linhaAction_1_0; }
		
		//Expression=Expression?
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//ExprCaseClause+=ExprCaseClause*
		public Assignment getExprCaseClauseAssignment_1_3() { return cExprCaseClauseAssignment_1_3; }
		
		//ExprCaseClause
		public RuleCall getExprCaseClauseExprCaseClauseParserRuleCall_1_3_0() { return cExprCaseClauseExprCaseClauseParserRuleCall_1_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
		
		//switch_stmt_linha=switch_stmt_linha
		public Assignment getSwitch_stmt_linhaAssignment_1_5() { return cSwitch_stmt_linhaAssignment_1_5; }
		
		//switch_stmt_linha
		public RuleCall getSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_1_5_0() { return cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_1_5_0; }
		
		//{switch_stmt_linha} ANY_OTHER
		public Group getGroup_2() { return cGroup_2; }
		
		//{switch_stmt_linha}
		public Action getSwitch_stmt_linhaAction_2_0() { return cSwitch_stmt_linhaAction_2_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2_1() { return cANY_OTHERTerminalRuleCall_2_1; }
	}
	public class TypeSwitchGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeSwitchGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPrimaryExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprPrimaryExprParserRuleCall_1_0 = (RuleCall)cPrimaryExprAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchGuard:
		//	(identifier=identifier ":=")? PrimaryExpr=PrimaryExpr "." "(" "type" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//(identifier=identifier ":=")? PrimaryExpr=PrimaryExpr "." "(" "type" ")"
		public Group getGroup() { return cGroup; }
		
		//(identifier=identifier ":=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0_0() { return cIdentifierIdentifierParserRuleCall_0_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//PrimaryExpr=PrimaryExpr
		public Assignment getPrimaryExprAssignment_1() { return cPrimaryExprAssignment_1; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprPrimaryExprParserRuleCall_1_0() { return cPrimaryExprPrimaryExprParserRuleCall_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSwitchCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0 = (RuleCall)cTypeSwitchCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//TypeCaseClause:
		//	TypeSwitchCase=TypeSwitchCase ":" StatementList=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSwitchCase=TypeSwitchCase ":" StatementList=StatementList
		public Group getGroup() { return cGroup; }
		
		//TypeSwitchCase=TypeSwitchCase
		public Assignment getTypeSwitchCaseAssignment_0() { return cTypeSwitchCaseAssignment_0; }
		
		//TypeSwitchCase
		public RuleCall getTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0() { return cTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeListTypeListParserRuleCall_0_1_0 = (RuleCall)cTypeListAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeSwitchCaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//TypeSwitchCase:
		//	"case" TypeList=TypeList | {TypeSwitchCase} "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" TypeList=TypeList | {TypeSwitchCase} "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" TypeList=TypeList
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//TypeList=TypeList
		public Assignment getTypeListAssignment_0_1() { return cTypeListAssignment_0_1; }
		
		//TypeList
		public RuleCall getTypeListTypeListParserRuleCall_0_1_0() { return cTypeListTypeListParserRuleCall_0_1_0; }
		
		//{TypeSwitchCase} "default"
		public Group getGroup_1() { return cGroup_1; }
		
		//{TypeSwitchCase}
		public Action getTypeSwitchCaseAction_1_0() { return cTypeSwitchCaseAction_1_0; }
		
		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//TypeList:
		//	Type+=Type ("," Type+=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Type+=Type ("," Type+=Type)*
		public Group getGroup() { return cGroup; }
		
		//Type+=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//("," Type+=Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Type+=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_1_0_0 = (RuleCall)cConditionAssignment_1_0.eContents().get(0);
		private final Assignment cForClauseAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cForClauseForClauseParserRuleCall_1_1_0 = (RuleCall)cForClauseAssignment_1_1.eContents().get(0);
		private final Assignment cRangeClauseAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cRangeClauseRangeClauseParserRuleCall_1_2_0 = (RuleCall)cRangeClauseAssignment_1_2.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//ForStmt:
		//	"for" (Condition=Condition | ForClause=ForClause | RangeClause=RangeClause)? Block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (Condition=Condition | ForClause=ForClause | RangeClause=RangeClause)? Block=Block
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(Condition=Condition | ForClause=ForClause | RangeClause=RangeClause)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Condition=Condition
		public Assignment getConditionAssignment_1_0() { return cConditionAssignment_1_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0_0() { return cConditionConditionParserRuleCall_1_0_0; }
		
		//ForClause=ForClause
		public Assignment getForClauseAssignment_1_1() { return cForClauseAssignment_1_1; }
		
		//ForClause
		public RuleCall getForClauseForClauseParserRuleCall_1_1_0() { return cForClauseForClauseParserRuleCall_1_1_0; }
		
		//RangeClause=RangeClause
		public Assignment getRangeClauseAssignment_1_2() { return cRangeClauseAssignment_1_2; }
		
		//RangeClause
		public RuleCall getRangeClauseRangeClauseParserRuleCall_1_2_0() { return cRangeClauseRangeClauseParserRuleCall_1_2_0; }
		
		//Block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Condition");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Condition:
		//	Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInitStmtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitStmtInitStmtParserRuleCall_1_0 = (RuleCall)cInitStmtAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPostStmtAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPostStmtPostStmtParserRuleCall_5_0 = (RuleCall)cPostStmtAssignment_5.eContents().get(0);
		
		//ForClause:
		//	{ForClause} InitStmt=InitStmt? ";" Condition=Condition? ";" PostStmt=PostStmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForClause} InitStmt=InitStmt? ";" Condition=Condition? ";" PostStmt=PostStmt?
		public Group getGroup() { return cGroup; }
		
		//{ForClause}
		public Action getForClauseAction_0() { return cForClauseAction_0; }
		
		//InitStmt=InitStmt?
		public Assignment getInitStmtAssignment_1() { return cInitStmtAssignment_1; }
		
		//InitStmt
		public RuleCall getInitStmtInitStmtParserRuleCall_1_0() { return cInitStmtInitStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//Condition=Condition?
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//PostStmt=PostStmt?
		public Assignment getPostStmtAssignment_5() { return cPostStmtAssignment_5; }
		
		//PostStmt
		public RuleCall getPostStmtPostStmtParserRuleCall_5_0() { return cPostStmtPostStmtParserRuleCall_5_0; }
	}
	public class InitStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.InitStmt");
		private final Assignment cSimpleStmtAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_0 = (RuleCall)cSimpleStmtAssignment.eContents().get(0);
		
		//InitStmt:
		//	SimpleStmt=SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt=SimpleStmt
		public Assignment getSimpleStmtAssignment() { return cSimpleStmtAssignment; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_0() { return cSimpleStmtSimpleStmtParserRuleCall_0; }
	}
	public class PostStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PostStmt");
		private final Assignment cSimpleStmtAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_0 = (RuleCall)cSimpleStmtAssignment.eContents().get(0);
		
		//PostStmt:
		//	SimpleStmt=SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt=SimpleStmt
		public Assignment getSimpleStmtAssignment() { return cSimpleStmtAssignment; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_0() { return cSimpleStmtSimpleStmtParserRuleCall_0; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.RangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpressionListAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpressionListExpressionListParserRuleCall_0_0_0_0 = (RuleCall)cExpressionListAssignment_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_1_0_0 = (RuleCall)cIdentifierListAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//RangeClause:
		//	(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")? "range" Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")? "range" Expression=Expression
		public Group getGroup() { return cGroup; }
		
		//(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExpressionList=ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_0_0_0() { return cExpressionListAssignment_0_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_0_0_0_0() { return cExpressionListExpressionListParserRuleCall_0_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList=IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0_1_0() { return cIdentifierListAssignment_0_1_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_1_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_1_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.GoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//GoStmt:
		//	"go" Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"go" Expression=Expression
		public Group getGroup() { return cGroup; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SelectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommClauseCommClauseParserRuleCall_3_0 = (RuleCall)cCommClauseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SelectStmt:
		//	{SelectStmt} "select" "{" CommClause+=CommClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectStmt} "select" "{" CommClause+=CommClause* "}"
		public Group getGroup() { return cGroup; }
		
		//{SelectStmt}
		public Action getSelectStmtAction_0() { return cSelectStmtAction_0; }
		
		//"select"
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//CommClause+=CommClause*
		public Assignment getCommClauseAssignment_3() { return cCommClauseAssignment_3; }
		
		//CommClause
		public RuleCall getCommClauseCommClauseParserRuleCall_3_0() { return cCommClauseCommClauseParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CommClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommCaseCommCaseParserRuleCall_0_0 = (RuleCall)cCommCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//CommClause:
		//	CommCase=CommCase ":" StatementList=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//CommCase=CommCase ":" StatementList=StatementList
		public Group getGroup() { return cGroup; }
		
		//CommCase=CommCase
		public Assignment getCommCaseAssignment_0() { return cCommCaseAssignment_0; }
		
		//CommCase
		public RuleCall getCommCaseCommCaseParserRuleCall_0_0() { return cCommCaseCommCaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CommCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cSendStmtAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cSendStmtSendStmtParserRuleCall_0_1_0_0 = (RuleCall)cSendStmtAssignment_0_1_0.eContents().get(0);
		private final Assignment cRecvStmtAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cRecvStmtRecvStmtParserRuleCall_0_1_1_0 = (RuleCall)cRecvStmtAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommCaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//CommCase:
		//	"case" (SendStmt=SendStmt | RecvStmt=RecvStmt) | {CommCase} "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" (SendStmt=SendStmt | RecvStmt=RecvStmt) | {CommCase} "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" (SendStmt=SendStmt | RecvStmt=RecvStmt)
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//SendStmt=SendStmt | RecvStmt=RecvStmt
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//SendStmt=SendStmt
		public Assignment getSendStmtAssignment_0_1_0() { return cSendStmtAssignment_0_1_0; }
		
		//SendStmt
		public RuleCall getSendStmtSendStmtParserRuleCall_0_1_0_0() { return cSendStmtSendStmtParserRuleCall_0_1_0_0; }
		
		//RecvStmt=RecvStmt
		public Assignment getRecvStmtAssignment_0_1_1() { return cRecvStmtAssignment_0_1_1; }
		
		//RecvStmt
		public RuleCall getRecvStmtRecvStmtParserRuleCall_0_1_1_0() { return cRecvStmtRecvStmtParserRuleCall_0_1_1_0; }
		
		//{CommCase} "default"
		public Group getGroup_1() { return cGroup_1; }
		
		//{CommCase}
		public Action getCommCaseAction_1_0() { return cCommCaseAction_1_0; }
		
		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class RecvStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.RecvStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpressionListAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpressionListExpressionListParserRuleCall_0_0_0_0 = (RuleCall)cExpressionListAssignment_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_1_0_0 = (RuleCall)cIdentifierListAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cRecvExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecvExprRecvExprParserRuleCall_1_0 = (RuleCall)cRecvExprAssignment_1.eContents().get(0);
		
		//RecvStmt:
		//	(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")? RecvExpr=RecvExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")? RecvExpr=RecvExpr
		public Group getGroup() { return cGroup; }
		
		//(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExpressionList=ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExpressionList=ExpressionList
		public Assignment getExpressionListAssignment_0_0_0() { return cExpressionListAssignment_0_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_0_0_0_0() { return cExpressionListExpressionListParserRuleCall_0_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList=IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0_1_0() { return cIdentifierListAssignment_0_1_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_1_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_1_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//RecvExpr=RecvExpr
		public Assignment getRecvExprAssignment_1() { return cRecvExprAssignment_1; }
		
		//RecvExpr
		public RuleCall getRecvExprRecvExprParserRuleCall_1_0() { return cRecvExprRecvExprParserRuleCall_1_0; }
	}
	public class RecvExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.RecvExpr");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//RecvExpr:
		//	Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionListAssignment_2.eContents().get(0);
		
		//ReturnStmt:
		//	{ReturnStmt} "return" ExpressionList=ExpressionList?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStmt} "return" ExpressionList=ExpressionList?
		public Group getGroup() { return cGroup; }
		
		//{ReturnStmt}
		public Action getReturnStmtAction_0() { return cReturnStmtAction_0; }
		
		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//ExpressionList=ExpressionList?
		public Assignment getExpressionListAssignment_2() { return cExpressionListAssignment_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0() { return cExpressionListExpressionListParserRuleCall_2_0; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BreakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelLabelParserRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//BreakStmt:
		//	{BreakStmt} "break" Label=Label?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BreakStmt} "break" Label=Label?
		public Group getGroup() { return cGroup; }
		
		//{BreakStmt}
		public Action getBreakStmtAction_0() { return cBreakStmtAction_0; }
		
		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
		
		//Label=Label?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_2_0() { return cLabelLabelParserRuleCall_2_0; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ContinueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelLabelParserRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//ContinueStmt:
		//	{ContinueStmt} "continue" Label=Label?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ContinueStmt} "continue" Label=Label?
		public Group getGroup() { return cGroup; }
		
		//{ContinueStmt}
		public Action getContinueStmtAction_0() { return cContinueStmtAction_0; }
		
		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }
		
		//Label=Label?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_2_0() { return cLabelLabelParserRuleCall_2_0; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//GotoStmt:
		//	"goto" Label=Label;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" Label=Label
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//Label=Label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FallthroughStmt");
		private final Keyword cFallthroughKeyword = (Keyword)rule.eContents().get(1);
		
		//FallthroughStmt:
		//	"fallthrough";
		@Override public ParserRule getRule() { return rule; }
		
		//"fallthrough"
		public Keyword getFallthroughKeyword() { return cFallthroughKeyword; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.DeferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//DeferStmt:
		//	"defer" Expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"defer" Expression=Expression
		public Group getGroup() { return cGroup; }
		
		//"defer"
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//Expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PackageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNamePackageNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		
		//PackageClause:
		//	"package" PackageName=PackageName;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" PackageName=PackageName
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//PackageName=PackageName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//PackageName
		public RuleCall getPackageNamePackageNameParserRuleCall_1_0() { return cPackageNamePackageNameParserRuleCall_1_0; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PackageName");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//PackageName:
		//	identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0() { return cIdentifierIdentifierParserRuleCall_0; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImportSpecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cImportSpecImportSpecParserRuleCall_2_0_0 = (RuleCall)cImportSpecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cImportSpecAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cImportSpecImportSpecParserRuleCall_2_1_1_0_0 = (RuleCall)cImportSpecAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ImportDecl:
		//	{ImportDecl} "import" (ImportSpec+=ImportSpec | "(" (ImportSpec+=ImportSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//{ImportDecl} "import" (ImportSpec+=ImportSpec | "(" (ImportSpec+=ImportSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//{ImportDecl}
		public Action getImportDeclAction_0() { return cImportDeclAction_0; }
		
		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//ImportSpec+=ImportSpec | "(" (ImportSpec+=ImportSpec ";")* ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ImportSpec+=ImportSpec
		public Assignment getImportSpecAssignment_2_0() { return cImportSpecAssignment_2_0; }
		
		//ImportSpec
		public RuleCall getImportSpecImportSpecParserRuleCall_2_0_0() { return cImportSpecImportSpecParserRuleCall_2_0_0; }
		
		//"(" (ImportSpec+=ImportSpec ";")* ")"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(ImportSpec+=ImportSpec ";")*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//ImportSpec+=ImportSpec
		public Assignment getImportSpecAssignment_2_1_1_0() { return cImportSpecAssignment_2_1_1_0; }
		
		//ImportSpec
		public RuleCall getImportSpecImportSpecParserRuleCall_2_1_1_0_0() { return cImportSpecImportSpecParserRuleCall_2_1_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cPackageNamePackageNameParserRuleCall_0_1_0 = (RuleCall)cPackageNameAssignment_0_1.eContents().get(0);
		private final Assignment cImportPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportPathImportPathParserRuleCall_1_0 = (RuleCall)cImportPathAssignment_1.eContents().get(0);
		
		//ImportSpec:
		//	("." | PackageName=PackageName)? ImportPath=ImportPath;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | PackageName=PackageName)? ImportPath=ImportPath
		public Group getGroup() { return cGroup; }
		
		//("." | PackageName=PackageName)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//PackageName=PackageName
		public Assignment getPackageNameAssignment_0_1() { return cPackageNameAssignment_0_1; }
		
		//PackageName
		public RuleCall getPackageNamePackageNameParserRuleCall_0_1_0() { return cPackageNamePackageNameParserRuleCall_0_1_0; }
		
		//ImportPath=ImportPath
		public Assignment getImportPathAssignment_1() { return cImportPathAssignment_1; }
		
		//ImportPath
		public RuleCall getImportPathImportPathParserRuleCall_1_0() { return cImportPathImportPathParserRuleCall_1_0; }
	}
	public class ImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ImportPath");
		private final Assignment cString_litAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cString_litString_litParserRuleCall_0 = (RuleCall)cString_litAssignment.eContents().get(0);
		
		//ImportPath:
		//	string_lit=string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit=string_lit
		public Assignment getString_litAssignment() { return cString_litAssignment; }
		
		//string_lit
		public RuleCall getString_litString_litParserRuleCall_0() { return cString_litString_litParserRuleCall_0; }
	}
	public class CommentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.comments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSolidusSolidusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSolidusAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskSolidusKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//comments:
		//	LETTER* "//" LETTER* | LETTER* "/*" LETTER* "*/";
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER* "//" LETTER* | LETTER* "/*" LETTER* "*/"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LETTER* "//" LETTER*
		public Group getGroup_0() { return cGroup_0; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_0_0() { return cLETTERTerminalRuleCall_0_0; }
		
		//"//"
		public Keyword getSolidusSolidusKeyword_0_1() { return cSolidusSolidusKeyword_0_1; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_0_2() { return cLETTERTerminalRuleCall_0_2; }
		
		//LETTER* "/*" LETTER* "*/"
		public Group getGroup_1() { return cGroup_1; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }
		
		//"/*"
		public Keyword getSolidusAsteriskKeyword_1_1() { return cSolidusAsteriskKeyword_1_1; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_1_2() { return cLETTERTerminalRuleCall_1_2; }
		
		//"*/"
		public Keyword getAsteriskSolidusKeyword_1_3() { return cAsteriskSolidusKeyword_1_3; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLETTERAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLETTERLETTERTerminalRuleCall_0_0 = (RuleCall)cLETTERAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLETTERAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLETTERLETTERTerminalRuleCall_1_0_0 = (RuleCall)cLETTERAssignment_1_0.eContents().get(0);
		private final Assignment cDECIMAL_DIGITAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_1_1_0 = (RuleCall)cDECIMAL_DIGITAssignment_1_1.eContents().get(0);
		
		//identifier:
		//	LETTER+=LETTER (LETTER+=LETTER | DECIMAL_DIGIT+=DECIMAL_DIGIT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER+=LETTER (LETTER+=LETTER | DECIMAL_DIGIT+=DECIMAL_DIGIT)*
		public Group getGroup() { return cGroup; }
		
		//LETTER+=LETTER
		public Assignment getLETTERAssignment_0() { return cLETTERAssignment_0; }
		
		//LETTER
		public RuleCall getLETTERLETTERTerminalRuleCall_0_0() { return cLETTERLETTERTerminalRuleCall_0_0; }
		
		//(LETTER+=LETTER | DECIMAL_DIGIT+=DECIMAL_DIGIT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//LETTER+=LETTER
		public Assignment getLETTERAssignment_1_0() { return cLETTERAssignment_1_0; }
		
		//LETTER
		public RuleCall getLETTERLETTERTerminalRuleCall_1_0_0() { return cLETTERLETTERTerminalRuleCall_1_0_0; }
		
		//DECIMAL_DIGIT+=DECIMAL_DIGIT
		public Assignment getDECIMAL_DIGITAssignment_1_1() { return cDECIMAL_DIGITAssignment_1_1; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_1_1_0() { return cDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_1_1_0; }
	}
	public class Int_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.int_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecimal_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOctal_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHex_litParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//int_lit:
		//	decimal_lit | octal_lit | hex_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//decimal_lit | octal_lit | hex_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decimal_lit
		public RuleCall getDecimal_litParserRuleCall_0() { return cDecimal_litParserRuleCall_0; }
		
		//octal_lit
		public RuleCall getOctal_litParserRuleCall_1() { return cOctal_litParserRuleCall_1; }
		
		//hex_lit
		public RuleCall getHex_litParserRuleCall_2() { return cHex_litParserRuleCall_2; }
	}
	public class Decimal_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.decimal_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//decimal_lit:
		//	DECIMAL_DIGIT DECIMAL_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_DIGIT DECIMAL_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0() { return cDECIMAL_DIGITTerminalRuleCall_0; }
		
		//DECIMAL_DIGIT*
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_1() { return cDECIMAL_DIGITTerminalRuleCall_1; }
	}
	public class Octal_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.octal_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//octal_lit:
		//	"0" OCTAL_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//"0" OCTAL_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//OCTAL_DIGIT*
		public RuleCall getOCTAL_DIGITTerminalRuleCall_1() { return cOCTAL_DIGITTerminalRuleCall_1; }
	}
	public class Hex_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.hex_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cXKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cXKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//hex_lit:
		//	"0" ("x" | "X") HEX_DIGIT HEX_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//"0" ("x" | "X") HEX_DIGIT HEX_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//"x" | "X"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"x"
		public Keyword getXKeyword_1_0() { return cXKeyword_1_0; }
		
		//"X"
		public Keyword getXKeyword_1_1() { return cXKeyword_1_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT*
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
	}
	public class Float_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.float_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDecimalsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDecimalsDecimalsParserRuleCall_0_2_0 = (RuleCall)cDecimalsAssignment_0_2.eContents().get(0);
		private final Assignment cExponentAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExponentExponentParserRuleCall_0_3_0 = (RuleCall)cExponentAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExponentExponentParserRuleCall_1_1_0 = (RuleCall)cExponentAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cExponenAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExponenExponentParserRuleCall_2_2_0 = (RuleCall)cExponenAssignment_2_2.eContents().get(0);
		
		//float_lit:
		//	decimals "." decimals=decimals? exponent=exponent? | decimals exponent=exponent | "." decimals exponen=exponent?;
		@Override public ParserRule getRule() { return rule; }
		
		//decimals "." decimals=decimals? exponent=exponent? | decimals exponent=exponent | "." decimals exponen=exponent?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decimals "." decimals=decimals? exponent=exponent?
		public Group getGroup_0() { return cGroup_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_0_0() { return cDecimalsParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//decimals=decimals?
		public Assignment getDecimalsAssignment_0_2() { return cDecimalsAssignment_0_2; }
		
		//decimals
		public RuleCall getDecimalsDecimalsParserRuleCall_0_2_0() { return cDecimalsDecimalsParserRuleCall_0_2_0; }
		
		//exponent=exponent?
		public Assignment getExponentAssignment_0_3() { return cExponentAssignment_0_3; }
		
		//exponent
		public RuleCall getExponentExponentParserRuleCall_0_3_0() { return cExponentExponentParserRuleCall_0_3_0; }
		
		//decimals exponent=exponent
		public Group getGroup_1() { return cGroup_1; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_1_0() { return cDecimalsParserRuleCall_1_0; }
		
		//exponent=exponent
		public Assignment getExponentAssignment_1_1() { return cExponentAssignment_1_1; }
		
		//exponent
		public RuleCall getExponentExponentParserRuleCall_1_1_0() { return cExponentExponentParserRuleCall_1_1_0; }
		
		//"." decimals exponen=exponent?
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_2_1() { return cDecimalsParserRuleCall_2_1; }
		
		//exponen=exponent?
		public Assignment getExponenAssignment_2_2() { return cExponenAssignment_2_2; }
		
		//exponent
		public RuleCall getExponenExponentParserRuleCall_2_2_0() { return cExponenExponentParserRuleCall_2_2_0; }
	}
	public class String_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.string_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRaw_string_litAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRaw_string_litRaw_string_litParserRuleCall_0_0 = (RuleCall)cRaw_string_litAssignment_0.eContents().get(0);
		private final Assignment cInterpreted_string_litAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInterpreted_string_litInterpreted_string_litParserRuleCall_1_0 = (RuleCall)cInterpreted_string_litAssignment_1.eContents().get(0);
		
		//string_lit:
		//	raw_string_lit=raw_string_lit | interpreted_string_lit=interpreted_string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//raw_string_lit=raw_string_lit | interpreted_string_lit=interpreted_string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//raw_string_lit=raw_string_lit
		public Assignment getRaw_string_litAssignment_0() { return cRaw_string_litAssignment_0; }
		
		//raw_string_lit
		public RuleCall getRaw_string_litRaw_string_litParserRuleCall_0_0() { return cRaw_string_litRaw_string_litParserRuleCall_0_0; }
		
		//interpreted_string_lit=interpreted_string_lit
		public Assignment getInterpreted_string_litAssignment_1() { return cInterpreted_string_litAssignment_1; }
		
		//interpreted_string_lit
		public RuleCall getInterpreted_string_litInterpreted_string_litParserRuleCall_1_0() { return cInterpreted_string_litInterpreted_string_litParserRuleCall_1_0; }
	}
	public class Raw_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.raw_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_charParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNewlineParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//raw_string_lit:
		//	"'" (unicode_char | newline)? "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (unicode_char | newline)? "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//(unicode_char | newline)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_char
		public RuleCall getUnicode_charParserRuleCall_1_0() { return cUnicode_charParserRuleCall_1_0; }
		
		//newline
		public RuleCall getNewlineParserRuleCall_1_1() { return cNewlineParserRuleCall_1_1; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class Interpreted_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.interpreted_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_valueParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//interpreted_string_lit:
		//	'"' (unicode_value | byte_value)? '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' (unicode_value | byte_value)? '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//(unicode_value | byte_value)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value
		public RuleCall getUnicode_valueParserRuleCall_1_0() { return cUnicode_valueParserRuleCall_1_0; }
		
		//byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class Unicode_charElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.unicode_char");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//unicode_char:
		//	"?" | "." | "," | "!";
		@Override public ParserRule getRule() { return rule; }
		
		//"?" | "." | "," | "!"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
	}
	public class NewlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.newline");
		private final Keyword cU000AKeyword = (Keyword)rule.eContents().get(1);
		
		//newline:
		//	"U+000A";
		@Override public ParserRule getRule() { return rule; }
		
		//"U+000A"
		public Keyword getU000AKeyword() { return cU000AKeyword; }
	}
	public class DecimalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.decimals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDECIMAL_DIGITAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_0_0 = (RuleCall)cDECIMAL_DIGITAssignment_0.eContents().get(0);
		private final Assignment cDECIMAL_DIGITAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_1_0 = (RuleCall)cDECIMAL_DIGITAssignment_1.eContents().get(0);
		
		//decimals:
		//	DECIMAL_DIGIT+=DECIMAL_DIGIT DECIMAL_DIGIT+=DECIMAL_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_DIGIT+=DECIMAL_DIGIT DECIMAL_DIGIT+=DECIMAL_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//DECIMAL_DIGIT+=DECIMAL_DIGIT
		public Assignment getDECIMAL_DIGITAssignment_0() { return cDECIMAL_DIGITAssignment_0; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_0_0() { return cDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_0_0; }
		
		//DECIMAL_DIGIT+=DECIMAL_DIGIT*
		public Assignment getDECIMAL_DIGITAssignment_1() { return cDECIMAL_DIGITAssignment_1; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_1_0() { return cDECIMAL_DIGITDECIMAL_DIGITTerminalRuleCall_1_0; }
	}
	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cDecimalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecimalsDecimalsParserRuleCall_2_0 = (RuleCall)cDecimalsAssignment_2.eContents().get(0);
		
		//exponent:
		//	("e" | "E") ("+" | "-")? decimals=decimals;
		@Override public ParserRule getRule() { return rule; }
		
		//("e" | "E") ("+" | "-")? decimals=decimals
		public Group getGroup() { return cGroup; }
		
		//"e" | "E"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }
		
		//"E"
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }
		
		//("+" | "-")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//decimals=decimals
		public Assignment getDecimalsAssignment_2() { return cDecimalsAssignment_2; }
		
		//decimals
		public RuleCall getDecimalsDecimalsParserRuleCall_2_0() { return cDecimalsDecimalsParserRuleCall_2_0; }
	}
	public class Imaginary_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.imaginary_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cDecimalsAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cDecimalsDecimalsParserRuleCall_0_0_0 = (RuleCall)cDecimalsAssignment_0_0.eContents().get(0);
		private final Assignment cFloat_litAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cFloat_litFloat_litParserRuleCall_0_1_0 = (RuleCall)cFloat_litAssignment_0_1.eContents().get(0);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//imaginary_lit:
		//	(decimals=decimals | float_lit=float_lit) "i";
		@Override public ParserRule getRule() { return rule; }
		
		//(decimals=decimals | float_lit=float_lit) "i"
		public Group getGroup() { return cGroup; }
		
		//decimals=decimals | float_lit=float_lit
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//decimals=decimals
		public Assignment getDecimalsAssignment_0_0() { return cDecimalsAssignment_0_0; }
		
		//decimals
		public RuleCall getDecimalsDecimalsParserRuleCall_0_0_0() { return cDecimalsDecimalsParserRuleCall_0_0_0; }
		
		//float_lit=float_lit
		public Assignment getFloat_litAssignment_0_1() { return cFloat_litAssignment_0_1; }
		
		//float_lit
		public RuleCall getFloat_litFloat_litParserRuleCall_0_1_0() { return cFloat_litFloat_litParserRuleCall_0_1_0; }
		
		//"i"
		public Keyword getIKeyword_1() { return cIKeyword_1; }
	}
	public class Rune_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.rune_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cUnicode_valueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cUnicode_valueUnicode_valueParserRuleCall_1_0_0 = (RuleCall)cUnicode_valueAssignment_1_0.eContents().get(0);
		private final Assignment cByte_valueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cByte_valueByte_valueParserRuleCall_1_1_0 = (RuleCall)cByte_valueAssignment_1_1.eContents().get(0);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//rune_lit:
		//	"'" (unicode_value=unicode_value | byte_value=byte_value) "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (unicode_value=unicode_value | byte_value=byte_value) "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//unicode_value=unicode_value | byte_value=byte_value
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value=unicode_value
		public Assignment getUnicode_valueAssignment_1_0() { return cUnicode_valueAssignment_1_0; }
		
		//unicode_value
		public RuleCall getUnicode_valueUnicode_valueParserRuleCall_1_0_0() { return cUnicode_valueUnicode_valueParserRuleCall_1_0_0; }
		
		//byte_value=byte_value
		public Assignment getByte_valueAssignment_1_1() { return cByte_valueAssignment_1_1; }
		
		//byte_value
		public RuleCall getByte_valueByte_valueParserRuleCall_1_1_0() { return cByte_valueByte_valueParserRuleCall_1_1_0; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class Unicode_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.unicode_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLittle_u_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBig_u_valueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEscaped_charParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//unicode_value:
		//	LETTER | little_u_value | big_u_value | escaped_char;
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER | little_u_value | big_u_value | escaped_char
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }
		
		//little_u_value
		public RuleCall getLittle_u_valueParserRuleCall_1() { return cLittle_u_valueParserRuleCall_1; }
		
		//big_u_value
		public RuleCall getBig_u_valueParserRuleCall_2() { return cBig_u_valueParserRuleCall_2; }
		
		//escaped_char
		public RuleCall getEscaped_charParserRuleCall_3() { return cEscaped_charParserRuleCall_3; }
	}
	public class Byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.byte_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOctal_byte_valueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHex_byte_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//byte_value:
		//	octal_byte_value | hex_byte_value;
		@Override public ParserRule getRule() { return rule; }
		
		//octal_byte_value | hex_byte_value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//octal_byte_value
		public RuleCall getOctal_byte_valueParserRuleCall_0() { return cOctal_byte_valueParserRuleCall_0; }
		
		//hex_byte_value
		public RuleCall getHex_byte_valueParserRuleCall_1() { return cHex_byte_valueParserRuleCall_1; }
	}
	public class Octal_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.octal_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//octal_byte_value:
		//	CHAR OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_1() { return cOCTAL_DIGITTerminalRuleCall_1; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_2() { return cOCTAL_DIGITTerminalRuleCall_2; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_3() { return cOCTAL_DIGITTerminalRuleCall_3; }
	}
	public class Hex_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.hex_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//hex_byte_value:
		//	CHAR "x" HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR "x" HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"x"
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
	}
	public class Little_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.little_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//little_u_value:
		//	CHAR "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"u"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
	}
	public class Big_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.big_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cHEX_DIGITTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cHEX_DIGITTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cHEX_DIGITTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cHEX_DIGITTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//big_u_value:
		//	CHAR "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"U"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_6() { return cHEX_DIGITTerminalRuleCall_6; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_7() { return cHEX_DIGITTerminalRuleCall_7; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_8() { return cHEX_DIGITTerminalRuleCall_8; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_9() { return cHEX_DIGITTerminalRuleCall_9; }
	}
	public class Escaped_charElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.escaped_char");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cFKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cNKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cRKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cTKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cVKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final RuleCall cCHARParserRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		private final Keyword cApostropheKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cQuotationMarkKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		
		//escaped_char:
		//	CHAR ("a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"');
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR ("a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"')
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"a"
		public Keyword getAKeyword_1_0() { return cAKeyword_1_0; }
		
		//"b"
		public Keyword getBKeyword_1_1() { return cBKeyword_1_1; }
		
		//"f"
		public Keyword getFKeyword_1_2() { return cFKeyword_1_2; }
		
		//"n"
		public Keyword getNKeyword_1_3() { return cNKeyword_1_3; }
		
		//"r"
		public Keyword getRKeyword_1_4() { return cRKeyword_1_4; }
		
		//"t"
		public Keyword getTKeyword_1_5() { return cTKeyword_1_5; }
		
		//"v"
		public Keyword getVKeyword_1_6() { return cVKeyword_1_6; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_1_7() { return cCHARParserRuleCall_1_7; }
		
		//"'"
		public Keyword getApostropheKeyword_1_8() { return cApostropheKeyword_1_8; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_9() { return cQuotationMarkKeyword_1_9; }
	}
	public class CHARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CHAR");
		private final Keyword cApostropheKeyword = (Keyword)rule.eContents().get(1);
		
		//CHAR:
		//	"\'";
		@Override public ParserRule getRule() { return rule; }
		
		//"\'"
		public Keyword getApostropheKeyword() { return cApostropheKeyword; }
	}
	
	
	private final SouceFileElements pSouceFile;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final TypeNameLinhaElements pTypeNameLinha;
	private final TypeLitElements pTypeLit;
	private final TypeLitLinhaElements pTypeLitLinha;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final EmbeddedFieldElements pEmbeddedField;
	private final TagElements pTag;
	private final PointerTypeElements pPointerType;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final InterfaceTypeElements pInterfaceType;
	private final MethodSpecElements pMethodSpec;
	private final MethodNameElements pMethodName;
	private final InterfaceTypeNameElements pInterfaceTypeName;
	private final MapTypeElements pMapType;
	private final KeyTypeElements pKeyType;
	private final ChannelTypeElements pChannelType;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final DeclarationElements pDeclaration;
	private final TopLevelDeclElements pTopLevelDecl;
	private final TopLevelDeclLinhaElements pTopLevelDeclLinha;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final IdentifierListElements pIdentifierList;
	private final ExpressionListElements pExpressionList;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final AliasDeclElements pAliasDecl;
	private final TypeDefElements pTypeDef;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final ShortVarDeclElements pShortVarDecl;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionNameElements pFunctionName;
	private final FunctionBodyElements pFunctionBody;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final OperandElements pOperand;
	private final LiteralElements pLiteral;
	private final BasicLitElements pBasicLit;
	private final OperandNameElements pOperandName;
	private final QualifiedIdentElements pQualifiedIdent;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralTypeLinhaElements pLiteralTypeLinha;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final ElementElements pElement;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final FieldNameElements pFieldName;
	private final FunctionLitElements pFunctionLit;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExprLinhaElements pPrimaryExprLinha;
	private final PontoElements pPonto;
	private final CochetesElements pCochetes;
	private final SelectorElements pSelector;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final MethodExprElements pMethodExpr;
	private final ReceiverTypeElements pReceiverType;
	private final ExpressionElements pExpression;
	private final ExpressionLinhaElements pExpressionLinha;
	private final UnaryExprElements pUnaryExpr;
	private final Binary_opElements pBinary_op;
	private final Rel_opElements pRel_op;
	private final Add_opElements pAdd_op;
	private final Mul_opElements pMul_op;
	private final Unary_opElements pUnary_op;
	private final ConversionElements pConversion;
	private final StatementElements pStatement;
	private final SimpleStmtElements pSimpleStmt;
	private final EmptyStmtElements pEmptyStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final LabelElements pLabel;
	private final ExpressionStmtElements pExpressionStmt;
	private final SendStmtElements pSendStmt;
	private final ChannelElements pChannel;
	private final IncDecStmtElements pIncDecStmt;
	private final AssignmentElements pAssignment;
	private final Assign_opElements pAssign_op;
	private final IfStmtElements pIfStmt;
	private final SwitchStmtElements pSwitchStmt;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final Switch_stmt_linhaElements pSwitch_stmt_linha;
	private final TypeSwitchGuardElements pTypeSwitchGuard;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final ForStmtElements pForStmt;
	private final ConditionElements pCondition;
	private final ForClauseElements pForClause;
	private final InitStmtElements pInitStmt;
	private final PostStmtElements pPostStmt;
	private final RangeClauseElements pRangeClause;
	private final GoStmtElements pGoStmt;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final RecvStmtElements pRecvStmt;
	private final RecvExprElements pRecvExpr;
	private final ReturnStmtElements pReturnStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final DeferStmtElements pDeferStmt;
	private final PackageClauseElements pPackageClause;
	private final PackageNameElements pPackageName;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final ImportPathElements pImportPath;
	private final CommentsElements pComments;
	private final IdentifierElements pIdentifier;
	private final Int_litElements pInt_lit;
	private final Decimal_litElements pDecimal_lit;
	private final Octal_litElements pOctal_lit;
	private final Hex_litElements pHex_lit;
	private final Float_litElements pFloat_lit;
	private final String_litElements pString_lit;
	private final Raw_string_litElements pRaw_string_lit;
	private final Interpreted_string_litElements pInterpreted_string_lit;
	private final Unicode_charElements pUnicode_char;
	private final NewlineElements pNewline;
	private final DecimalsElements pDecimals;
	private final ExponentElements pExponent;
	private final Imaginary_litElements pImaginary_lit;
	private final Rune_litElements pRune_lit;
	private final Unicode_valueElements pUnicode_value;
	private final Byte_valueElements pByte_value;
	private final Octal_byte_valueElements pOctal_byte_value;
	private final Hex_byte_valueElements pHex_byte_value;
	private final Little_u_valueElements pLittle_u_value;
	private final Big_u_valueElements pBig_u_value;
	private final Escaped_charElements pEscaped_char;
	private final CHARElements pCHAR;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tSEVEN_TO_NINE;
	private final TerminalRule tA_TO_F;
	private final TerminalRule tLETTER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSouceFile = new SouceFileElements();
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeNameLinha = new TypeNameLinhaElements();
		this.pTypeLit = new TypeLitElements();
		this.pTypeLitLinha = new TypeLitLinhaElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pEmbeddedField = new EmbeddedFieldElements();
		this.pTag = new TagElements();
		this.pPointerType = new PointerTypeElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pMethodName = new MethodNameElements();
		this.pInterfaceTypeName = new InterfaceTypeNameElements();
		this.pMapType = new MapTypeElements();
		this.pKeyType = new KeyTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pDeclaration = new DeclarationElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pTopLevelDeclLinha = new TopLevelDeclLinhaElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pExpressionList = new ExpressionListElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pAliasDecl = new AliasDeclElements();
		this.pTypeDef = new TypeDefElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pOperand = new OperandElements();
		this.pLiteral = new LiteralElements();
		this.pBasicLit = new BasicLitElements();
		this.pOperandName = new OperandNameElements();
		this.pQualifiedIdent = new QualifiedIdentElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralTypeLinha = new LiteralTypeLinhaElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pElement = new ElementElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pFieldName = new FieldNameElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExprLinha = new PrimaryExprLinhaElements();
		this.pPonto = new PontoElements();
		this.pCochetes = new CochetesElements();
		this.pSelector = new SelectorElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pMethodExpr = new MethodExprElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionLinha = new ExpressionLinhaElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pBinary_op = new Binary_opElements();
		this.pRel_op = new Rel_opElements();
		this.pAdd_op = new Add_opElements();
		this.pMul_op = new Mul_opElements();
		this.pUnary_op = new Unary_opElements();
		this.pConversion = new ConversionElements();
		this.pStatement = new StatementElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pEmptyStmt = new EmptyStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pLabel = new LabelElements();
		this.pExpressionStmt = new ExpressionStmtElements();
		this.pSendStmt = new SendStmtElements();
		this.pChannel = new ChannelElements();
		this.pIncDecStmt = new IncDecStmtElements();
		this.pAssignment = new AssignmentElements();
		this.pAssign_op = new Assign_opElements();
		this.pIfStmt = new IfStmtElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pSwitch_stmt_linha = new Switch_stmt_linhaElements();
		this.pTypeSwitchGuard = new TypeSwitchGuardElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pForStmt = new ForStmtElements();
		this.pCondition = new ConditionElements();
		this.pForClause = new ForClauseElements();
		this.pInitStmt = new InitStmtElements();
		this.pPostStmt = new PostStmtElements();
		this.pRangeClause = new RangeClauseElements();
		this.pGoStmt = new GoStmtElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pRecvStmt = new RecvStmtElements();
		this.pRecvExpr = new RecvExprElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pPackageClause = new PackageClauseElements();
		this.pPackageName = new PackageNameElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pImportPath = new ImportPathElements();
		this.pComments = new CommentsElements();
		this.pIdentifier = new IdentifierElements();
		this.pInt_lit = new Int_litElements();
		this.pDecimal_lit = new Decimal_litElements();
		this.pOctal_lit = new Octal_litElements();
		this.pHex_lit = new Hex_litElements();
		this.pFloat_lit = new Float_litElements();
		this.pString_lit = new String_litElements();
		this.pRaw_string_lit = new Raw_string_litElements();
		this.pInterpreted_string_lit = new Interpreted_string_litElements();
		this.pUnicode_char = new Unicode_charElements();
		this.pNewline = new NewlineElements();
		this.pDecimals = new DecimalsElements();
		this.pExponent = new ExponentElements();
		this.pImaginary_lit = new Imaginary_litElements();
		this.pRune_lit = new Rune_litElements();
		this.pUnicode_value = new Unicode_valueElements();
		this.pByte_value = new Byte_valueElements();
		this.pOctal_byte_value = new Octal_byte_valueElements();
		this.pHex_byte_value = new Hex_byte_valueElements();
		this.pLittle_u_value = new Little_u_valueElements();
		this.pBig_u_value = new Big_u_valueElements();
		this.pEscaped_char = new Escaped_charElements();
		this.pCHAR = new CHARElements();
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.OCTAL_DIGIT");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.DECIMAL_DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.HEX_DIGIT");
		this.tSEVEN_TO_NINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SEVEN_TO_NINE");
		this.tA_TO_F = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.A_TO_F");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LETTER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ufcg.compiladores.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SouceFile:
	//	PackageClause=PackageClause ";" (ImportDecl+=ImportDecl ";")* (TopLevelDecl=TopLevelDecl ";")?;
	public SouceFileElements getSouceFileAccess() {
		return pSouceFile;
	}
	
	public ParserRule getSouceFileRule() {
		return getSouceFileAccess().getRule();
	}
	
	//Type:
	//	TypeName=TypeName | TypeLit=TypeLit | "(" Type=Type ")";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeName:
	//	identifier=identifier TypeNameLinha=TypeNameLinha;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//TypeNameLinha:
	//	"." identifier=identifier TypeNameLinha=TypeNameLinha | QualifiedIdent=QualifiedIdent TypeNameLinha=TypeNameLinha |
	//	{TypeNameLinha} ANY_OTHER;
	public TypeNameLinhaElements getTypeNameLinhaAccess() {
		return pTypeNameLinha;
	}
	
	public ParserRule getTypeNameLinhaRule() {
		return getTypeNameLinhaAccess().getRule();
	}
	
	//TypeLit:
	//	"[" TypeLitLinha=TypeLitLinha | StructType=StructType | PointerType=PointerType | FunctionType=FunctionType |
	//	InterfaceType=InterfaceType | MapType=MapType | ChannelType=ChannelType;
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//TypeLitLinha:
	//	ArrayLength=ArrayLength "]" ElementType=ElementType TypeLitLinha=TypeLitLinha |
	//	"]" ElementType=ElementType TypeLitLinha=TypeLitLinha | {TypeLitLinha} ANY_OTHER;
	public TypeLitLinhaElements getTypeLitLinhaAccess() {
		return pTypeLitLinha;
	}
	
	public ParserRule getTypeLitLinhaRule() {
		return getTypeLitLinhaAccess().getRule();
	}
	
	//ArrayLength:
	//	Expression=Expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//ElementType:
	//	Type=Type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//StructType:
	//	{StructType} "struct" "{" (FieldDecl+=FieldDecl ";")* ";";
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//FieldDecl:
	//	(IdentifierList=IdentifierList Type=Type | EmbeddedField=EmbeddedField) Tag=Tag?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//EmbeddedField:
	//	"*"? TypeName=TypeName;
	public EmbeddedFieldElements getEmbeddedFieldAccess() {
		return pEmbeddedField;
	}
	
	public ParserRule getEmbeddedFieldRule() {
		return getEmbeddedFieldAccess().getRule();
	}
	
	//Tag:
	//	string_lit=string_lit;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//PointerType:
	//	"*" Type=Type;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//FunctionType:
	//	"func" Signature=Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//Signature:
	//	Parameters=Parameters Result=Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	Parameters=Parameters | Type=Type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	{Parameters} "(" (ParameterList=ParameterList ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	ParameterDecl+=ParameterDecl ("," ParameterDecl+=ParameterDecl)?;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	IdentifierList=IdentifierList? "..."? Type=Type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//InterfaceType:
	//	{InterfaceType} "interface" "{" (MethodSpec=MethodSpec ";")? "}";
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//MethodSpec:
	//	MethodName=MethodName Signature=Signature | InterfaceTypeName=InterfaceTypeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	//MethodName:
	//	identifier=identifier;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//InterfaceTypeName:
	//	TypeName=TypeName;
	public InterfaceTypeNameElements getInterfaceTypeNameAccess() {
		return pInterfaceTypeName;
	}
	
	public ParserRule getInterfaceTypeNameRule() {
		return getInterfaceTypeNameAccess().getRule();
	}
	
	//MapType:
	//	"map" "[" KeyType=KeyType "]" ElementType=ElementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//KeyType:
	//	Type=Type;
	public KeyTypeElements getKeyTypeAccess() {
		return pKeyType;
	}
	
	public ParserRule getKeyTypeRule() {
		return getKeyTypeAccess().getRule();
	}
	
	//ChannelType:
	//	("chan" | "chan" "<-" | "<-" "chan") ElementType=ElementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//Block:
	//	"{" StatementList=StatementList "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//StatementList:
	//	{StatementList} (Statement+=Statement ";")*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Declaration:
	//	ConstDecl=ConstDecl | TypeDecl=TypeDecl | VarDecl=VarDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//TopLevelDecl:
	//	Declaration=Declaration | "func" topLevelDeclLinha=topLevelDeclLinha;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//topLevelDeclLinha:
	//	FunctionName=FunctionName Signature=Signature FunctionBody=FunctionBody? | Receiver=Receiver MethodName=MethodName
	//	Signature=Signature FunctionBody=FunctionBody?;
	public TopLevelDeclLinhaElements getTopLevelDeclLinhaAccess() {
		return pTopLevelDeclLinha;
	}
	
	public ParserRule getTopLevelDeclLinhaRule() {
		return getTopLevelDeclLinhaAccess().getRule();
	}
	
	//ConstDecl:
	//	{ConstDecl} "const" (ConstSpec=ConstSpec | "(" (ConstSpec=ConstSpec ";")? ")");
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	//ConstSpec:
	//	IdentifierList=IdentifierList (Type=Type? "=" ExpressionList=ExpressionList)?;
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	//IdentifierList:
	//	identifier+=identifier ("," identifier+=identifier)?;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//ExpressionList:
	//	Expression+=Expression ("," Expression+=Expression)?;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//TypeDecl:
	//	{TypeDecl} "type" (TypeSpec=TypeSpec | "(" (TypeSpec=TypeSpec ";")? ")");
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//TypeSpec:
	//	AliasDecl | TypeDef;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//AliasDecl:
	//	identifier=identifier "=" Type=Type;
	public AliasDeclElements getAliasDeclAccess() {
		return pAliasDecl;
	}
	
	public ParserRule getAliasDeclRule() {
		return getAliasDeclAccess().getRule();
	}
	
	//TypeDef:
	//	identifier=identifier Type=Type;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//VarDecl:
	//	{VarDecl} "var" (VarSpec=VarSpec | "(" (VarSpec=VarSpec ";")? ")");
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VarSpec:
	//	IdentifierList=IdentifierList (Type=Type ("=" ExpressionList=ExpressionList)? | "=" ExpressionList=ExpressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	//ShortVarDecl:
	//	IdentifierList=IdentifierList ":=" ExpressionList=ExpressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//FunctionDecl:
	//	"func" FunctionName=FunctionName Signature=Signature FunctionBody=FunctionBody?;
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//FunctionName:
	//	identifier=identifier;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionBody:
	//	Block=Block;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//MethodDecl:
	//	"func" Receiver=Receiver MethodName=MethodName Signature=Signature FunctionBody=FunctionBody?;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//Receiver:
	//	Parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//Operand:
	//	Literal=Literal | OperandName=OperandName | "(" Expression=Expression ")";
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Literal:
	//	BasicLit=BasicLit | CompositeLit | FunctionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BasicLit:
	//	{BasicLit} int_lit=int_lit | float_lit=float_lit | rune_lit=rune_lit | string_lit=string_lit;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//OperandName:
	//	identifier | QualifiedIdent;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	//QualifiedIdent:
	//	PackageName=PackageName "." identifier=identifier;
	public QualifiedIdentElements getQualifiedIdentAccess() {
		return pQualifiedIdent;
	}
	
	public ParserRule getQualifiedIdentRule() {
		return getQualifiedIdentAccess().getRule();
	}
	
	//CompositeLit:
	//	LiteralType=LiteralType LiteralValue=LiteralValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//LiteralType:
	//	StructType=StructType | "[" LiteralTypeLinha=LiteralTypeLinha | ElementType=ElementType | MapType=MapType |
	//	TypeName=TypeName;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralTypeLinha:
	//	ArrayLength=ArrayLength "]" ElementType=ElementType |
	//	"]" ElementType=ElementType | {LiteralTypeLinha} "..." "]";
	public LiteralTypeLinhaElements getLiteralTypeLinhaAccess() {
		return pLiteralTypeLinha;
	}
	
	public ParserRule getLiteralTypeLinhaRule() {
		return getLiteralTypeLinhaAccess().getRule();
	}
	
	//LiteralValue:
	//	{LiteralValue} "{" (ElementList=ElementList ","?)? "}";
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//ElementList:
	//	KeyedElement+=KeyedElement ("," KeyedElement+=KeyedElement)?;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//Element:
	//	Expression=Expression | LiteralValue=LiteralValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//KeyedElement:
	//	(Key=Key ":")? Element=Element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//Key:
	//	FieldName=FieldName | Expression=Expression | LiteralValue=LiteralValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//FieldName:
	//	identifier=identifier;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//FunctionLit:
	//	"func" Signature=Signature FunctionBody=FunctionBody;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	//PrimaryExpr:
	//	Operand=Operand PrimaryExprLinha=PrimaryExprLinha | Conversion=Conversion PrimaryExprLinha=PrimaryExprLinha |
	//	MethodExpr=MethodExpr PrimaryExprLinha=PrimaryExprLinha;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//PrimaryExprLinha:
	//	Arguments=Arguments PrimaryExprLinha=PrimaryExprLinha |
	//	"." ponto=ponto |
	//	"[" cochetes=cochetes | {PrimaryExprLinha} ANY_OTHER;
	public PrimaryExprLinhaElements getPrimaryExprLinhaAccess() {
		return pPrimaryExprLinha;
	}
	
	public ParserRule getPrimaryExprLinhaRule() {
		return getPrimaryExprLinhaAccess().getRule();
	}
	
	//ponto:
	//	Selector=Selector PrimaryExprLinha=PrimaryExprLinha | TypeAssertion=TypeAssertion PrimaryExprLinha=PrimaryExprLinha;
	public PontoElements getPontoAccess() {
		return pPonto;
	}
	
	public ParserRule getPontoRule() {
		return getPontoAccess().getRule();
	}
	
	//cochetes:
	//	Index=Index PrimaryExprLinha=PrimaryExprLinha | Slice=Slice PrimaryExprLinha=PrimaryExprLinha;
	public CochetesElements getCochetesAccess() {
		return pCochetes;
	}
	
	public ParserRule getCochetesRule() {
		return getCochetesAccess().getRule();
	}
	
	//Selector:
	//	identifier=identifier;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Index:
	//	{Index} "]" | Slice=Slice;
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Slice:
	//	":" decimals+=decimals? ":" decimals+=decimals "]";
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//TypeAssertion:
	//	"(" Type=Type ")";
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//Arguments:
	//	{Arguments} "(" ((ExpressionList=ExpressionList | Type=Type ("," ExpressionList=ExpressionList)?) "..."? ","?)? ")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//MethodExpr:
	//	ReceiverType=ReceiverType "." MethodName=MethodName;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//ReceiverType:
	//	Type=Type;
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	//Expression:
	//	UnaryExpr=UnaryExpr ExpressionLinha=ExpressionLinha;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExpressionLinha:
	//	binary_op=binary_op Expression=Expression ExpressionLinha=ExpressionLinha | {ExpressionLinha} ANY_OTHER;
	public ExpressionLinhaElements getExpressionLinhaAccess() {
		return pExpressionLinha;
	}
	
	public ParserRule getExpressionLinhaRule() {
		return getExpressionLinhaAccess().getRule();
	}
	
	//UnaryExpr:
	//	PrimaryExpr=PrimaryExpr | unary_op=unary_op UnaryExpr=UnaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//binary_op:
	//	{binary_op} "||" | {binary_op} "&&" | rel_op=rel_op | add_op=add_op | mul_op=mul_op;
	public Binary_opElements getBinary_opAccess() {
		return pBinary_op;
	}
	
	public ParserRule getBinary_opRule() {
		return getBinary_opAccess().getRule();
	}
	
	//rel_op:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public Rel_opElements getRel_opAccess() {
		return pRel_op;
	}
	
	public ParserRule getRel_opRule() {
		return getRel_opAccess().getRule();
	}
	
	//add_op:
	//	"+" | "-" | "|" | "ˆ";
	public Add_opElements getAdd_opAccess() {
		return pAdd_op;
	}
	
	public ParserRule getAdd_opRule() {
		return getAdd_opAccess().getRule();
	}
	
	//mul_op:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public Mul_opElements getMul_opAccess() {
		return pMul_op;
	}
	
	public ParserRule getMul_opRule() {
		return getMul_opAccess().getRule();
	}
	
	//unary_op:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public Unary_opElements getUnary_opAccess() {
		return pUnary_op;
	}
	
	public ParserRule getUnary_opRule() {
		return getUnary_opAccess().getRule();
	}
	
	//Conversion:
	//	Type=Type "(" Expression=Expression ","? ")";
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//Statement:
	//	Declaration=Declaration | LabeledStmt=LabeledStmt | SimpleStmt=SimpleStmt | GoStmt=GoStmt | ReturnStmt=ReturnStmt |
	//	BreakStmt=BreakStmt | ContinueStmt=ContinueStmt | GotoStmt=GotoStmt | FallthroughStmt=FallthroughStmt | Block=Block |
	//	IfStmt=IfStmt | SwitchStmt=SwitchStmt | SelectStmt=SelectStmt | ForStmt=ForStmt | DeferStmt=DeferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SimpleStmt:
	//	EmptyStmt=EmptyStmt | ExpressionStmt=ExpressionStmt | SendStmt=SendStmt | IncDecStmt=IncDecStmt |
	//	Assignment=Assignment | ShortVarDecl=ShortVarDecl;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//EmptyStmt:
	//	ANY_OTHER;
	public EmptyStmtElements getEmptyStmtAccess() {
		return pEmptyStmt;
	}
	
	public ParserRule getEmptyStmtRule() {
		return getEmptyStmtAccess().getRule();
	}
	
	//LabeledStmt:
	//	Label=Label ":" Statement=Statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	//Label:
	//	identifier=identifier;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//ExpressionStmt:
	//	Expression=Expression;
	public ExpressionStmtElements getExpressionStmtAccess() {
		return pExpressionStmt;
	}
	
	public ParserRule getExpressionStmtRule() {
		return getExpressionStmtAccess().getRule();
	}
	
	//SendStmt:
	//	Channel=Channel "<-" Expression=Expression;
	public SendStmtElements getSendStmtAccess() {
		return pSendStmt;
	}
	
	public ParserRule getSendStmtRule() {
		return getSendStmtAccess().getRule();
	}
	
	//Channel:
	//	Expression=Expression;
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//IncDecStmt:
	//	Expression=Expression ("++" | "--");
	public IncDecStmtElements getIncDecStmtAccess() {
		return pIncDecStmt;
	}
	
	public ParserRule getIncDecStmtRule() {
		return getIncDecStmtAccess().getRule();
	}
	
	//Assignment:
	//	ExpressionList+=ExpressionList assign_op=assign_op ExpressionList+=ExpressionList;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//assign_op:
	//	(add_op | mul_op)? "=";
	public Assign_opElements getAssign_opAccess() {
		return pAssign_op;
	}
	
	public ParserRule getAssign_opRule() {
		return getAssign_opAccess().getRule();
	}
	
	//IfStmt:
	//	"if" (SimpleStmt=SimpleStmt ";")? Expression=Expression Block+=Block ("else" (IfStmt=IfStmt | Block+=Block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//SwitchStmt:
	//	"switch" (SimpleStmt ";")? switch_stmt_linha=switch_stmt_linha;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	//ExprCaseClause:
	//	ExprSwitchCase=ExprSwitchCase ":" StatementList=StatementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//ExprSwitchCase:
	//	"case" ExpressionList=ExpressionList | {ExprSwitchCase} "default";
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	//switch_stmt_linha:
	//	TypeSwitchGuard=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}" switch_stmt_linha=switch_stmt_linha |
	//	{switch_stmt_linha} Expression=Expression? "{" ExprCaseClause+=ExprCaseClause* "}" switch_stmt_linha=switch_stmt_linha
	//	| {switch_stmt_linha} ANY_OTHER;
	public Switch_stmt_linhaElements getSwitch_stmt_linhaAccess() {
		return pSwitch_stmt_linha;
	}
	
	public ParserRule getSwitch_stmt_linhaRule() {
		return getSwitch_stmt_linhaAccess().getRule();
	}
	
	//TypeSwitchGuard:
	//	(identifier=identifier ":=")? PrimaryExpr=PrimaryExpr "." "(" "type" ")";
	public TypeSwitchGuardElements getTypeSwitchGuardAccess() {
		return pTypeSwitchGuard;
	}
	
	public ParserRule getTypeSwitchGuardRule() {
		return getTypeSwitchGuardAccess().getRule();
	}
	
	//TypeCaseClause:
	//	TypeSwitchCase=TypeSwitchCase ":" StatementList=StatementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//TypeSwitchCase:
	//	"case" TypeList=TypeList | {TypeSwitchCase} "default";
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//TypeList:
	//	Type+=Type ("," Type+=Type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	//ForStmt:
	//	"for" (Condition=Condition | ForClause=ForClause | RangeClause=RangeClause)? Block=Block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//Condition:
	//	Expression=Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ForClause:
	//	{ForClause} InitStmt=InitStmt? ";" Condition=Condition? ";" PostStmt=PostStmt?;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	//InitStmt:
	//	SimpleStmt=SimpleStmt;
	public InitStmtElements getInitStmtAccess() {
		return pInitStmt;
	}
	
	public ParserRule getInitStmtRule() {
		return getInitStmtAccess().getRule();
	}
	
	//PostStmt:
	//	SimpleStmt=SimpleStmt;
	public PostStmtElements getPostStmtAccess() {
		return pPostStmt;
	}
	
	public ParserRule getPostStmtRule() {
		return getPostStmtAccess().getRule();
	}
	
	//RangeClause:
	//	(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")? "range" Expression=Expression;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	//GoStmt:
	//	"go" Expression=Expression;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	//SelectStmt:
	//	{SelectStmt} "select" "{" CommClause+=CommClause* "}";
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//CommClause:
	//	CommCase=CommCase ":" StatementList=StatementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//CommCase:
	//	"case" (SendStmt=SendStmt | RecvStmt=RecvStmt) | {CommCase} "default";
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//RecvStmt:
	//	(ExpressionList=ExpressionList "=" | IdentifierList=IdentifierList ":=")? RecvExpr=RecvExpr;
	public RecvStmtElements getRecvStmtAccess() {
		return pRecvStmt;
	}
	
	public ParserRule getRecvStmtRule() {
		return getRecvStmtAccess().getRule();
	}
	
	//RecvExpr:
	//	Expression=Expression;
	public RecvExprElements getRecvExprAccess() {
		return pRecvExpr;
	}
	
	public ParserRule getRecvExprRule() {
		return getRecvExprAccess().getRule();
	}
	
	//ReturnStmt:
	//	{ReturnStmt} "return" ExpressionList=ExpressionList?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//BreakStmt:
	//	{BreakStmt} "break" Label=Label?;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	//ContinueStmt:
	//	{ContinueStmt} "continue" Label=Label?;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	//GotoStmt:
	//	"goto" Label=Label;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	//FallthroughStmt:
	//	"fallthrough";
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	//DeferStmt:
	//	"defer" Expression=Expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	//PackageClause:
	//	"package" PackageName=PackageName;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//PackageName:
	//	identifier=identifier;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//ImportDecl:
	//	{ImportDecl} "import" (ImportSpec+=ImportSpec | "(" (ImportSpec+=ImportSpec ";")* ")");
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | PackageName=PackageName)? ImportPath=ImportPath;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//ImportPath:
	//	string_lit=string_lit;
	public ImportPathElements getImportPathAccess() {
		return pImportPath;
	}
	
	public ParserRule getImportPathRule() {
		return getImportPathAccess().getRule();
	}
	
	//comments:
	//	LETTER* "//" LETTER* | LETTER* "/*" LETTER* "*/";
	public CommentsElements getCommentsAccess() {
		return pComments;
	}
	
	public ParserRule getCommentsRule() {
		return getCommentsAccess().getRule();
	}
	
	//identifier:
	//	LETTER+=LETTER (LETTER+=LETTER | DECIMAL_DIGIT+=DECIMAL_DIGIT)*;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//int_lit:
	//	decimal_lit | octal_lit | hex_lit;
	public Int_litElements getInt_litAccess() {
		return pInt_lit;
	}
	
	public ParserRule getInt_litRule() {
		return getInt_litAccess().getRule();
	}
	
	//decimal_lit:
	//	DECIMAL_DIGIT DECIMAL_DIGIT*;
	public Decimal_litElements getDecimal_litAccess() {
		return pDecimal_lit;
	}
	
	public ParserRule getDecimal_litRule() {
		return getDecimal_litAccess().getRule();
	}
	
	//octal_lit:
	//	"0" OCTAL_DIGIT*;
	public Octal_litElements getOctal_litAccess() {
		return pOctal_lit;
	}
	
	public ParserRule getOctal_litRule() {
		return getOctal_litAccess().getRule();
	}
	
	//hex_lit:
	//	"0" ("x" | "X") HEX_DIGIT HEX_DIGIT*;
	public Hex_litElements getHex_litAccess() {
		return pHex_lit;
	}
	
	public ParserRule getHex_litRule() {
		return getHex_litAccess().getRule();
	}
	
	//float_lit:
	//	decimals "." decimals=decimals? exponent=exponent? | decimals exponent=exponent | "." decimals exponen=exponent?;
	public Float_litElements getFloat_litAccess() {
		return pFloat_lit;
	}
	
	public ParserRule getFloat_litRule() {
		return getFloat_litAccess().getRule();
	}
	
	//string_lit:
	//	raw_string_lit=raw_string_lit | interpreted_string_lit=interpreted_string_lit;
	public String_litElements getString_litAccess() {
		return pString_lit;
	}
	
	public ParserRule getString_litRule() {
		return getString_litAccess().getRule();
	}
	
	//raw_string_lit:
	//	"'" (unicode_char | newline)? "'";
	public Raw_string_litElements getRaw_string_litAccess() {
		return pRaw_string_lit;
	}
	
	public ParserRule getRaw_string_litRule() {
		return getRaw_string_litAccess().getRule();
	}
	
	//interpreted_string_lit:
	//	'"' (unicode_value | byte_value)? '"';
	public Interpreted_string_litElements getInterpreted_string_litAccess() {
		return pInterpreted_string_lit;
	}
	
	public ParserRule getInterpreted_string_litRule() {
		return getInterpreted_string_litAccess().getRule();
	}
	
	//unicode_char:
	//	"?" | "." | "," | "!";
	public Unicode_charElements getUnicode_charAccess() {
		return pUnicode_char;
	}
	
	public ParserRule getUnicode_charRule() {
		return getUnicode_charAccess().getRule();
	}
	
	//newline:
	//	"U+000A";
	public NewlineElements getNewlineAccess() {
		return pNewline;
	}
	
	public ParserRule getNewlineRule() {
		return getNewlineAccess().getRule();
	}
	
	//decimals:
	//	DECIMAL_DIGIT+=DECIMAL_DIGIT DECIMAL_DIGIT+=DECIMAL_DIGIT*;
	public DecimalsElements getDecimalsAccess() {
		return pDecimals;
	}
	
	public ParserRule getDecimalsRule() {
		return getDecimalsAccess().getRule();
	}
	
	//exponent:
	//	("e" | "E") ("+" | "-")? decimals=decimals;
	public ExponentElements getExponentAccess() {
		return pExponent;
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}
	
	//imaginary_lit:
	//	(decimals=decimals | float_lit=float_lit) "i";
	public Imaginary_litElements getImaginary_litAccess() {
		return pImaginary_lit;
	}
	
	public ParserRule getImaginary_litRule() {
		return getImaginary_litAccess().getRule();
	}
	
	//rune_lit:
	//	"'" (unicode_value=unicode_value | byte_value=byte_value) "'";
	public Rune_litElements getRune_litAccess() {
		return pRune_lit;
	}
	
	public ParserRule getRune_litRule() {
		return getRune_litAccess().getRule();
	}
	
	//unicode_value:
	//	LETTER | little_u_value | big_u_value | escaped_char;
	public Unicode_valueElements getUnicode_valueAccess() {
		return pUnicode_value;
	}
	
	public ParserRule getUnicode_valueRule() {
		return getUnicode_valueAccess().getRule();
	}
	
	//byte_value:
	//	octal_byte_value | hex_byte_value;
	public Byte_valueElements getByte_valueAccess() {
		return pByte_value;
	}
	
	public ParserRule getByte_valueRule() {
		return getByte_valueAccess().getRule();
	}
	
	//octal_byte_value:
	//	CHAR OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public Octal_byte_valueElements getOctal_byte_valueAccess() {
		return pOctal_byte_value;
	}
	
	public ParserRule getOctal_byte_valueRule() {
		return getOctal_byte_valueAccess().getRule();
	}
	
	//hex_byte_value:
	//	CHAR "x" HEX_DIGIT HEX_DIGIT;
	public Hex_byte_valueElements getHex_byte_valueAccess() {
		return pHex_byte_value;
	}
	
	public ParserRule getHex_byte_valueRule() {
		return getHex_byte_valueAccess().getRule();
	}
	
	//little_u_value:
	//	CHAR "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Little_u_valueElements getLittle_u_valueAccess() {
		return pLittle_u_value;
	}
	
	public ParserRule getLittle_u_valueRule() {
		return getLittle_u_valueAccess().getRule();
	}
	
	//big_u_value:
	//	CHAR "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Big_u_valueElements getBig_u_valueAccess() {
		return pBig_u_value;
	}
	
	public ParserRule getBig_u_valueRule() {
		return getBig_u_valueAccess().getRule();
	}
	
	//escaped_char:
	//	CHAR ("a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"');
	public Escaped_charElements getEscaped_charAccess() {
		return pEscaped_char;
	}
	
	public ParserRule getEscaped_charRule() {
		return getEscaped_charAccess().getRule();
	}
	
	//CHAR:
	//	"\'";
	public CHARElements getCHARAccess() {
		return pCHAR;
	}
	
	public ParserRule getCHARRule() {
		return getCHARAccess().getRule();
	}
	
	//terminal OCTAL_DIGIT:
	//	"0" | "1" | "2" | "3" | "4" | "5" | "6";
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal DECIMAL_DIGIT:
	//	OCTAL_DIGIT | SEVEN_TO_NINE;
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal HEX_DIGIT:
	//	DECIMAL_DIGIT | A_TO_F;
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal SEVEN_TO_NINE:
	//	"7" | "8" | "9";
	public TerminalRule getSEVEN_TO_NINERule() {
		return tSEVEN_TO_NINE;
	}
	
	//terminal A_TO_F:
	//	'A' | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f";
	public TerminalRule getA_TO_FRule() {
		return tA_TO_F;
	}
	
	//terminal LETTER:
	//	A_TO_F | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" |
	//	"r" | "s" | "t" | "u" | "v" | "x" | "y" | "z" | "_" |
	//	"G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" |
	//	"R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
