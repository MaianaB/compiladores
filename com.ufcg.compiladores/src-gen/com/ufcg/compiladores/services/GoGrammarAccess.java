/*
 * generated by Xtext 2.14.0
 */
package com.ufcg.compiladores.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SouceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SouceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageClauseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cImportDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cTopLevelDeclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//SouceFile:
		//	PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")?;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")?
		public Group getGroup() { return cGroup; }
		
		//PackageClause
		public RuleCall getPackageClauseParserRuleCall_0() { return cPackageClauseParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//(ImportDecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//ImportDecl
		public RuleCall getImportDeclParserRuleCall_2_0() { return cImportDeclParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(TopLevelDecl ";")?
		public Group getGroup_3() { return cGroup_3; }
		
		//TopLevelDecl
		public RuleCall getTopLevelDeclParserRuleCall_3_0() { return cTopLevelDeclParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Type:
		//	TypeName | TypeLit | "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName | TypeLit | "(" Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_0() { return cTypeNameParserRuleCall_0; }
		
		//TypeLit
		public RuleCall getTypeLitParserRuleCall_1() { return cTypeLitParserRuleCall_1; }
		
		//"(" Type ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2_1() { return cTypeParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeNameLinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeName:
		//	identifier TypeNameLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier TypeNameLinha
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//TypeNameLinha
		public RuleCall getTypeNameLinhaParserRuleCall_1() { return cTypeNameLinhaParserRuleCall_1; }
	}
	public class TypeNameLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeNameLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeNameLinha:
		//	"." identifier | QualifiedIdent | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." identifier | QualifiedIdent | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." identifier
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0_1() { return cIdentifierParserRuleCall_0_1; }
		
		//QualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2() { return cANY_OTHERTerminalRuleCall_2; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeLitLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0 = (RuleCall)cTypeLitLinhaAssignment_0_1.eContents().get(0);
		private final Assignment cStructTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStructTypeStructTypeParserRuleCall_1_0 = (RuleCall)cStructTypeAssignment_1.eContents().get(0);
		private final Assignment cPointerTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPointerTypePointerTypeParserRuleCall_2_0 = (RuleCall)cPointerTypeAssignment_2.eContents().get(0);
		private final Assignment cFunctionTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionTypeFunctionTypeParserRuleCall_3_0 = (RuleCall)cFunctionTypeAssignment_3.eContents().get(0);
		private final Assignment cInterfaceTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cInterfaceTypeInterfaceTypeParserRuleCall_4_0 = (RuleCall)cInterfaceTypeAssignment_4.eContents().get(0);
		private final Assignment cMapTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMapTypeMapTypeParserRuleCall_5_0 = (RuleCall)cMapTypeAssignment_5.eContents().get(0);
		private final Assignment cChannelTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cChannelTypeChannelTypeParserRuleCall_6_0 = (RuleCall)cChannelTypeAssignment_6.eContents().get(0);
		
		//TypeLit:
		//	"[" TypeLitLinha+=TypeLitLinha | StructType+=StructType | PointerType+=PointerType | FunctionType+=FunctionType |
		//	InterfaceType+=InterfaceType | MapType+=MapType | ChannelType+=ChannelType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" TypeLitLinha+=TypeLitLinha | StructType+=StructType | PointerType+=PointerType | FunctionType+=FunctionType |
		//InterfaceType+=InterfaceType | MapType+=MapType | ChannelType+=ChannelType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" TypeLitLinha+=TypeLitLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//TypeLitLinha+=TypeLitLinha
		public Assignment getTypeLitLinhaAssignment_0_1() { return cTypeLitLinhaAssignment_0_1; }
		
		//TypeLitLinha
		public RuleCall getTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0() { return cTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0; }
		
		//StructType+=StructType
		public Assignment getStructTypeAssignment_1() { return cStructTypeAssignment_1; }
		
		//StructType
		public RuleCall getStructTypeStructTypeParserRuleCall_1_0() { return cStructTypeStructTypeParserRuleCall_1_0; }
		
		//PointerType+=PointerType
		public Assignment getPointerTypeAssignment_2() { return cPointerTypeAssignment_2; }
		
		//PointerType
		public RuleCall getPointerTypePointerTypeParserRuleCall_2_0() { return cPointerTypePointerTypeParserRuleCall_2_0; }
		
		//FunctionType+=FunctionType
		public Assignment getFunctionTypeAssignment_3() { return cFunctionTypeAssignment_3; }
		
		//FunctionType
		public RuleCall getFunctionTypeFunctionTypeParserRuleCall_3_0() { return cFunctionTypeFunctionTypeParserRuleCall_3_0; }
		
		//InterfaceType+=InterfaceType
		public Assignment getInterfaceTypeAssignment_4() { return cInterfaceTypeAssignment_4; }
		
		//InterfaceType
		public RuleCall getInterfaceTypeInterfaceTypeParserRuleCall_4_0() { return cInterfaceTypeInterfaceTypeParserRuleCall_4_0; }
		
		//MapType+=MapType
		public Assignment getMapTypeAssignment_5() { return cMapTypeAssignment_5; }
		
		//MapType
		public RuleCall getMapTypeMapTypeParserRuleCall_5_0() { return cMapTypeMapTypeParserRuleCall_5_0; }
		
		//ChannelType+=ChannelType
		public Assignment getChannelTypeAssignment_6() { return cChannelTypeAssignment_6; }
		
		//ChannelType
		public RuleCall getChannelTypeChannelTypeParserRuleCall_6_0() { return cChannelTypeChannelTypeParserRuleCall_6_0; }
	}
	public class TypeLitLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeLitLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_2_0 = (RuleCall)cElementTypeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cElementTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TypeLitLinha:
		//	ArrayLength "]" ElementType+=ElementType |
		//	"]" ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength "]" ElementType+=ElementType | "]" ElementType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayLength "]" ElementType+=ElementType
		public Group getGroup_0() { return cGroup_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_0_0() { return cArrayLengthParserRuleCall_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//ElementType+=ElementType
		public Assignment getElementTypeAssignment_0_2() { return cElementTypeAssignment_0_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_2_0() { return cElementTypeElementTypeParserRuleCall_0_2_0; }
		
		//"]" ElementType
		public Group getGroup_1() { return cGroup_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0() { return cRightSquareBracketKeyword_1_0; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1_1() { return cElementTypeParserRuleCall_1_1; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ArrayLength");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArrayLength:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ElementType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldDeclAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldDeclFieldDeclParserRuleCall_2_0_0 = (RuleCall)cFieldDeclAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructType:
		//	"struct" "{" (FieldDecl+=FieldDecl ";")* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" "{" (FieldDecl+=FieldDecl ";")* ";"
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(FieldDecl+=FieldDecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//FieldDecl+=FieldDecl
		public Assignment getFieldDeclAssignment_2_0() { return cFieldDeclAssignment_2_0; }
		
		//FieldDecl
		public RuleCall getFieldDeclFieldDeclParserRuleCall_2_0_0() { return cFieldDeclFieldDeclParserRuleCall_2_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifierListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cEmbeddedFieldParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTagParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FieldDecl:
		//	(IdentifierList Type | EmbeddedField) Tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//(IdentifierList Type | EmbeddedField) Tag?
		public Group getGroup() { return cGroup; }
		
		//IdentifierList Type | EmbeddedField
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//IdentifierList Type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_0_0() { return cIdentifierListParserRuleCall_0_0_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0_0_1() { return cTypeParserRuleCall_0_0_1; }
		
		//EmbeddedField
		public RuleCall getEmbeddedFieldParserRuleCall_0_1() { return cEmbeddedFieldParserRuleCall_0_1; }
		
		//Tag?
		public RuleCall getTagParserRuleCall_1() { return cTagParserRuleCall_1; }
	}
	public class EmbeddedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.EmbeddedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EmbeddedField:
		//	"*"? TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"? TypeName
		public Group getGroup() { return cGroup; }
		
		//"*"?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Tag");
		private final RuleCall cString_litParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Tag:
		//	string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall() { return cString_litParserRuleCall; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PointerType:
		//	"*" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" Type
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FunctionType:
		//	"func" Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cResultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		
		//Signature:
		//	Parameters Result+=Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters Result+=Result?
		public Group getGroup() { return cGroup; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Result+=Result?
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_1_0() { return cResultResultParserRuleCall_1_0; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Result:
		//	Parameters | Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters | Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameterListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"(" (ParameterList ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (ParameterList ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ParameterList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_1_0() { return cParameterListParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterDeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclParserRuleCall_1_1_0 = (RuleCall)cParameterDeclAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	ParameterDecl ("," ParameterDecl+=ParameterDecl)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDecl ("," ParameterDecl+=ParameterDecl)?
		public Group getGroup() { return cGroup; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_0() { return cParameterDeclParserRuleCall_0; }
		
		//("," ParameterDecl+=ParameterDecl)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ParameterDecl+=ParameterDecl
		public Assignment getParameterDeclAssignment_1_1() { return cParameterDeclAssignment_1_1; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParameterDeclParserRuleCall_1_1_0() { return cParameterDeclParameterDeclParserRuleCall_1_1_0; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ParameterDecl:
		//	IdentifierList? "..."? Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList? "..."? Type
		public Group getGroup() { return cGroup; }
		
		//IdentifierList?
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.InterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMethodSpecParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InterfaceType:
		//	"interface" "{" (MethodSpec ";")? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"interface" "{" (MethodSpec ";")? "}"
		public Group getGroup() { return cGroup; }
		
		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(MethodSpec ";")?
		public Group getGroup_2() { return cGroup_2; }
		
		//MethodSpec
		public RuleCall getMethodSpecParserRuleCall_2_0() { return cMethodSpecParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMethodNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cInterfaceTypeNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MethodSpec:
		//	MethodName Signature | InterfaceTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodName Signature | InterfaceTypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodName Signature
		public Group getGroup_0() { return cGroup_0; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_0_0() { return cMethodNameParserRuleCall_0_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//InterfaceTypeName
		public RuleCall getInterfaceTypeNameParserRuleCall_1() { return cInterfaceTypeNameParserRuleCall_1; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class InterfaceTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.InterfaceTypeName");
		private final RuleCall cTypeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InterfaceTypeName:
		//	TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall() { return cTypeNameParserRuleCall; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cKeyTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementTypeElementTypeParserRuleCall_4_0 = (RuleCall)cElementTypeAssignment_4.eContents().get(0);
		
		//MapType:
		//	"map" "[" KeyType "]" ElementType+=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//"map" "[" KeyType "]" ElementType+=ElementType
		public Group getGroup() { return cGroup; }
		
		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//KeyType
		public RuleCall getKeyTypeParserRuleCall_2() { return cKeyTypeParserRuleCall_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//ElementType+=ElementType
		public Assignment getElementTypeAssignment_4() { return cElementTypeAssignment_4; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_4_0() { return cElementTypeElementTypeParserRuleCall_4_0; }
	}
	public class KeyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.KeyType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//KeyType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ChannelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cChanKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cChanKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cChanKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ChannelType:
		//	("chan" | "chan" "<-" | "<-" "chan") ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//("chan" | "chan" "<-" | "<-" "chan") ElementType
		public Group getGroup() { return cGroup; }
		
		//"chan" | "chan" "<-" | "<-" "chan"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_0() { return cChanKeyword_0_0; }
		
		//"chan" "<-"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"chan"
		public Keyword getChanKeyword_0_1_0() { return cChanKeyword_0_1_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_1() { return cLessThanSignHyphenMinusKeyword_0_1_1; }
		
		//"<-" "chan"
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_2_0() { return cLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_2_1() { return cChanKeyword_0_2_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1() { return cElementTypeParserRuleCall_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" StatementList "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" StatementList "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StatementList:
		//	Statement ";";
		@Override public ParserRule getRule() { return rule; }
		
		//Statement ";"
		public Group getGroup() { return cGroup; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//	ConstDecl | TypeDecl | VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstDecl | TypeDecl | VarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_0() { return cConstDeclParserRuleCall_0; }
		
		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_1() { return cTypeDeclParserRuleCall_1; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_2() { return cVarDeclParserRuleCall_2; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFuncKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTopLevelDeclLinhaParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TopLevelDecl:
		//	Declaration | "func" topLevelDeclLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | "func" topLevelDeclLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//"func" topLevelDeclLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//"func"
		public Keyword getFuncKeyword_1_0() { return cFuncKeyword_1_0; }
		
		//topLevelDeclLinha
		public RuleCall getTopLevelDeclLinhaParserRuleCall_1_1() { return cTopLevelDeclLinhaParserRuleCall_1_1; }
	}
	public class TopLevelDeclLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.topLevelDeclLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cFunctionBodyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_0_2_0 = (RuleCall)cFunctionBodyAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cReceiverParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cMethodNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cSignatureAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_1_2_0 = (RuleCall)cSignatureAssignment_1_2.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_1_3_0 = (RuleCall)cFunctionBodyAssignment_1_3.eContents().get(0);
		
		//topLevelDeclLinha:
		//	FunctionName Signature FunctionBody+=FunctionBody? | Receiver MethodName Signature+=Signature
		//	FunctionBody+=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionName Signature FunctionBody+=FunctionBody? | Receiver MethodName Signature+=Signature
		//FunctionBody+=FunctionBody?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionName Signature FunctionBody+=FunctionBody?
		public Group getGroup_0() { return cGroup_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_0_0() { return cFunctionNameParserRuleCall_0_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//FunctionBody+=FunctionBody?
		public Assignment getFunctionBodyAssignment_0_2() { return cFunctionBodyAssignment_0_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_0_2_0() { return cFunctionBodyFunctionBodyParserRuleCall_0_2_0; }
		
		//Receiver MethodName Signature+=Signature FunctionBody+=FunctionBody?
		public Group getGroup_1() { return cGroup_1; }
		
		//Receiver
		public RuleCall getReceiverParserRuleCall_1_0() { return cReceiverParserRuleCall_1_0; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_1_1() { return cMethodNameParserRuleCall_1_1; }
		
		//Signature+=Signature
		public Assignment getSignatureAssignment_1_2() { return cSignatureAssignment_1_2; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_2_0() { return cSignatureSignatureParserRuleCall_1_2_0; }
		
		//FunctionBody+=FunctionBody?
		public Assignment getFunctionBodyAssignment_1_3() { return cFunctionBodyAssignment_1_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_1_3_0() { return cFunctionBodyFunctionBodyParserRuleCall_1_3_0; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ConstDecl:
		//	"const" (ConstSpec | "(" (ConstSpec ";")? ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"const" (ConstSpec | "(" (ConstSpec ";")? ")")
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//ConstSpec | "(" (ConstSpec ";")? ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ConstSpec
		public RuleCall getConstSpecParserRuleCall_1_0() { return cConstSpecParserRuleCall_1_0; }
		
		//"(" (ConstSpec ";")? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ConstSpec ";")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ConstSpec
		public RuleCall getConstSpecParserRuleCall_1_1_1_0() { return cConstSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ConstSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_2_0 = (RuleCall)cExpressionListAssignment_1_2.eContents().get(0);
		
		//ConstSpec:
		//	IdentifierList (Type? "=" ExpressionList+=ExpressionList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type? "=" ExpressionList+=ExpressionList)?
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//(Type? "=" ExpressionList+=ExpressionList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Type?
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//ExpressionList+=ExpressionList
		public Assignment getExpressionListAssignment_1_2() { return cExpressionListAssignment_1_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_2_0() { return cExpressionListExpressionListParserRuleCall_1_2_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IdentifierList:
		//	identifier ("," identifier)?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier ("," identifier)?
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//("," identifier)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	Expression ("," Expression+=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ("," Expression+=Expression)?
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//("," Expression+=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//TypeDecl:
		//	"type" (TypeSpec | "(" (TypeSpec ";")? ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"type" (TypeSpec | "(" (TypeSpec ";")? ")")
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//TypeSpec | "(" (TypeSpec ";")? ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TypeSpec
		public RuleCall getTypeSpecParserRuleCall_1_0() { return cTypeSpecParserRuleCall_1_0; }
		
		//"(" (TypeSpec ";")? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(TypeSpec ";")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//TypeSpec
		public RuleCall getTypeSpecParserRuleCall_1_1_1_0() { return cTypeSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpec:
		//	AliasDecl | TypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//AliasDecl | TypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AliasDecl
		public RuleCall getAliasDeclParserRuleCall_0() { return cAliasDeclParserRuleCall_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_1() { return cTypeDefParserRuleCall_1; }
	}
	public class AliasDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.AliasDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AliasDecl:
		//	identifier "=" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier "=" Type
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeDef:
		//	identifier Type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier Type
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//VarDecl:
		//	"var" (VarSpec | "(" (VarSpec ";")? ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"var" (VarSpec | "(" (VarSpec ";")? ")")
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//VarSpec | "(" (VarSpec ";")? ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//VarSpec
		public RuleCall getVarSpecParserRuleCall_1_0() { return cVarSpecParserRuleCall_1_0; }
		
		//"(" (VarSpec ";")? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(VarSpec ";")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//VarSpec
		public RuleCall getVarSpecParserRuleCall_1_1_1_0() { return cVarSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.VarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_1_1_0 = (RuleCall)cExpressionListAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//VarSpec:
		//	IdentifierList (Type ("=" ExpressionList+=ExpressionList)? | "=" ExpressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type ("=" ExpressionList+=ExpressionList)? | "=" ExpressionList)
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//Type ("=" ExpressionList+=ExpressionList)? | "=" ExpressionList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Type ("=" ExpressionList+=ExpressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0_0() { return cTypeParserRuleCall_1_0_0; }
		
		//("=" ExpressionList+=ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//ExpressionList+=ExpressionList
		public Assignment getExpressionListAssignment_1_0_1_1() { return cExpressionListAssignment_1_0_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_0_1_1_0; }
		
		//"=" ExpressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_1_1() { return cExpressionListParserRuleCall_1_1_1; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ShortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ShortVarDecl:
		//	IdentifierList ":=" ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList ":=" ExpressionList
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_2() { return cExpressionListParserRuleCall_2; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSignatureParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cFunctionBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_3_0 = (RuleCall)cFunctionBodyAssignment_3.eContents().get(0);
		
		//FunctionDecl:
		//	"func" FunctionName Signature FunctionBody+=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" FunctionName Signature FunctionBody+=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_2() { return cSignatureParserRuleCall_2; }
		
		//FunctionBody+=FunctionBody?
		public Assignment getFunctionBodyAssignment_3() { return cFunctionBodyAssignment_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_3_0() { return cFunctionBodyFunctionBodyParserRuleCall_3_0; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionBody");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionBody:
		//	Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReceiverParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_4_0 = (RuleCall)cFunctionBodyAssignment_4.eContents().get(0);
		
		//MethodDecl:
		//	"func" Receiver MethodName Signature+=Signature FunctionBody+=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Receiver MethodName Signature+=Signature FunctionBody+=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Receiver
		public RuleCall getReceiverParserRuleCall_1() { return cReceiverParserRuleCall_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
		
		//Signature+=Signature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_3_0() { return cSignatureSignatureParserRuleCall_3_0; }
		
		//FunctionBody+=FunctionBody?
		public Assignment getFunctionBodyAssignment_4() { return cFunctionBodyAssignment_4; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_4_0() { return cFunctionBodyFunctionBodyParserRuleCall_4_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Receiver:
		//	Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperandNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Operand:
		//	Literal | OperandName | "(" Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | OperandName | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//OperandName
		public RuleCall getOperandNameParserRuleCall_1() { return cOperandNameParserRuleCall_1; }
		
		//"(" Expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	BasicLit | CompositeLit | FunctionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicLit | CompositeLit | FunctionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicLit
		public RuleCall getBasicLitParserRuleCall_0() { return cBasicLitParserRuleCall_0; }
		
		//CompositeLit
		public RuleCall getCompositeLitParserRuleCall_1() { return cCompositeLitParserRuleCall_1; }
		
		//FunctionLit
		public RuleCall getFunctionLitParserRuleCall_2() { return cFunctionLitParserRuleCall_2; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BasicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInt_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRune_litParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cString_litParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BasicLit:
		//	int_lit | float_lit | rune_lit | string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//int_lit | float_lit | rune_lit | string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int_lit
		public RuleCall getInt_litParserRuleCall_0() { return cInt_litParserRuleCall_0; }
		
		//float_lit
		public RuleCall getFloat_litParserRuleCall_1() { return cFloat_litParserRuleCall_1; }
		
		//rune_lit
		public RuleCall getRune_litParserRuleCall_2() { return cRune_litParserRuleCall_2; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall_3() { return cString_litParserRuleCall_3; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.OperandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandName:
		//	identifier | QualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier | QualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//QualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
	}
	public class QualifiedIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.QualifiedIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedIdent:
		//	PackageName "." identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageName "." identifier
		public Group getGroup() { return cGroup; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_0() { return cPackageNameParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CompositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteralTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLiteralValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralValueAssignment_1.eContents().get(0);
		
		//CompositeLit:
		//	LiteralType LiteralValue+=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralType LiteralValue+=LiteralValue
		public Group getGroup() { return cGroup; }
		
		//LiteralType
		public RuleCall getLiteralTypeParserRuleCall_0() { return cLiteralTypeParserRuleCall_0; }
		
		//LiteralValue+=LiteralValue
		public Assignment getLiteralValueAssignment_1() { return cLiteralValueAssignment_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_1_0() { return cLiteralValueLiteralValueParserRuleCall_1_0; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LiteralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLiteralTypeLinhaParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMapTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeNameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LiteralType:
		//	StructType | "[" LiteralTypeLinha | ElementType | MapType | TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//StructType | "[" LiteralTypeLinha | ElementType | MapType | TypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StructType
		public RuleCall getStructTypeParserRuleCall_0() { return cStructTypeParserRuleCall_0; }
		
		//"[" LiteralTypeLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//LiteralTypeLinha
		public RuleCall getLiteralTypeLinhaParserRuleCall_1_1() { return cLiteralTypeLinhaParserRuleCall_1_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_2() { return cElementTypeParserRuleCall_2; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_3() { return cMapTypeParserRuleCall_3; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_4() { return cTypeNameParserRuleCall_4; }
	}
	public class LiteralTypeLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LiteralTypeLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_2_0 = (RuleCall)cElementTypeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cElementTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopFullStopFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//LiteralTypeLinha:
		//	ArrayLength "]" ElementType+=ElementType |
		//	"]" ElementType |
		//	"..." "]";
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength "]" ElementType+=ElementType | "]" ElementType | "..." "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayLength "]" ElementType+=ElementType
		public Group getGroup_0() { return cGroup_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_0_0() { return cArrayLengthParserRuleCall_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//ElementType+=ElementType
		public Assignment getElementTypeAssignment_0_2() { return cElementTypeAssignment_0_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_2_0() { return cElementTypeElementTypeParserRuleCall_0_2_0; }
		
		//"]" ElementType
		public Group getGroup_1() { return cGroup_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0() { return cRightSquareBracketKeyword_1_0; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1_1() { return cElementTypeParserRuleCall_1_1; }
		
		//"..." "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_2_0() { return cFullStopFullStopFullStopKeyword_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LiteralValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementListElementListParserRuleCall_1_0_0 = (RuleCall)cElementListAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LiteralValue:
		//	"{" (ElementList+=ElementList ","?)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (ElementList+=ElementList ","?)? "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(ElementList+=ElementList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ElementList+=ElementList
		public Assignment getElementListAssignment_1_0() { return cElementListAssignment_1_0; }
		
		//ElementList
		public RuleCall getElementListElementListParserRuleCall_1_0_0() { return cElementListElementListParserRuleCall_1_0_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyedElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyedElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyedElementKeyedElementParserRuleCall_1_1_0 = (RuleCall)cKeyedElementAssignment_1_1.eContents().get(0);
		
		//ElementList:
		//	KeyedElement ("," KeyedElement+=KeyedElement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//KeyedElement ("," KeyedElement+=KeyedElement)?
		public Group getGroup() { return cGroup; }
		
		//KeyedElement
		public RuleCall getKeyedElementParserRuleCall_0() { return cKeyedElementParserRuleCall_0; }
		
		//("," KeyedElement+=KeyedElement)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//KeyedElement+=KeyedElement
		public Assignment getKeyedElementAssignment_1_1() { return cKeyedElementAssignment_1_1; }
		
		//KeyedElement
		public RuleCall getKeyedElementKeyedElementParserRuleCall_1_1_0() { return cKeyedElementKeyedElementParserRuleCall_1_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.KeyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//KeyedElement:
		//	(Key ":")? Element+=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//(Key ":")? Element+=Element
		public Group getGroup() { return cGroup; }
		
		//(Key ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//Key
		public RuleCall getKeyParserRuleCall_0_0() { return cKeyParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//Element+=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Key:
		//	FieldName | Expression+=Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//FieldName | Expression+=Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FieldName
		public RuleCall getFieldNameParserRuleCall_0() { return cFieldNameParserRuleCall_0; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_2() { return cLiteralValueParserRuleCall_2; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FieldName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FunctionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFunctionBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_2_0 = (RuleCall)cFunctionBodyAssignment_2.eContents().get(0);
		
		//FunctionLit:
		//	"func" Signature FunctionBody+=FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature FunctionBody+=FunctionBody
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
		
		//FunctionBody+=FunctionBody
		public Assignment getFunctionBodyAssignment_2() { return cFunctionBodyAssignment_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_2_0() { return cFunctionBodyFunctionBodyParserRuleCall_2_0; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cConversionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cMethodExprParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_2_1.eContents().get(0);
		
		//PrimaryExpr:
		//	Operand PrimaryExprLinha+=PrimaryExprLinha | Conversion PrimaryExprLinha+=PrimaryExprLinha | MethodExpr
		//	PrimaryExprLinha+=PrimaryExprLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//Operand PrimaryExprLinha+=PrimaryExprLinha | Conversion PrimaryExprLinha+=PrimaryExprLinha | MethodExpr
		//PrimaryExprLinha+=PrimaryExprLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operand PrimaryExprLinha+=PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//Operand
		public RuleCall getOperandParserRuleCall_0_0() { return cOperandParserRuleCall_0_0; }
		
		//PrimaryExprLinha+=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_0_1() { return cPrimaryExprLinhaAssignment_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0; }
		
		//Conversion PrimaryExprLinha+=PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//Conversion
		public RuleCall getConversionParserRuleCall_1_0() { return cConversionParserRuleCall_1_0; }
		
		//PrimaryExprLinha+=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_1() { return cPrimaryExprLinhaAssignment_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0; }
		
		//MethodExpr PrimaryExprLinha+=PrimaryExprLinha
		public Group getGroup_2() { return cGroup_2; }
		
		//MethodExpr
		public RuleCall getMethodExprParserRuleCall_2_0() { return cMethodExprParserRuleCall_2_0; }
		
		//PrimaryExprLinha+=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_2_1() { return cPrimaryExprLinhaAssignment_2_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0; }
	}
	public class PrimaryExprLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PrimaryExprLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSelectorParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cPrimaryExprLinhaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_2_0 = (RuleCall)cPrimaryExprLinhaAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cIndexLinhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexLinhaIndexLinhaParserRuleCall_1_2_0 = (RuleCall)cIndexLinhaAssignment_1_2.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_3_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cTypeAssertionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cArgumentsParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_3_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_3_1.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimaryExprLinha:
		//	Selector PrimaryExpr PrimaryExprLinha+=PrimaryExprLinha |
		//	"[" Expression? IndexLinha+=IndexLinha PrimaryExprLinha+=PrimaryExprLinha | TypeAssertion
		//	PrimaryExprLinha+=PrimaryExprLinha | Arguments PrimaryExprLinha+=PrimaryExprLinha | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//Selector PrimaryExpr PrimaryExprLinha+=PrimaryExprLinha | "[" Expression? IndexLinha+=IndexLinha
		//PrimaryExprLinha+=PrimaryExprLinha | TypeAssertion PrimaryExprLinha+=PrimaryExprLinha | Arguments
		//PrimaryExprLinha+=PrimaryExprLinha | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Selector PrimaryExpr PrimaryExprLinha+=PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//Selector
		public RuleCall getSelectorParserRuleCall_0_0() { return cSelectorParserRuleCall_0_0; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0_1() { return cPrimaryExprParserRuleCall_0_1; }
		
		//PrimaryExprLinha+=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_0_2() { return cPrimaryExprLinhaAssignment_0_2; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_2_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_2_0; }
		
		//"[" Expression? IndexLinha+=IndexLinha PrimaryExprLinha+=PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//Expression?
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//IndexLinha+=IndexLinha
		public Assignment getIndexLinhaAssignment_1_2() { return cIndexLinhaAssignment_1_2; }
		
		//IndexLinha
		public RuleCall getIndexLinhaIndexLinhaParserRuleCall_1_2_0() { return cIndexLinhaIndexLinhaParserRuleCall_1_2_0; }
		
		//PrimaryExprLinha+=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_3() { return cPrimaryExprLinhaAssignment_1_3; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_3_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_3_0; }
		
		//TypeAssertion PrimaryExprLinha+=PrimaryExprLinha
		public Group getGroup_2() { return cGroup_2; }
		
		//TypeAssertion
		public RuleCall getTypeAssertionParserRuleCall_2_0() { return cTypeAssertionParserRuleCall_2_0; }
		
		//PrimaryExprLinha+=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_2_1() { return cPrimaryExprLinhaAssignment_2_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0; }
		
		//Arguments PrimaryExprLinha+=PrimaryExprLinha
		public Group getGroup_3() { return cGroup_3; }
		
		//Arguments
		public RuleCall getArgumentsParserRuleCall_3_0() { return cArgumentsParserRuleCall_3_0; }
		
		//PrimaryExprLinha+=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_3_1() { return cPrimaryExprLinhaAssignment_3_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_3_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_3_1_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_4() { return cANY_OTHERTerminalRuleCall_4; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Selector:
		//	"." identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//"." identifier
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
	}
	public class IndexLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IndexLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cSliceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IndexLinha:
		//	"]" | Slice;
		@Override public ParserRule getRule() { return rule; }
		
		//"]" | Slice
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0() { return cRightSquareBracketKeyword_0; }
		
		//Slice
		public RuleCall getSliceParserRuleCall_1() { return cSliceParserRuleCall_1; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDecimalsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Slice:
		//	":" decimals? ":" decimals "]";
		@Override public ParserRule getRule() { return rule; }
		
		//":" decimals? ":" decimals "]"
		public Group getGroup() { return cGroup; }
		
		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//decimals?
		public RuleCall getDecimalsParserRuleCall_1() { return cDecimalsParserRuleCall_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_3() { return cDecimalsParserRuleCall_3; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeAssertion:
		//	"." "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"." "(" Type ")"
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_1_1_1_0 = (RuleCall)cExpressionListAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Arguments:
		//	"(" ((=> ExpressionList | Type ("," ExpressionList+=ExpressionList)?) "..."? ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" ((=> ExpressionList | Type ("," ExpressionList+=ExpressionList)?) "..."? ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//((=> ExpressionList | Type ("," ExpressionList+=ExpressionList)?) "..."? ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ExpressionList | Type ("," ExpressionList+=ExpressionList)?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//=> ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_0_0() { return cExpressionListParserRuleCall_1_0_0; }
		
		//Type ("," ExpressionList+=ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0_1_0() { return cTypeParserRuleCall_1_0_1_0; }
		
		//("," ExpressionList+=ExpressionList)?
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//ExpressionList+=ExpressionList
		public Assignment getExpressionListAssignment_1_0_1_1_1() { return cExpressionListAssignment_1_0_1_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_1_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_0_1_1_1_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.MethodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReceiverTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MethodExpr:
		//	ReceiverType "." MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//ReceiverType "." MethodName
		public Group getGroup() { return cGroup; }
		
		//ReceiverType
		public RuleCall getReceiverTypeParserRuleCall_0() { return cReceiverTypeParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ReceiverType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ReceiverType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionLinhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLinhaExpressionLinhaParserRuleCall_1_0 = (RuleCall)cExpressionLinhaAssignment_1.eContents().get(0);
		
		//Expression:
		//	UnaryExpr ExpressionLinha+=ExpressionLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr ExpressionLinha+=ExpressionLinha
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//ExpressionLinha+=ExpressionLinha
		public Assignment getExpressionLinhaAssignment_1() { return cExpressionLinhaAssignment_1; }
		
		//ExpressionLinha
		public RuleCall getExpressionLinhaExpressionLinhaParserRuleCall_1_0() { return cExpressionLinhaExpressionLinhaParserRuleCall_1_0; }
	}
	public class ExpressionLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExpressionLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cBinary_opParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpressionLinhaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionLinhaExpressionLinhaParserRuleCall_0_2_0 = (RuleCall)cExpressionLinhaAssignment_0_2.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionLinha:
		//	binary_op Expression ExpressionLinha+=ExpressionLinha | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//binary_op Expression ExpressionLinha+=ExpressionLinha | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//binary_op Expression ExpressionLinha+=ExpressionLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//binary_op
		public RuleCall getBinary_opParserRuleCall_0_0() { return cBinary_opParserRuleCall_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//ExpressionLinha+=ExpressionLinha
		public Assignment getExpressionLinhaAssignment_0_2() { return cExpressionLinhaAssignment_0_2; }
		
		//ExpressionLinha
		public RuleCall getExpressionLinhaExpressionLinhaParserRuleCall_0_2_0() { return cExpressionLinhaExpressionLinhaParserRuleCall_0_2_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_opParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cUnaryExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//UnaryExpr:
		//	unary_op UnaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		////	PrimaryExpr | unary_op UnaryExpr
		//unary_op UnaryExpr
		public Group getGroup() { return cGroup; }
		
		////	PrimaryExpr | unary_op UnaryExpr
		//unary_op
		public RuleCall getUnary_opParserRuleCall_0() { return cUnary_opParserRuleCall_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_1() { return cUnaryExprParserRuleCall_1; }
	}
	public class Binary_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.binary_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cRel_opParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAdd_opParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMul_opParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//binary_op:
		//	"||" | "&&" | rel_op | add_op | mul_op;
		@Override public ParserRule getRule() { return rule; }
		
		//"||" | "&&" | rel_op | add_op | mul_op
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
		
		//rel_op
		public RuleCall getRel_opParserRuleCall_2() { return cRel_opParserRuleCall_2; }
		
		//add_op
		public RuleCall getAdd_opParserRuleCall_3() { return cAdd_opParserRuleCall_3; }
		
		//mul_op
		public RuleCall getMul_opParserRuleCall_4() { return cMul_opParserRuleCall_4; }
	}
	public class Rel_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.rel_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//rel_op:
		//	"==" | "!=" | "<" | "<=" | ">" | ">=";
		@Override public ParserRule getRule() { return rule; }
		
		//"==" | "!=" | "<" | "<=" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}
	public class Add_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.add_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModifierLetterCircumflexAccentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//add_op:
		//	"+" | "-" | "|" | "ˆ";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "|" | "ˆ"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//"ˆ"
		public Keyword getModifierLetterCircumflexAccentKeyword_3() { return cModifierLetterCircumflexAccentKeyword_3; }
	}
	public class Mul_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.mul_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAmpersandCircumflexAccentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//mul_op:
		//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
		@Override public ParserRule getRule() { return rule; }
		
		//"*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_3() { return cLessThanSignLessThanSignKeyword_3; }
		
		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_4() { return cGreaterThanSignGreaterThanSignKeyword_4; }
		
		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//"&^"
		public Keyword getAmpersandCircumflexAccentKeyword_6() { return cAmpersandCircumflexAccentKeyword_6; }
	}
	public class Unary_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.unary_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignHyphenMinusKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//unary_op:
		//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "!" | "^" | "*" | "&" | "<-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_3() { return cCircumflexAccentKeyword_3; }
		
		//"*"
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }
		
		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_6() { return cLessThanSignHyphenMinusKeyword_6; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conversion:
		//	Type "(" Expression+=Expression ","? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Type "(" Expression+=Expression ","? ")"
		public Group getGroup() { return cGroup; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cLabeledStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLabeledStmtLabeledStmtParserRuleCall_1_0 = (RuleCall)cLabeledStmtAssignment_1.eContents().get(0);
		private final Assignment cSimpleStmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_2_0 = (RuleCall)cSimpleStmtAssignment_2.eContents().get(0);
		private final Assignment cGoStmtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGoStmtGoStmtParserRuleCall_3_0 = (RuleCall)cGoStmtAssignment_3.eContents().get(0);
		private final Assignment cReturnStmtAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cReturnStmtReturnStmtParserRuleCall_4_0 = (RuleCall)cReturnStmtAssignment_4.eContents().get(0);
		private final Assignment cBreakStmtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBreakStmtBreakStmtParserRuleCall_5_0 = (RuleCall)cBreakStmtAssignment_5.eContents().get(0);
		private final Assignment cContinueStmtAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cContinueStmtContinueStmtParserRuleCall_6_0 = (RuleCall)cContinueStmtAssignment_6.eContents().get(0);
		private final Assignment cGotoStmtAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGotoStmtGotoStmtParserRuleCall_7_0 = (RuleCall)cGotoStmtAssignment_7.eContents().get(0);
		private final Assignment cFallthroughStmtAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cFallthroughStmtFallthroughStmtParserRuleCall_8_0 = (RuleCall)cFallthroughStmtAssignment_8.eContents().get(0);
		private final Assignment cBlockAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cBlockBlockParserRuleCall_9_0 = (RuleCall)cBlockAssignment_9.eContents().get(0);
		private final Assignment cIfStmtAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cIfStmtIfStmtParserRuleCall_10_0 = (RuleCall)cIfStmtAssignment_10.eContents().get(0);
		private final Assignment cSwitchStmtAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cSwitchStmtSwitchStmtParserRuleCall_11_0 = (RuleCall)cSwitchStmtAssignment_11.eContents().get(0);
		private final Assignment cSelectStmtAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cSelectStmtSelectStmtParserRuleCall_12_0 = (RuleCall)cSelectStmtAssignment_12.eContents().get(0);
		private final Assignment cForStmtAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cForStmtForStmtParserRuleCall_13_0 = (RuleCall)cForStmtAssignment_13.eContents().get(0);
		private final Assignment cDeferStmtAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cDeferStmtDeferStmtParserRuleCall_14_0 = (RuleCall)cDeferStmtAssignment_14.eContents().get(0);
		
		//Statement:
		//	Declaration+=Declaration | LabeledStmt+=LabeledStmt | SimpleStmt+=SimpleStmt | GoStmt+=GoStmt | ReturnStmt+=ReturnStmt
		//	| BreakStmt+=BreakStmt | ContinueStmt+=ContinueStmt | GotoStmt+=GotoStmt | FallthroughStmt+=FallthroughStmt |
		//	Block+=Block | IfStmt+=IfStmt | SwitchStmt+=SwitchStmt | SelectStmt+=SelectStmt | ForStmt+=ForStmt |
		//	DeferStmt+=DeferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration+=Declaration | LabeledStmt+=LabeledStmt | SimpleStmt+=SimpleStmt | GoStmt+=GoStmt | ReturnStmt+=ReturnStmt |
		//BreakStmt+=BreakStmt | ContinueStmt+=ContinueStmt | GotoStmt+=GotoStmt | FallthroughStmt+=FallthroughStmt |
		//Block+=Block | IfStmt+=IfStmt | SwitchStmt+=SwitchStmt | SelectStmt+=SelectStmt | ForStmt+=ForStmt |
		//DeferStmt+=DeferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration+=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//LabeledStmt+=LabeledStmt
		public Assignment getLabeledStmtAssignment_1() { return cLabeledStmtAssignment_1; }
		
		//LabeledStmt
		public RuleCall getLabeledStmtLabeledStmtParserRuleCall_1_0() { return cLabeledStmtLabeledStmtParserRuleCall_1_0; }
		
		//SimpleStmt+=SimpleStmt
		public Assignment getSimpleStmtAssignment_2() { return cSimpleStmtAssignment_2; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_2_0() { return cSimpleStmtSimpleStmtParserRuleCall_2_0; }
		
		//GoStmt+=GoStmt
		public Assignment getGoStmtAssignment_3() { return cGoStmtAssignment_3; }
		
		//GoStmt
		public RuleCall getGoStmtGoStmtParserRuleCall_3_0() { return cGoStmtGoStmtParserRuleCall_3_0; }
		
		//ReturnStmt+=ReturnStmt
		public Assignment getReturnStmtAssignment_4() { return cReturnStmtAssignment_4; }
		
		//ReturnStmt
		public RuleCall getReturnStmtReturnStmtParserRuleCall_4_0() { return cReturnStmtReturnStmtParserRuleCall_4_0; }
		
		//BreakStmt+=BreakStmt
		public Assignment getBreakStmtAssignment_5() { return cBreakStmtAssignment_5; }
		
		//BreakStmt
		public RuleCall getBreakStmtBreakStmtParserRuleCall_5_0() { return cBreakStmtBreakStmtParserRuleCall_5_0; }
		
		//ContinueStmt+=ContinueStmt
		public Assignment getContinueStmtAssignment_6() { return cContinueStmtAssignment_6; }
		
		//ContinueStmt
		public RuleCall getContinueStmtContinueStmtParserRuleCall_6_0() { return cContinueStmtContinueStmtParserRuleCall_6_0; }
		
		//GotoStmt+=GotoStmt
		public Assignment getGotoStmtAssignment_7() { return cGotoStmtAssignment_7; }
		
		//GotoStmt
		public RuleCall getGotoStmtGotoStmtParserRuleCall_7_0() { return cGotoStmtGotoStmtParserRuleCall_7_0; }
		
		//FallthroughStmt+=FallthroughStmt
		public Assignment getFallthroughStmtAssignment_8() { return cFallthroughStmtAssignment_8; }
		
		//FallthroughStmt
		public RuleCall getFallthroughStmtFallthroughStmtParserRuleCall_8_0() { return cFallthroughStmtFallthroughStmtParserRuleCall_8_0; }
		
		//Block+=Block
		public Assignment getBlockAssignment_9() { return cBlockAssignment_9; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_9_0() { return cBlockBlockParserRuleCall_9_0; }
		
		//IfStmt+=IfStmt
		public Assignment getIfStmtAssignment_10() { return cIfStmtAssignment_10; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_10_0() { return cIfStmtIfStmtParserRuleCall_10_0; }
		
		//SwitchStmt+=SwitchStmt
		public Assignment getSwitchStmtAssignment_11() { return cSwitchStmtAssignment_11; }
		
		//SwitchStmt
		public RuleCall getSwitchStmtSwitchStmtParserRuleCall_11_0() { return cSwitchStmtSwitchStmtParserRuleCall_11_0; }
		
		//SelectStmt+=SelectStmt
		public Assignment getSelectStmtAssignment_12() { return cSelectStmtAssignment_12; }
		
		//SelectStmt
		public RuleCall getSelectStmtSelectStmtParserRuleCall_12_0() { return cSelectStmtSelectStmtParserRuleCall_12_0; }
		
		//ForStmt+=ForStmt
		public Assignment getForStmtAssignment_13() { return cForStmtAssignment_13; }
		
		//ForStmt
		public RuleCall getForStmtForStmtParserRuleCall_13_0() { return cForStmtForStmtParserRuleCall_13_0; }
		
		//DeferStmt+=DeferStmt
		public Assignment getDeferStmtAssignment_14() { return cDeferStmtAssignment_14; }
		
		//DeferStmt
		public RuleCall getDeferStmtDeferStmtParserRuleCall_14_0() { return cDeferStmtDeferStmtParserRuleCall_14_0; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSendStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIncDecStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssignmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cShortVarDeclParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//SimpleStmt:
		//	EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtParserRuleCall_0() { return cEmptyStmtParserRuleCall_0; }
		
		//ExpressionStmt
		public RuleCall getExpressionStmtParserRuleCall_1() { return cExpressionStmtParserRuleCall_1; }
		
		//SendStmt
		public RuleCall getSendStmtParserRuleCall_2() { return cSendStmtParserRuleCall_2; }
		
		//IncDecStmt
		public RuleCall getIncDecStmtParserRuleCall_3() { return cIncDecStmtParserRuleCall_3; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_4() { return cAssignmentParserRuleCall_4; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_5() { return cShortVarDeclParserRuleCall_5; }
	}
	public class EmptyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.EmptyStmt");
		private final RuleCall cANY_OTHERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EmptyStmt:
		//	ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall() { return cANY_OTHERTerminalRuleCall; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LabeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//LabeledStmt:
		//	Label ":" Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//Label ":" Statement
		public Group getGroup() { return cGroup; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Label");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Label:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ExpressionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExpressionStmt");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionStmt:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class SendStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SendStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cChannelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SendStmt:
		//	Channel "<-" Expression+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Channel "<-" Expression+=Expression
		public Group getGroup() { return cGroup; }
		
		//Channel
		public RuleCall getChannelParserRuleCall_0() { return cChannelParserRuleCall_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Channel");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Channel:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class IncDecStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IncDecStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//IncDecStmt:
		//	Expression ("++" | "--");
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ("++" | "--")
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//"++" | "--"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssign_opParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpressionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionListAssignment_2.eContents().get(0);
		
		//Assignment:
		//	ExpressionList assign_op ExpressionList+=ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionList assign_op ExpressionList+=ExpressionList
		public Group getGroup() { return cGroup; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0() { return cExpressionListParserRuleCall_0; }
		
		//assign_op
		public RuleCall getAssign_opParserRuleCall_1() { return cAssign_opParserRuleCall_1; }
		
		//ExpressionList+=ExpressionList
		public Assignment getExpressionListAssignment_2() { return cExpressionListAssignment_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0() { return cExpressionListExpressionListParserRuleCall_2_0; }
	}
	public class Assign_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.assign_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAdd_opParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMul_opParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//assign_op:
		//	(add_op | mul_op)? "=";
		@Override public ParserRule getRule() { return rule; }
		
		//(add_op | mul_op)? "="
		public Group getGroup() { return cGroup; }
		
		//(add_op | mul_op)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//add_op
		public RuleCall getAdd_opParserRuleCall_0_0() { return cAdd_opParserRuleCall_0_0; }
		
		//mul_op
		public RuleCall getMul_opParserRuleCall_0_1() { return cMul_opParserRuleCall_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cIfStmtAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cIfStmtIfStmtParserRuleCall_4_1_0_0 = (RuleCall)cIfStmtAssignment_4_1_0.eContents().get(0);
		private final Assignment cBlockAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_4_1_1_0 = (RuleCall)cBlockAssignment_4_1_1.eContents().get(0);
		
		//IfStmt:
		//	"if" (SimpleStmt ";")? Expression+=Expression Block+=Block ("else" (IfStmt+=IfStmt | Block+=Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" (SimpleStmt ";")? Expression+=Expression Block+=Block ("else" (IfStmt+=IfStmt | Block+=Block))?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(SimpleStmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//Block+=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
		
		//("else" (IfStmt+=IfStmt | Block+=Block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//IfStmt+=IfStmt | Block+=Block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//IfStmt+=IfStmt
		public Assignment getIfStmtAssignment_4_1_0() { return cIfStmtAssignment_4_1_0; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_4_1_0_0() { return cIfStmtIfStmtParserRuleCall_4_1_0_0; }
		
		//Block+=Block
		public Assignment getBlockAssignment_4_1_1() { return cBlockAssignment_4_1_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_1_1_0() { return cBlockBlockParserRuleCall_4_1_1_0; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSwitch_stmt_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_2_0 = (RuleCall)cSwitch_stmt_linhaAssignment_2.eContents().get(0);
		
		//SwitchStmt:
		//	"switch" (SimpleStmt ";")? switch_stmt_linha+=switch_stmt_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" (SimpleStmt ";")? switch_stmt_linha+=switch_stmt_linha
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(SimpleStmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//switch_stmt_linha+=switch_stmt_linha
		public Assignment getSwitch_stmt_linhaAssignment_2() { return cSwitch_stmt_linhaAssignment_2; }
		
		//switch_stmt_linha
		public RuleCall getSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_2_0() { return cSwitch_stmt_linhaSwitch_stmt_linhaParserRuleCall_2_0; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//ExprCaseClause:
		//	ExprSwitchCase ":" StatementList+=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSwitchCase ":" StatementList+=StatementList
		public Group getGroup() { return cGroup; }
		
		//ExprSwitchCase
		public RuleCall getExprSwitchCaseParserRuleCall_0() { return cExprSwitchCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList+=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ExprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExprSwitchCase:
		//	"case" ExpressionList | "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" ExpressionList | "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" ExpressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_1() { return cExpressionListParserRuleCall_0_1; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class Switch_stmt_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.switch_stmt_linha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeSwitchGuardAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeSwitchGuardTypeSwitchGuardParserRuleCall_0_0_0 = (RuleCall)cTypeSwitchGuardAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeCaseClauseAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeCaseClauseTypeCaseClauseParserRuleCall_0_2_0 = (RuleCall)cTypeCaseClauseAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprCaseClauseAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprCaseClauseExprCaseClauseParserRuleCall_1_2_0 = (RuleCall)cExprCaseClauseAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//switch_stmt_linha:
		//	TypeSwitchGuard+=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}" | Expression+=Expression? "{"
		//	ExprCaseClause+=ExprCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSwitchGuard+=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}" | Expression+=Expression? "{"
		//ExprCaseClause+=ExprCaseClause* "}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeSwitchGuard+=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//TypeSwitchGuard+=TypeSwitchGuard
		public Assignment getTypeSwitchGuardAssignment_0_0() { return cTypeSwitchGuardAssignment_0_0; }
		
		//TypeSwitchGuard
		public RuleCall getTypeSwitchGuardTypeSwitchGuardParserRuleCall_0_0_0() { return cTypeSwitchGuardTypeSwitchGuardParserRuleCall_0_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//TypeCaseClause+=TypeCaseClause*
		public Assignment getTypeCaseClauseAssignment_0_2() { return cTypeCaseClauseAssignment_0_2; }
		
		//TypeCaseClause
		public RuleCall getTypeCaseClauseTypeCaseClauseParserRuleCall_0_2_0() { return cTypeCaseClauseTypeCaseClauseParserRuleCall_0_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//Expression+=Expression? "{" ExprCaseClause+=ExprCaseClause* "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//Expression+=Expression?
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0() { return cExpressionExpressionParserRuleCall_1_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//ExprCaseClause+=ExprCaseClause*
		public Assignment getExprCaseClauseAssignment_1_2() { return cExprCaseClauseAssignment_1_2; }
		
		//ExprCaseClause
		public RuleCall getExprCaseClauseExprCaseClauseParserRuleCall_1_2_0() { return cExprCaseClauseExprCaseClauseParserRuleCall_1_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class TypeSwitchGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeSwitchGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchGuard:
		//	(identifier ":=")? PrimaryExpr "." "(" "type" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//(identifier ":=")? PrimaryExpr "." "(" "type" ")"
		public Group getGroup() { return cGroup; }
		
		//(identifier ":=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0_0() { return cIdentifierParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_1() { return cPrimaryExprParserRuleCall_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//TypeCaseClause:
		//	TypeSwitchCase ":" StatementList+=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSwitchCase ":" StatementList+=StatementList
		public Group getGroup() { return cGroup; }
		
		//TypeSwitchCase
		public RuleCall getTypeSwitchCaseParserRuleCall_0() { return cTypeSwitchCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList+=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTypeListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TypeSwitchCase:
		//	"case" TypeList | "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" TypeList | "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" TypeList
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//TypeList
		public RuleCall getTypeListParserRuleCall_0_1() { return cTypeListParserRuleCall_0_1; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//TypeList:
		//	Type ("," Type+=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Type ("," Type+=Type)*
		public Group getGroup() { return cGroup; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//("," Type+=Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Type+=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cForClauseParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cRangeClauseParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//ForStmt:
		//	"for" (Condition | ForClause | RangeClause)? //Block
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (Condition | ForClause | RangeClause)?
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(Condition | ForClause | RangeClause)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1_0() { return cConditionParserRuleCall_1_0; }
		
		//ForClause
		public RuleCall getForClauseParserRuleCall_1_1() { return cForClauseParserRuleCall_1_1; }
		
		//RangeClause
		public RuleCall getRangeClauseParserRuleCall_1_2() { return cRangeClauseParserRuleCall_1_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.Condition");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInitStmtParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPostStmtAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPostStmtPostStmtParserRuleCall_4_0 = (RuleCall)cPostStmtAssignment_4.eContents().get(0);
		
		//ForClause:
		//	InitStmt? ";" Condition+=Condition? ";" PostStmt+=PostStmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//InitStmt? ";" Condition+=Condition? ";" PostStmt+=PostStmt?
		public Group getGroup() { return cGroup; }
		
		//InitStmt?
		public RuleCall getInitStmtParserRuleCall_0() { return cInitStmtParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//Condition+=Condition?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//PostStmt+=PostStmt?
		public Assignment getPostStmtAssignment_4() { return cPostStmtAssignment_4; }
		
		//PostStmt
		public RuleCall getPostStmtPostStmtParserRuleCall_4_0() { return cPostStmtPostStmtParserRuleCall_4_0; }
	}
	public class InitStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.InitStmt");
		private final RuleCall cSimpleStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InitStmt:
		//	SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall() { return cSimpleStmtParserRuleCall; }
	}
	public class PostStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PostStmt");
		private final RuleCall cSimpleStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PostStmt:
		//	SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall() { return cSimpleStmtParserRuleCall; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.RangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RangeClause:
		//	(ExpressionList "=" | IdentifierList ":=")? "range" // Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpressionList "=" | IdentifierList ":=")? "range"
		public Group getGroup() { return cGroup; }
		
		//(ExpressionList "=" | IdentifierList ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_0_0() { return cExpressionListParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.GoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GoStmt:
		//	"go" Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"go" Expression
		public Group getGroup() { return cGroup; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.SelectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommClauseCommClauseParserRuleCall_2_0 = (RuleCall)cCommClauseAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectStmt:
		//	"select" "{" CommClause+=CommClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"select" "{" CommClause+=CommClause* "}"
		public Group getGroup() { return cGroup; }
		
		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//CommClause+=CommClause*
		public Assignment getCommClauseAssignment_2() { return cCommClauseAssignment_2; }
		
		//CommClause
		public RuleCall getCommClauseCommClauseParserRuleCall_2_0() { return cCommClauseCommClauseParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CommClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CommClause:
		//	CommCase ":" //StatementList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CommCase ":"
		public Group getGroup() { return cGroup; }
		
		//CommCase
		public RuleCall getCommCaseParserRuleCall_0() { return cCommCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CommCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cSendStmtParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cRecvStmtParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CommCase:
		//	"case" (SendStmt | RecvStmt) | "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" (SendStmt | RecvStmt) | "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" (SendStmt | RecvStmt)
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//SendStmt | RecvStmt
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//SendStmt
		public RuleCall getSendStmtParserRuleCall_0_1_0() { return cSendStmtParserRuleCall_0_1_0; }
		
		//RecvStmt
		public RuleCall getRecvStmtParserRuleCall_0_1_1() { return cRecvStmtParserRuleCall_0_1_1; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class RecvStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.RecvStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cRecvExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecvExprRecvExprParserRuleCall_1_0 = (RuleCall)cRecvExprAssignment_1.eContents().get(0);
		
		//RecvStmt:
		//	(ExpressionList "=" | IdentifierList ":=")? RecvExpr+=RecvExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpressionList "=" | IdentifierList ":=")? RecvExpr+=RecvExpr
		public Group getGroup() { return cGroup; }
		
		//(ExpressionList "=" | IdentifierList ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_0_0() { return cExpressionListParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//RecvExpr+=RecvExpr
		public Assignment getRecvExprAssignment_1() { return cRecvExprAssignment_1; }
		
		//RecvExpr
		public RuleCall getRecvExprRecvExprParserRuleCall_1_0() { return cRecvExprRecvExprParserRuleCall_1_0; }
	}
	public class RecvExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.RecvExpr");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RecvExpr:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0 = (RuleCall)cExpressionListAssignment_1.eContents().get(0);
		
		//ReturnStmt:
		//	"return" ExpressionList+=ExpressionList?;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" ExpressionList+=ExpressionList?
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//ExpressionList+=ExpressionList?
		public Assignment getExpressionListAssignment_1() { return cExpressionListAssignment_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0() { return cExpressionListExpressionListParserRuleCall_1_0; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.BreakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BreakStmt:
		//	"break" Label?;
		@Override public ParserRule getRule() { return rule; }
		
		//"break" Label?
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//Label?
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ContinueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ContinueStmt:
		//	"continue" Label?;
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" Label?
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//Label?
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GotoStmt:
		//	"goto" Label;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" Label
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.FallthroughStmt");
		private final Keyword cFallthroughKeyword = (Keyword)rule.eContents().get(1);
		
		//FallthroughStmt:
		//	"fallthrough";
		@Override public ParserRule getRule() { return rule; }
		
		//"fallthrough"
		public Keyword getFallthroughKeyword() { return cFallthroughKeyword; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.DeferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//DeferStmt:
		//	"defer" Expression+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"defer" Expression+=Expression
		public Group getGroup() { return cGroup; }
		
		//"defer"
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//Expression+=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PackageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPackageNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PackageClause:
		//	"package" PackageName;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" PackageName
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_1() { return cPackageNameParserRuleCall_1; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.PackageName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PackageName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ImportDecl:
		//	"import" (ImportSpec | "(" (ImportSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"import" (ImportSpec | "(" (ImportSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//ImportSpec | "(" (ImportSpec ";")* ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_0() { return cImportSpecParserRuleCall_1_0; }
		
		//"(" (ImportSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ImportSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_1_1_0() { return cImportSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cPackageNameParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImportPathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportSpec:
		//	("." | PackageName)? ImportPath;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | PackageName)? ImportPath
		public Group getGroup() { return cGroup; }
		
		//("." | PackageName)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_0_1() { return cPackageNameParserRuleCall_0_1; }
		
		//ImportPath
		public RuleCall getImportPathParserRuleCall_1() { return cImportPathParserRuleCall_1; }
	}
	public class ImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.ImportPath");
		private final RuleCall cString_litParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImportPath:
		//	string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall() { return cString_litParserRuleCall; }
	}
	public class CommentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.comments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSolidusSolidusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSolidusAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskSolidusKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//comments:
		//	LETTER* "//" LETTER* | LETTER* "/*" LETTER* "*/";
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER* "//" LETTER* | LETTER* "/*" LETTER* "*/"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LETTER* "//" LETTER*
		public Group getGroup_0() { return cGroup_0; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_0_0() { return cLETTERTerminalRuleCall_0_0; }
		
		//"//"
		public Keyword getSolidusSolidusKeyword_0_1() { return cSolidusSolidusKeyword_0_1; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_0_2() { return cLETTERTerminalRuleCall_0_2; }
		
		//LETTER* "/*" LETTER* "*/"
		public Group getGroup_1() { return cGroup_1; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }
		
		//"/*"
		public Keyword getSolidusAsteriskKeyword_1_1() { return cSolidusAsteriskKeyword_1_1; }
		
		//LETTER*
		public RuleCall getLETTERTerminalRuleCall_1_2() { return cLETTERTerminalRuleCall_1_2; }
		
		//"*/"
		public Keyword getAsteriskSolidusKeyword_1_3() { return cAsteriskSolidusKeyword_1_3; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//identifier:
		//	LETTER (LETTER | DECIMAL_DIGIT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER (LETTER | DECIMAL_DIGIT)*
		public Group getGroup() { return cGroup; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }
		
		//(LETTER | DECIMAL_DIGIT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_1_1() { return cDECIMAL_DIGITTerminalRuleCall_1_1; }
	}
	public class Int_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.int_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecimal_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOctal_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHex_litParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//int_lit:
		//	decimal_lit | octal_lit | hex_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//decimal_lit | octal_lit | hex_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decimal_lit
		public RuleCall getDecimal_litParserRuleCall_0() { return cDecimal_litParserRuleCall_0; }
		
		//octal_lit
		public RuleCall getOctal_litParserRuleCall_1() { return cOctal_litParserRuleCall_1; }
		
		//hex_lit
		public RuleCall getHex_litParserRuleCall_2() { return cHex_litParserRuleCall_2; }
	}
	public class Decimal_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.decimal_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//decimal_lit:
		//	DECIMAL_DIGIT DECIMAL_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_DIGIT DECIMAL_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0() { return cDECIMAL_DIGITTerminalRuleCall_0; }
		
		//DECIMAL_DIGIT*
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_1() { return cDECIMAL_DIGITTerminalRuleCall_1; }
	}
	public class Octal_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.octal_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//octal_lit:
		//	"0" OCTAL_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//"0" OCTAL_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//OCTAL_DIGIT*
		public RuleCall getOCTAL_DIGITTerminalRuleCall_1() { return cOCTAL_DIGITTerminalRuleCall_1; }
	}
	public class Hex_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.hex_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cXKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cXKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//hex_lit:
		//	"0" ("x" | "X") HEX_DIGIT HEX_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//"0" ("x" | "X") HEX_DIGIT HEX_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//"x" | "X"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"x"
		public Keyword getXKeyword_1_0() { return cXKeyword_1_0; }
		
		//"X"
		public Keyword getXKeyword_1_1() { return cXKeyword_1_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT*
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
	}
	public class Float_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.float_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponentParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExponentParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//float_lit:
		//	decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?;
		@Override public ParserRule getRule() { return rule; }
		
		//decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decimals "." decimals? exponent?
		public Group getGroup_0() { return cGroup_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_0_0() { return cDecimalsParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//decimals?
		public RuleCall getDecimalsParserRuleCall_0_2() { return cDecimalsParserRuleCall_0_2; }
		
		//exponent?
		public RuleCall getExponentParserRuleCall_0_3() { return cExponentParserRuleCall_0_3; }
		
		//decimals exponent
		public Group getGroup_1() { return cGroup_1; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_1_0() { return cDecimalsParserRuleCall_1_0; }
		
		//exponent
		public RuleCall getExponentParserRuleCall_1_1() { return cExponentParserRuleCall_1_1; }
		
		//"." decimals exponent?
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_2_1() { return cDecimalsParserRuleCall_2_1; }
		
		//exponent?
		public RuleCall getExponentParserRuleCall_2_2() { return cExponentParserRuleCall_2_2; }
	}
	public class String_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.string_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRaw_string_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterpreted_string_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//string_lit:
		//	raw_string_lit | interpreted_string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//raw_string_lit | interpreted_string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//raw_string_lit
		public RuleCall getRaw_string_litParserRuleCall_0() { return cRaw_string_litParserRuleCall_0; }
		
		//interpreted_string_lit
		public RuleCall getInterpreted_string_litParserRuleCall_1() { return cInterpreted_string_litParserRuleCall_1; }
	}
	public class Raw_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.raw_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_charParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNewlineParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//raw_string_lit:
		//	"'" (unicode_char | newline)? "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (unicode_char | newline)? "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//(unicode_char | newline)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_char
		public RuleCall getUnicode_charParserRuleCall_1_0() { return cUnicode_charParserRuleCall_1_0; }
		
		//newline
		public RuleCall getNewlineParserRuleCall_1_1() { return cNewlineParserRuleCall_1_1; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class Interpreted_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.interpreted_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_valueParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//interpreted_string_lit:
		//	'"' (unicode_value | byte_value)? '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' (unicode_value | byte_value)? '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//(unicode_value | byte_value)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value
		public RuleCall getUnicode_valueParserRuleCall_1_0() { return cUnicode_valueParserRuleCall_1_0; }
		
		//byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class Unicode_charElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.unicode_char");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//unicode_char:
		//	"?" | "." | "," | "!";
		@Override public ParserRule getRule() { return rule; }
		
		//"?" | "." | "," | "!"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
	}
	public class NewlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.newline");
		private final Keyword cU000AKeyword = (Keyword)rule.eContents().get(1);
		
		//newline:
		//	"U+000A";
		@Override public ParserRule getRule() { return rule; }
		
		//"U+000A"
		public Keyword getU000AKeyword() { return cU000AKeyword; }
	}
	public class DecimalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.decimals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//decimals:
		//	DECIMAL_DIGIT DECIMAL_DIGIT*;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_DIGIT DECIMAL_DIGIT*
		public Group getGroup() { return cGroup; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0() { return cDECIMAL_DIGITTerminalRuleCall_0; }
		
		//DECIMAL_DIGIT*
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_1() { return cDECIMAL_DIGITTerminalRuleCall_1; }
	}
	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//exponent:
		//	("e" | "E") ("+" | "-")? decimals;
		@Override public ParserRule getRule() { return rule; }
		
		//("e" | "E") ("+" | "-")? decimals
		public Group getGroup() { return cGroup; }
		
		//"e" | "E"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }
		
		//"E"
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }
		
		//("+" | "-")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_2() { return cDecimalsParserRuleCall_2; }
	}
	public class Imaginary_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.imaginary_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//imaginary_lit:
		//	(decimals | float_lit) "i";
		@Override public ParserRule getRule() { return rule; }
		
		//(decimals | float_lit) "i"
		public Group getGroup() { return cGroup; }
		
		//decimals | float_lit
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_0_0() { return cDecimalsParserRuleCall_0_0; }
		
		//float_lit
		public RuleCall getFloat_litParserRuleCall_0_1() { return cFloat_litParserRuleCall_0_1; }
		
		//"i"
		public Keyword getIKeyword_1() { return cIKeyword_1; }
	}
	public class Rune_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.rune_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_valueParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//rune_lit:
		//	"'" (unicode_value | byte_value) "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (unicode_value | byte_value) "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//unicode_value | byte_value
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value
		public RuleCall getUnicode_valueParserRuleCall_1_0() { return cUnicode_valueParserRuleCall_1_0; }
		
		//byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class Unicode_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.unicode_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLittle_u_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBig_u_valueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEscaped_charParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//unicode_value:
		//	LETTER | little_u_value | big_u_value | escaped_char;
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER | little_u_value | big_u_value | escaped_char
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }
		
		//little_u_value
		public RuleCall getLittle_u_valueParserRuleCall_1() { return cLittle_u_valueParserRuleCall_1; }
		
		//big_u_value
		public RuleCall getBig_u_valueParserRuleCall_2() { return cBig_u_valueParserRuleCall_2; }
		
		//escaped_char
		public RuleCall getEscaped_charParserRuleCall_3() { return cEscaped_charParserRuleCall_3; }
	}
	public class Byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.byte_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOctal_byte_valueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHex_byte_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//byte_value:
		//	octal_byte_value | hex_byte_value;
		@Override public ParserRule getRule() { return rule; }
		
		//octal_byte_value | hex_byte_value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//octal_byte_value
		public RuleCall getOctal_byte_valueParserRuleCall_0() { return cOctal_byte_valueParserRuleCall_0; }
		
		//hex_byte_value
		public RuleCall getHex_byte_valueParserRuleCall_1() { return cHex_byte_valueParserRuleCall_1; }
	}
	public class Octal_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.octal_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//octal_byte_value:
		//	CHAR OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_1() { return cOCTAL_DIGITTerminalRuleCall_1; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_2() { return cOCTAL_DIGITTerminalRuleCall_2; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_3() { return cOCTAL_DIGITTerminalRuleCall_3; }
	}
	public class Hex_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.hex_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//hex_byte_value:
		//	CHAR "x" HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR "x" HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"x"
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
	}
	public class Little_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.little_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//little_u_value:
		//	CHAR "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"u"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
	}
	public class Big_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.big_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cHEX_DIGITTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cHEX_DIGITTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cHEX_DIGITTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cHEX_DIGITTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//big_u_value:
		//	CHAR "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"U"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_6() { return cHEX_DIGITTerminalRuleCall_6; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_7() { return cHEX_DIGITTerminalRuleCall_7; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_8() { return cHEX_DIGITTerminalRuleCall_8; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_9() { return cHEX_DIGITTerminalRuleCall_9; }
	}
	public class Escaped_charElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.escaped_char");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cFKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cNKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cRKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cTKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cVKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final RuleCall cCHARParserRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		private final Keyword cApostropheKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cQuotationMarkKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		
		//escaped_char:
		//	CHAR ("a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"');
		@Override public ParserRule getRule() { return rule; }
		
		//CHAR ("a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"')
		public Group getGroup() { return cGroup; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_0() { return cCHARParserRuleCall_0; }
		
		//"a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"a"
		public Keyword getAKeyword_1_0() { return cAKeyword_1_0; }
		
		//"b"
		public Keyword getBKeyword_1_1() { return cBKeyword_1_1; }
		
		//"f"
		public Keyword getFKeyword_1_2() { return cFKeyword_1_2; }
		
		//"n"
		public Keyword getNKeyword_1_3() { return cNKeyword_1_3; }
		
		//"r"
		public Keyword getRKeyword_1_4() { return cRKeyword_1_4; }
		
		//"t"
		public Keyword getTKeyword_1_5() { return cTKeyword_1_5; }
		
		//"v"
		public Keyword getVKeyword_1_6() { return cVKeyword_1_6; }
		
		//CHAR
		public RuleCall getCHARParserRuleCall_1_7() { return cCHARParserRuleCall_1_7; }
		
		//"'"
		public Keyword getApostropheKeyword_1_8() { return cApostropheKeyword_1_8; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_9() { return cQuotationMarkKeyword_1_9; }
	}
	public class CHARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.CHAR");
		private final Keyword cApostropheKeyword = (Keyword)rule.eContents().get(1);
		
		//CHAR:
		//	"\'";
		@Override public ParserRule getRule() { return rule; }
		
		//"\'"
		public Keyword getApostropheKeyword() { return cApostropheKeyword; }
	}
	
	
	private final SouceFileElements pSouceFile;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final TypeNameLinhaElements pTypeNameLinha;
	private final TypeLitElements pTypeLit;
	private final TypeLitLinhaElements pTypeLitLinha;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final EmbeddedFieldElements pEmbeddedField;
	private final TagElements pTag;
	private final PointerTypeElements pPointerType;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final InterfaceTypeElements pInterfaceType;
	private final MethodSpecElements pMethodSpec;
	private final MethodNameElements pMethodName;
	private final InterfaceTypeNameElements pInterfaceTypeName;
	private final MapTypeElements pMapType;
	private final KeyTypeElements pKeyType;
	private final ChannelTypeElements pChannelType;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final DeclarationElements pDeclaration;
	private final TopLevelDeclElements pTopLevelDecl;
	private final TopLevelDeclLinhaElements pTopLevelDeclLinha;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final IdentifierListElements pIdentifierList;
	private final ExpressionListElements pExpressionList;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final AliasDeclElements pAliasDecl;
	private final TypeDefElements pTypeDef;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final ShortVarDeclElements pShortVarDecl;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionNameElements pFunctionName;
	private final FunctionBodyElements pFunctionBody;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final OperandElements pOperand;
	private final LiteralElements pLiteral;
	private final BasicLitElements pBasicLit;
	private final OperandNameElements pOperandName;
	private final QualifiedIdentElements pQualifiedIdent;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralTypeLinhaElements pLiteralTypeLinha;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final ElementElements pElement;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final FieldNameElements pFieldName;
	private final FunctionLitElements pFunctionLit;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExprLinhaElements pPrimaryExprLinha;
	private final SelectorElements pSelector;
	private final IndexLinhaElements pIndexLinha;
	private final SliceElements pSlice;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final MethodExprElements pMethodExpr;
	private final ReceiverTypeElements pReceiverType;
	private final ExpressionElements pExpression;
	private final ExpressionLinhaElements pExpressionLinha;
	private final UnaryExprElements pUnaryExpr;
	private final Binary_opElements pBinary_op;
	private final Rel_opElements pRel_op;
	private final Add_opElements pAdd_op;
	private final Mul_opElements pMul_op;
	private final Unary_opElements pUnary_op;
	private final ConversionElements pConversion;
	private final StatementElements pStatement;
	private final SimpleStmtElements pSimpleStmt;
	private final EmptyStmtElements pEmptyStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final LabelElements pLabel;
	private final ExpressionStmtElements pExpressionStmt;
	private final SendStmtElements pSendStmt;
	private final ChannelElements pChannel;
	private final IncDecStmtElements pIncDecStmt;
	private final AssignmentElements pAssignment;
	private final Assign_opElements pAssign_op;
	private final IfStmtElements pIfStmt;
	private final SwitchStmtElements pSwitchStmt;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final Switch_stmt_linhaElements pSwitch_stmt_linha;
	private final TypeSwitchGuardElements pTypeSwitchGuard;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final ForStmtElements pForStmt;
	private final ConditionElements pCondition;
	private final ForClauseElements pForClause;
	private final InitStmtElements pInitStmt;
	private final PostStmtElements pPostStmt;
	private final RangeClauseElements pRangeClause;
	private final GoStmtElements pGoStmt;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final RecvStmtElements pRecvStmt;
	private final RecvExprElements pRecvExpr;
	private final ReturnStmtElements pReturnStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final DeferStmtElements pDeferStmt;
	private final PackageClauseElements pPackageClause;
	private final PackageNameElements pPackageName;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final ImportPathElements pImportPath;
	private final CommentsElements pComments;
	private final IdentifierElements pIdentifier;
	private final Int_litElements pInt_lit;
	private final Decimal_litElements pDecimal_lit;
	private final Octal_litElements pOctal_lit;
	private final Hex_litElements pHex_lit;
	private final Float_litElements pFloat_lit;
	private final String_litElements pString_lit;
	private final Raw_string_litElements pRaw_string_lit;
	private final Interpreted_string_litElements pInterpreted_string_lit;
	private final Unicode_charElements pUnicode_char;
	private final NewlineElements pNewline;
	private final DecimalsElements pDecimals;
	private final ExponentElements pExponent;
	private final Imaginary_litElements pImaginary_lit;
	private final Rune_litElements pRune_lit;
	private final Unicode_valueElements pUnicode_value;
	private final Byte_valueElements pByte_value;
	private final Octal_byte_valueElements pOctal_byte_value;
	private final Hex_byte_valueElements pHex_byte_value;
	private final Little_u_valueElements pLittle_u_value;
	private final Big_u_valueElements pBig_u_value;
	private final Escaped_charElements pEscaped_char;
	private final CHARElements pCHAR;
	private final TerminalRule tLETTER;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tHEX_DIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSouceFile = new SouceFileElements();
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeNameLinha = new TypeNameLinhaElements();
		this.pTypeLit = new TypeLitElements();
		this.pTypeLitLinha = new TypeLitLinhaElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pEmbeddedField = new EmbeddedFieldElements();
		this.pTag = new TagElements();
		this.pPointerType = new PointerTypeElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pMethodName = new MethodNameElements();
		this.pInterfaceTypeName = new InterfaceTypeNameElements();
		this.pMapType = new MapTypeElements();
		this.pKeyType = new KeyTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pDeclaration = new DeclarationElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pTopLevelDeclLinha = new TopLevelDeclLinhaElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pExpressionList = new ExpressionListElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pAliasDecl = new AliasDeclElements();
		this.pTypeDef = new TypeDefElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pOperand = new OperandElements();
		this.pLiteral = new LiteralElements();
		this.pBasicLit = new BasicLitElements();
		this.pOperandName = new OperandNameElements();
		this.pQualifiedIdent = new QualifiedIdentElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralTypeLinha = new LiteralTypeLinhaElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pElement = new ElementElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pFieldName = new FieldNameElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExprLinha = new PrimaryExprLinhaElements();
		this.pSelector = new SelectorElements();
		this.pIndexLinha = new IndexLinhaElements();
		this.pSlice = new SliceElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pMethodExpr = new MethodExprElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionLinha = new ExpressionLinhaElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pBinary_op = new Binary_opElements();
		this.pRel_op = new Rel_opElements();
		this.pAdd_op = new Add_opElements();
		this.pMul_op = new Mul_opElements();
		this.pUnary_op = new Unary_opElements();
		this.pConversion = new ConversionElements();
		this.pStatement = new StatementElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pEmptyStmt = new EmptyStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pLabel = new LabelElements();
		this.pExpressionStmt = new ExpressionStmtElements();
		this.pSendStmt = new SendStmtElements();
		this.pChannel = new ChannelElements();
		this.pIncDecStmt = new IncDecStmtElements();
		this.pAssignment = new AssignmentElements();
		this.pAssign_op = new Assign_opElements();
		this.pIfStmt = new IfStmtElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pSwitch_stmt_linha = new Switch_stmt_linhaElements();
		this.pTypeSwitchGuard = new TypeSwitchGuardElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pForStmt = new ForStmtElements();
		this.pCondition = new ConditionElements();
		this.pForClause = new ForClauseElements();
		this.pInitStmt = new InitStmtElements();
		this.pPostStmt = new PostStmtElements();
		this.pRangeClause = new RangeClauseElements();
		this.pGoStmt = new GoStmtElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pRecvStmt = new RecvStmtElements();
		this.pRecvExpr = new RecvExprElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pPackageClause = new PackageClauseElements();
		this.pPackageName = new PackageNameElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pImportPath = new ImportPathElements();
		this.pComments = new CommentsElements();
		this.pIdentifier = new IdentifierElements();
		this.pInt_lit = new Int_litElements();
		this.pDecimal_lit = new Decimal_litElements();
		this.pOctal_lit = new Octal_litElements();
		this.pHex_lit = new Hex_litElements();
		this.pFloat_lit = new Float_litElements();
		this.pString_lit = new String_litElements();
		this.pRaw_string_lit = new Raw_string_litElements();
		this.pInterpreted_string_lit = new Interpreted_string_litElements();
		this.pUnicode_char = new Unicode_charElements();
		this.pNewline = new NewlineElements();
		this.pDecimals = new DecimalsElements();
		this.pExponent = new ExponentElements();
		this.pImaginary_lit = new Imaginary_litElements();
		this.pRune_lit = new Rune_litElements();
		this.pUnicode_value = new Unicode_valueElements();
		this.pByte_value = new Byte_valueElements();
		this.pOctal_byte_value = new Octal_byte_valueElements();
		this.pHex_byte_value = new Hex_byte_valueElements();
		this.pLittle_u_value = new Little_u_valueElements();
		this.pBig_u_value = new Big_u_valueElements();
		this.pEscaped_char = new Escaped_charElements();
		this.pCHAR = new CHARElements();
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.LETTER");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.OCTAL_DIGIT");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.DECIMAL_DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.ufcg.compiladores.Go.HEX_DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ufcg.compiladores.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SouceFile:
	//	PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")?;
	public SouceFileElements getSouceFileAccess() {
		return pSouceFile;
	}
	
	public ParserRule getSouceFileRule() {
		return getSouceFileAccess().getRule();
	}
	
	//Type:
	//	TypeName | TypeLit | "(" Type ")";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeName:
	//	identifier TypeNameLinha;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//TypeNameLinha:
	//	"." identifier | QualifiedIdent | ANY_OTHER;
	public TypeNameLinhaElements getTypeNameLinhaAccess() {
		return pTypeNameLinha;
	}
	
	public ParserRule getTypeNameLinhaRule() {
		return getTypeNameLinhaAccess().getRule();
	}
	
	//TypeLit:
	//	"[" TypeLitLinha+=TypeLitLinha | StructType+=StructType | PointerType+=PointerType | FunctionType+=FunctionType |
	//	InterfaceType+=InterfaceType | MapType+=MapType | ChannelType+=ChannelType;
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//TypeLitLinha:
	//	ArrayLength "]" ElementType+=ElementType |
	//	"]" ElementType;
	public TypeLitLinhaElements getTypeLitLinhaAccess() {
		return pTypeLitLinha;
	}
	
	public ParserRule getTypeLitLinhaRule() {
		return getTypeLitLinhaAccess().getRule();
	}
	
	//ArrayLength:
	//	Expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//ElementType:
	//	Type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//StructType:
	//	"struct" "{" (FieldDecl+=FieldDecl ";")* ";";
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//FieldDecl:
	//	(IdentifierList Type | EmbeddedField) Tag?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//EmbeddedField:
	//	"*"? TypeName;
	public EmbeddedFieldElements getEmbeddedFieldAccess() {
		return pEmbeddedField;
	}
	
	public ParserRule getEmbeddedFieldRule() {
		return getEmbeddedFieldAccess().getRule();
	}
	
	//Tag:
	//	string_lit;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//PointerType:
	//	"*" Type;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//FunctionType:
	//	"func" Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//Signature:
	//	Parameters Result+=Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	Parameters | Type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	"(" (ParameterList ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	ParameterDecl ("," ParameterDecl+=ParameterDecl)?;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	IdentifierList? "..."? Type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//InterfaceType:
	//	"interface" "{" (MethodSpec ";")? "}";
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//MethodSpec:
	//	MethodName Signature | InterfaceTypeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	//MethodName:
	//	identifier;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//InterfaceTypeName:
	//	TypeName;
	public InterfaceTypeNameElements getInterfaceTypeNameAccess() {
		return pInterfaceTypeName;
	}
	
	public ParserRule getInterfaceTypeNameRule() {
		return getInterfaceTypeNameAccess().getRule();
	}
	
	//MapType:
	//	"map" "[" KeyType "]" ElementType+=ElementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//KeyType:
	//	Type;
	public KeyTypeElements getKeyTypeAccess() {
		return pKeyType;
	}
	
	public ParserRule getKeyTypeRule() {
		return getKeyTypeAccess().getRule();
	}
	
	//ChannelType:
	//	("chan" | "chan" "<-" | "<-" "chan") ElementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//Block:
	//	"{" StatementList "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//StatementList:
	//	Statement ";";
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Declaration:
	//	ConstDecl | TypeDecl | VarDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//TopLevelDecl:
	//	Declaration | "func" topLevelDeclLinha;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//topLevelDeclLinha:
	//	FunctionName Signature FunctionBody+=FunctionBody? | Receiver MethodName Signature+=Signature
	//	FunctionBody+=FunctionBody?;
	public TopLevelDeclLinhaElements getTopLevelDeclLinhaAccess() {
		return pTopLevelDeclLinha;
	}
	
	public ParserRule getTopLevelDeclLinhaRule() {
		return getTopLevelDeclLinhaAccess().getRule();
	}
	
	//ConstDecl:
	//	"const" (ConstSpec | "(" (ConstSpec ";")? ")");
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	//ConstSpec:
	//	IdentifierList (Type? "=" ExpressionList+=ExpressionList)?;
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	//IdentifierList:
	//	identifier ("," identifier)?;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//ExpressionList:
	//	Expression ("," Expression+=Expression)?;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//TypeDecl:
	//	"type" (TypeSpec | "(" (TypeSpec ";")? ")");
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//TypeSpec:
	//	AliasDecl | TypeDef;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//AliasDecl:
	//	identifier "=" Type;
	public AliasDeclElements getAliasDeclAccess() {
		return pAliasDecl;
	}
	
	public ParserRule getAliasDeclRule() {
		return getAliasDeclAccess().getRule();
	}
	
	//TypeDef:
	//	identifier Type;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//VarDecl:
	//	"var" (VarSpec | "(" (VarSpec ";")? ")");
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VarSpec:
	//	IdentifierList (Type ("=" ExpressionList+=ExpressionList)? | "=" ExpressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	//ShortVarDecl:
	//	IdentifierList ":=" ExpressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//FunctionDecl:
	//	"func" FunctionName Signature FunctionBody+=FunctionBody?;
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//FunctionName:
	//	identifier;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionBody:
	//	Block;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//MethodDecl:
	//	"func" Receiver MethodName Signature+=Signature FunctionBody+=FunctionBody?;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//Receiver:
	//	Parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//Operand:
	//	Literal | OperandName | "(" Expression ")";
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Literal:
	//	BasicLit | CompositeLit | FunctionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BasicLit:
	//	int_lit | float_lit | rune_lit | string_lit;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//OperandName:
	//	identifier | QualifiedIdent;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	//QualifiedIdent:
	//	PackageName "." identifier;
	public QualifiedIdentElements getQualifiedIdentAccess() {
		return pQualifiedIdent;
	}
	
	public ParserRule getQualifiedIdentRule() {
		return getQualifiedIdentAccess().getRule();
	}
	
	//CompositeLit:
	//	LiteralType LiteralValue+=LiteralValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//LiteralType:
	//	StructType | "[" LiteralTypeLinha | ElementType | MapType | TypeName;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralTypeLinha:
	//	ArrayLength "]" ElementType+=ElementType |
	//	"]" ElementType |
	//	"..." "]";
	public LiteralTypeLinhaElements getLiteralTypeLinhaAccess() {
		return pLiteralTypeLinha;
	}
	
	public ParserRule getLiteralTypeLinhaRule() {
		return getLiteralTypeLinhaAccess().getRule();
	}
	
	//LiteralValue:
	//	"{" (ElementList+=ElementList ","?)? "}";
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//ElementList:
	//	KeyedElement ("," KeyedElement+=KeyedElement)?;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//Element:
	//	Expression | LiteralValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//KeyedElement:
	//	(Key ":")? Element+=Element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//Key:
	//	FieldName | Expression+=Expression | LiteralValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//FieldName:
	//	identifier;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//FunctionLit:
	//	"func" Signature FunctionBody+=FunctionBody;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	//PrimaryExpr:
	//	Operand PrimaryExprLinha+=PrimaryExprLinha | Conversion PrimaryExprLinha+=PrimaryExprLinha | MethodExpr
	//	PrimaryExprLinha+=PrimaryExprLinha;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//PrimaryExprLinha:
	//	Selector PrimaryExpr PrimaryExprLinha+=PrimaryExprLinha |
	//	"[" Expression? IndexLinha+=IndexLinha PrimaryExprLinha+=PrimaryExprLinha | TypeAssertion
	//	PrimaryExprLinha+=PrimaryExprLinha | Arguments PrimaryExprLinha+=PrimaryExprLinha | ANY_OTHER;
	public PrimaryExprLinhaElements getPrimaryExprLinhaAccess() {
		return pPrimaryExprLinha;
	}
	
	public ParserRule getPrimaryExprLinhaRule() {
		return getPrimaryExprLinhaAccess().getRule();
	}
	
	//Selector:
	//	"." identifier;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//IndexLinha:
	//	"]" | Slice;
	public IndexLinhaElements getIndexLinhaAccess() {
		return pIndexLinha;
	}
	
	public ParserRule getIndexLinhaRule() {
		return getIndexLinhaAccess().getRule();
	}
	
	//Slice:
	//	":" decimals? ":" decimals "]";
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//TypeAssertion:
	//	"." "(" Type ")";
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//Arguments:
	//	"(" ((=> ExpressionList | Type ("," ExpressionList+=ExpressionList)?) "..."? ","?)? ")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//MethodExpr:
	//	ReceiverType "." MethodName;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//ReceiverType:
	//	Type;
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	//Expression:
	//	UnaryExpr ExpressionLinha+=ExpressionLinha;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExpressionLinha:
	//	binary_op Expression ExpressionLinha+=ExpressionLinha | ANY_OTHER;
	public ExpressionLinhaElements getExpressionLinhaAccess() {
		return pExpressionLinha;
	}
	
	public ParserRule getExpressionLinhaRule() {
		return getExpressionLinhaAccess().getRule();
	}
	
	//UnaryExpr:
	//	unary_op UnaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//binary_op:
	//	"||" | "&&" | rel_op | add_op | mul_op;
	public Binary_opElements getBinary_opAccess() {
		return pBinary_op;
	}
	
	public ParserRule getBinary_opRule() {
		return getBinary_opAccess().getRule();
	}
	
	//rel_op:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public Rel_opElements getRel_opAccess() {
		return pRel_op;
	}
	
	public ParserRule getRel_opRule() {
		return getRel_opAccess().getRule();
	}
	
	//add_op:
	//	"+" | "-" | "|" | "ˆ";
	public Add_opElements getAdd_opAccess() {
		return pAdd_op;
	}
	
	public ParserRule getAdd_opRule() {
		return getAdd_opAccess().getRule();
	}
	
	//mul_op:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public Mul_opElements getMul_opAccess() {
		return pMul_op;
	}
	
	public ParserRule getMul_opRule() {
		return getMul_opAccess().getRule();
	}
	
	//unary_op:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public Unary_opElements getUnary_opAccess() {
		return pUnary_op;
	}
	
	public ParserRule getUnary_opRule() {
		return getUnary_opAccess().getRule();
	}
	
	//Conversion:
	//	Type "(" Expression+=Expression ","? ")";
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//Statement:
	//	Declaration+=Declaration | LabeledStmt+=LabeledStmt | SimpleStmt+=SimpleStmt | GoStmt+=GoStmt | ReturnStmt+=ReturnStmt
	//	| BreakStmt+=BreakStmt | ContinueStmt+=ContinueStmt | GotoStmt+=GotoStmt | FallthroughStmt+=FallthroughStmt |
	//	Block+=Block | IfStmt+=IfStmt | SwitchStmt+=SwitchStmt | SelectStmt+=SelectStmt | ForStmt+=ForStmt |
	//	DeferStmt+=DeferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SimpleStmt:
	//	EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//EmptyStmt:
	//	ANY_OTHER;
	public EmptyStmtElements getEmptyStmtAccess() {
		return pEmptyStmt;
	}
	
	public ParserRule getEmptyStmtRule() {
		return getEmptyStmtAccess().getRule();
	}
	
	//LabeledStmt:
	//	Label ":" Statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	//Label:
	//	identifier;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//ExpressionStmt:
	//	Expression;
	public ExpressionStmtElements getExpressionStmtAccess() {
		return pExpressionStmt;
	}
	
	public ParserRule getExpressionStmtRule() {
		return getExpressionStmtAccess().getRule();
	}
	
	//SendStmt:
	//	Channel "<-" Expression+=Expression;
	public SendStmtElements getSendStmtAccess() {
		return pSendStmt;
	}
	
	public ParserRule getSendStmtRule() {
		return getSendStmtAccess().getRule();
	}
	
	//Channel:
	//	Expression;
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//IncDecStmt:
	//	Expression ("++" | "--");
	public IncDecStmtElements getIncDecStmtAccess() {
		return pIncDecStmt;
	}
	
	public ParserRule getIncDecStmtRule() {
		return getIncDecStmtAccess().getRule();
	}
	
	//Assignment:
	//	ExpressionList assign_op ExpressionList+=ExpressionList;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//assign_op:
	//	(add_op | mul_op)? "=";
	public Assign_opElements getAssign_opAccess() {
		return pAssign_op;
	}
	
	public ParserRule getAssign_opRule() {
		return getAssign_opAccess().getRule();
	}
	
	//IfStmt:
	//	"if" (SimpleStmt ";")? Expression+=Expression Block+=Block ("else" (IfStmt+=IfStmt | Block+=Block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//SwitchStmt:
	//	"switch" (SimpleStmt ";")? switch_stmt_linha+=switch_stmt_linha;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	//ExprCaseClause:
	//	ExprSwitchCase ":" StatementList+=StatementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//ExprSwitchCase:
	//	"case" ExpressionList | "default";
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	//switch_stmt_linha:
	//	TypeSwitchGuard+=TypeSwitchGuard "{" TypeCaseClause+=TypeCaseClause* "}" | Expression+=Expression? "{"
	//	ExprCaseClause+=ExprCaseClause* "}";
	public Switch_stmt_linhaElements getSwitch_stmt_linhaAccess() {
		return pSwitch_stmt_linha;
	}
	
	public ParserRule getSwitch_stmt_linhaRule() {
		return getSwitch_stmt_linhaAccess().getRule();
	}
	
	//TypeSwitchGuard:
	//	(identifier ":=")? PrimaryExpr "." "(" "type" ")";
	public TypeSwitchGuardElements getTypeSwitchGuardAccess() {
		return pTypeSwitchGuard;
	}
	
	public ParserRule getTypeSwitchGuardRule() {
		return getTypeSwitchGuardAccess().getRule();
	}
	
	//TypeCaseClause:
	//	TypeSwitchCase ":" StatementList+=StatementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//TypeSwitchCase:
	//	"case" TypeList | "default";
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//TypeList:
	//	Type ("," Type+=Type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	//ForStmt:
	//	"for" (Condition | ForClause | RangeClause)? //Block
	//;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//Condition:
	//	Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ForClause:
	//	InitStmt? ";" Condition+=Condition? ";" PostStmt+=PostStmt?;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	//InitStmt:
	//	SimpleStmt;
	public InitStmtElements getInitStmtAccess() {
		return pInitStmt;
	}
	
	public ParserRule getInitStmtRule() {
		return getInitStmtAccess().getRule();
	}
	
	//PostStmt:
	//	SimpleStmt;
	public PostStmtElements getPostStmtAccess() {
		return pPostStmt;
	}
	
	public ParserRule getPostStmtRule() {
		return getPostStmtAccess().getRule();
	}
	
	//RangeClause:
	//	(ExpressionList "=" | IdentifierList ":=")? "range" // Expression
	//;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	//GoStmt:
	//	"go" Expression;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	//SelectStmt:
	//	"select" "{" CommClause+=CommClause* "}";
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//CommClause:
	//	CommCase ":" //StatementList
	//;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//CommCase:
	//	"case" (SendStmt | RecvStmt) | "default";
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//RecvStmt:
	//	(ExpressionList "=" | IdentifierList ":=")? RecvExpr+=RecvExpr;
	public RecvStmtElements getRecvStmtAccess() {
		return pRecvStmt;
	}
	
	public ParserRule getRecvStmtRule() {
		return getRecvStmtAccess().getRule();
	}
	
	//RecvExpr:
	//	Expression;
	public RecvExprElements getRecvExprAccess() {
		return pRecvExpr;
	}
	
	public ParserRule getRecvExprRule() {
		return getRecvExprAccess().getRule();
	}
	
	//ReturnStmt:
	//	"return" ExpressionList+=ExpressionList?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//BreakStmt:
	//	"break" Label?;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	//ContinueStmt:
	//	"continue" Label?;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	//GotoStmt:
	//	"goto" Label;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	//FallthroughStmt:
	//	"fallthrough";
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	//DeferStmt:
	//	"defer" Expression+=Expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	//PackageClause:
	//	"package" PackageName;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//PackageName:
	//	identifier;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//ImportDecl:
	//	"import" (ImportSpec | "(" (ImportSpec ";")* ")");
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | PackageName)? ImportPath;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//ImportPath:
	//	string_lit;
	public ImportPathElements getImportPathAccess() {
		return pImportPath;
	}
	
	public ParserRule getImportPathRule() {
		return getImportPathAccess().getRule();
	}
	
	//comments:
	//	LETTER* "//" LETTER* | LETTER* "/*" LETTER* "*/";
	public CommentsElements getCommentsAccess() {
		return pComments;
	}
	
	public ParserRule getCommentsRule() {
		return getCommentsAccess().getRule();
	}
	
	//identifier:
	//	LETTER (LETTER | DECIMAL_DIGIT)*;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//int_lit:
	//	decimal_lit | octal_lit | hex_lit;
	public Int_litElements getInt_litAccess() {
		return pInt_lit;
	}
	
	public ParserRule getInt_litRule() {
		return getInt_litAccess().getRule();
	}
	
	//decimal_lit:
	//	DECIMAL_DIGIT DECIMAL_DIGIT*;
	public Decimal_litElements getDecimal_litAccess() {
		return pDecimal_lit;
	}
	
	public ParserRule getDecimal_litRule() {
		return getDecimal_litAccess().getRule();
	}
	
	//octal_lit:
	//	"0" OCTAL_DIGIT*;
	public Octal_litElements getOctal_litAccess() {
		return pOctal_lit;
	}
	
	public ParserRule getOctal_litRule() {
		return getOctal_litAccess().getRule();
	}
	
	//hex_lit:
	//	"0" ("x" | "X") HEX_DIGIT HEX_DIGIT*;
	public Hex_litElements getHex_litAccess() {
		return pHex_lit;
	}
	
	public ParserRule getHex_litRule() {
		return getHex_litAccess().getRule();
	}
	
	//float_lit:
	//	decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?;
	public Float_litElements getFloat_litAccess() {
		return pFloat_lit;
	}
	
	public ParserRule getFloat_litRule() {
		return getFloat_litAccess().getRule();
	}
	
	//string_lit:
	//	raw_string_lit | interpreted_string_lit;
	public String_litElements getString_litAccess() {
		return pString_lit;
	}
	
	public ParserRule getString_litRule() {
		return getString_litAccess().getRule();
	}
	
	//raw_string_lit:
	//	"'" (unicode_char | newline)? "'";
	public Raw_string_litElements getRaw_string_litAccess() {
		return pRaw_string_lit;
	}
	
	public ParserRule getRaw_string_litRule() {
		return getRaw_string_litAccess().getRule();
	}
	
	//interpreted_string_lit:
	//	'"' (unicode_value | byte_value)? '"';
	public Interpreted_string_litElements getInterpreted_string_litAccess() {
		return pInterpreted_string_lit;
	}
	
	public ParserRule getInterpreted_string_litRule() {
		return getInterpreted_string_litAccess().getRule();
	}
	
	//unicode_char:
	//	"?" | "." | "," | "!";
	public Unicode_charElements getUnicode_charAccess() {
		return pUnicode_char;
	}
	
	public ParserRule getUnicode_charRule() {
		return getUnicode_charAccess().getRule();
	}
	
	//newline:
	//	"U+000A";
	public NewlineElements getNewlineAccess() {
		return pNewline;
	}
	
	public ParserRule getNewlineRule() {
		return getNewlineAccess().getRule();
	}
	
	//decimals:
	//	DECIMAL_DIGIT DECIMAL_DIGIT*;
	public DecimalsElements getDecimalsAccess() {
		return pDecimals;
	}
	
	public ParserRule getDecimalsRule() {
		return getDecimalsAccess().getRule();
	}
	
	//exponent:
	//	("e" | "E") ("+" | "-")? decimals;
	public ExponentElements getExponentAccess() {
		return pExponent;
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}
	
	//imaginary_lit:
	//	(decimals | float_lit) "i";
	public Imaginary_litElements getImaginary_litAccess() {
		return pImaginary_lit;
	}
	
	public ParserRule getImaginary_litRule() {
		return getImaginary_litAccess().getRule();
	}
	
	//rune_lit:
	//	"'" (unicode_value | byte_value) "'";
	public Rune_litElements getRune_litAccess() {
		return pRune_lit;
	}
	
	public ParserRule getRune_litRule() {
		return getRune_litAccess().getRule();
	}
	
	//unicode_value:
	//	LETTER | little_u_value | big_u_value | escaped_char;
	public Unicode_valueElements getUnicode_valueAccess() {
		return pUnicode_value;
	}
	
	public ParserRule getUnicode_valueRule() {
		return getUnicode_valueAccess().getRule();
	}
	
	//byte_value:
	//	octal_byte_value | hex_byte_value;
	public Byte_valueElements getByte_valueAccess() {
		return pByte_value;
	}
	
	public ParserRule getByte_valueRule() {
		return getByte_valueAccess().getRule();
	}
	
	//octal_byte_value:
	//	CHAR OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public Octal_byte_valueElements getOctal_byte_valueAccess() {
		return pOctal_byte_value;
	}
	
	public ParserRule getOctal_byte_valueRule() {
		return getOctal_byte_valueAccess().getRule();
	}
	
	//hex_byte_value:
	//	CHAR "x" HEX_DIGIT HEX_DIGIT;
	public Hex_byte_valueElements getHex_byte_valueAccess() {
		return pHex_byte_value;
	}
	
	public ParserRule getHex_byte_valueRule() {
		return getHex_byte_valueAccess().getRule();
	}
	
	//little_u_value:
	//	CHAR "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Little_u_valueElements getLittle_u_valueAccess() {
		return pLittle_u_value;
	}
	
	public ParserRule getLittle_u_valueRule() {
		return getLittle_u_valueAccess().getRule();
	}
	
	//big_u_value:
	//	CHAR "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Big_u_valueElements getBig_u_valueAccess() {
		return pBig_u_value;
	}
	
	public ParserRule getBig_u_valueRule() {
		return getBig_u_valueAccess().getRule();
	}
	
	//escaped_char:
	//	CHAR ("a" | "b" | "f" | "n" | "r" | "t" | "v" | CHAR | "'" | '"');
	public Escaped_charElements getEscaped_charAccess() {
		return pEscaped_char;
	}
	
	public ParserRule getEscaped_charRule() {
		return getEscaped_charAccess().getRule();
	}
	
	//CHAR:
	//	"\'";
	public CHARElements getCHARAccess() {
		return pCHAR;
	}
	
	public ParserRule getCHARRule() {
		return getCHARAccess().getRule();
	}
	
	//terminal LETTER:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal OCTAL_DIGIT:
	//	"0".."7";
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal DECIMAL_DIGIT:
	//	"0".."9";
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal HEX_DIGIT:
	//	DECIMAL_DIGIT | "A".."F" | "a".."f";
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
