/*
 * generated by Xtext 2.13.0
 */
package com.ufcg.compiladores.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.ufcg.compiladores.ide.contentassist.antlr.internal.InternalGoParser;
import com.ufcg.compiladores.services.GoGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GoParser extends AbstractContentAssistParser {

	@Inject
	private GoGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGoParser createParser() {
		InternalGoParser result = new InternalGoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
					put(grammarAccess.getTypeLitAccess().getAlternatives(), "rule__TypeLit__Alternatives");
					put(grammarAccess.getFieldDeclAccess().getAlternatives_0(), "rule__FieldDecl__Alternatives_0");
					put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
					put(grammarAccess.getMethodSpecAccess().getAlternatives(), "rule__MethodSpec__Alternatives");
					put(grammarAccess.getChannelTypeAccess().getAlternatives_0(), "rule__ChannelType__Alternatives_0");
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getTopLevelDeclAccess().getAlternatives(), "rule__TopLevelDecl__Alternatives");
					put(grammarAccess.getConstDeclAccess().getAlternatives_1(), "rule__ConstDecl__Alternatives_1");
					put(grammarAccess.getTypeDeclAccess().getAlternatives_1(), "rule__TypeDecl__Alternatives_1");
					put(grammarAccess.getTypeSpecAccess().getAlternatives(), "rule__TypeSpec__Alternatives");
					put(grammarAccess.getVarDeclAccess().getAlternatives_1(), "rule__VarDecl__Alternatives_1");
					put(grammarAccess.getVarSpecAccess().getAlternatives_1(), "rule__VarSpec__Alternatives_1");
					put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBasicLitAccess().getAlternatives(), "rule__BasicLit__Alternatives");
					put(grammarAccess.getOperandNameAccess().getAlternatives(), "rule__OperandName__Alternatives");
					put(grammarAccess.getLiteralTypeAccess().getAlternatives(), "rule__LiteralType__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getKeyAccess().getAlternatives(), "rule__Key__Alternatives");
					put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
					put(grammarAccess.getArgumentsAccess().getAlternatives_1_0(), "rule__Arguments__Alternatives_1_0");
					put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
					put(grammarAccess.getBinary_opAccess().getAlternatives(), "rule__Binary_op__Alternatives");
					put(grammarAccess.getRel_opAccess().getAlternatives(), "rule__Rel_op__Alternatives");
					put(grammarAccess.getAdd_opAccess().getAlternatives(), "rule__Add_op__Alternatives");
					put(grammarAccess.getMul_opAccess().getAlternatives(), "rule__Mul_op__Alternatives");
					put(grammarAccess.getUnary_opAccess().getAlternatives(), "rule__Unary_op__Alternatives");
					put(grammarAccess.getCommentsAccess().getAlternatives(), "rule__Comments__Alternatives");
					put(grammarAccess.getIdentifierAccess().getAlternatives_1(), "rule__Identifier__Alternatives_1");
					put(grammarAccess.getInt_litAccess().getAlternatives(), "rule__Int_lit__Alternatives");
					put(grammarAccess.getHex_litAccess().getAlternatives_1(), "rule__Hex_lit__Alternatives_1");
					put(grammarAccess.getFloat_litAccess().getAlternatives(), "rule__Float_lit__Alternatives");
					put(grammarAccess.getString_litAccess().getAlternatives(), "rule__String_lit__Alternatives");
					put(grammarAccess.getRaw_string_litAccess().getAlternatives_1(), "rule__Raw_string_lit__Alternatives_1");
					put(grammarAccess.getInterpreted_string_litAccess().getAlternatives_1(), "rule__Interpreted_string_lit__Alternatives_1");
					put(grammarAccess.getUnicode_charAccess().getAlternatives(), "rule__Unicode_char__Alternatives");
					put(grammarAccess.getExponentAccess().getAlternatives_0(), "rule__Exponent__Alternatives_0");
					put(grammarAccess.getExponentAccess().getAlternatives_1(), "rule__Exponent__Alternatives_1");
					put(grammarAccess.getImaginary_litAccess().getAlternatives_0(), "rule__Imaginary_lit__Alternatives_0");
					put(grammarAccess.getRune_litAccess().getAlternatives_1(), "rule__Rune_lit__Alternatives_1");
					put(grammarAccess.getUnicode_valueAccess().getAlternatives(), "rule__Unicode_value__Alternatives");
					put(grammarAccess.getByte_valueAccess().getAlternatives(), "rule__Byte_value__Alternatives");
					put(grammarAccess.getEscaped_charAccess().getAlternatives_1(), "rule__Escaped_char__Alternatives_1");
					put(grammarAccess.getGreetingAccess().getGroup(), "rule__Greeting__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
					put(grammarAccess.getSliceTypeAccess().getGroup(), "rule__SliceType__Group__0");
					put(grammarAccess.getStructTypeAccess().getGroup(), "rule__StructType__Group__0");
					put(grammarAccess.getStructTypeAccess().getGroup_2(), "rule__StructType__Group_2__0");
					put(grammarAccess.getFieldDeclAccess().getGroup(), "rule__FieldDecl__Group__0");
					put(grammarAccess.getFieldDeclAccess().getGroup_0_0(), "rule__FieldDecl__Group_0_0__0");
					put(grammarAccess.getEmbeddedFieldAccess().getGroup(), "rule__EmbeddedField__Group__0");
					put(grammarAccess.getPointerTypeAccess().getGroup(), "rule__PointerType__Group__0");
					put(grammarAccess.getFunctionTypeAccess().getGroup(), "rule__FunctionType__Group__0");
					put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
					put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
					put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
					put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
					put(grammarAccess.getParameterDeclAccess().getGroup(), "rule__ParameterDecl__Group__0");
					put(grammarAccess.getInterfaceTypeAccess().getGroup(), "rule__InterfaceType__Group__0");
					put(grammarAccess.getInterfaceTypeAccess().getGroup_2(), "rule__InterfaceType__Group_2__0");
					put(grammarAccess.getMethodSpecAccess().getGroup_0(), "rule__MethodSpec__Group_0__0");
					put(grammarAccess.getMapTypeAccess().getGroup(), "rule__MapType__Group__0");
					put(grammarAccess.getChannelTypeAccess().getGroup(), "rule__ChannelType__Group__0");
					put(grammarAccess.getChannelTypeAccess().getGroup_0_1(), "rule__ChannelType__Group_0_1__0");
					put(grammarAccess.getChannelTypeAccess().getGroup_0_2(), "rule__ChannelType__Group_0_2__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getStatementListAccess().getGroup(), "rule__StatementList__Group__0");
					put(grammarAccess.getConstDeclAccess().getGroup(), "rule__ConstDecl__Group__0");
					put(grammarAccess.getConstDeclAccess().getGroup_1_1(), "rule__ConstDecl__Group_1_1__0");
					put(grammarAccess.getConstDeclAccess().getGroup_1_1_1(), "rule__ConstDecl__Group_1_1_1__0");
					put(grammarAccess.getConstSpecAccess().getGroup(), "rule__ConstSpec__Group__0");
					put(grammarAccess.getConstSpecAccess().getGroup_1(), "rule__ConstSpec__Group_1__0");
					put(grammarAccess.getIdentifierListAccess().getGroup(), "rule__IdentifierList__Group__0");
					put(grammarAccess.getIdentifierListAccess().getGroup_1(), "rule__IdentifierList__Group_1__0");
					put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
					put(grammarAccess.getTypeDeclAccess().getGroup(), "rule__TypeDecl__Group__0");
					put(grammarAccess.getTypeDeclAccess().getGroup_1_1(), "rule__TypeDecl__Group_1_1__0");
					put(grammarAccess.getTypeDeclAccess().getGroup_1_1_1(), "rule__TypeDecl__Group_1_1_1__0");
					put(grammarAccess.getAliasDeclAccess().getGroup(), "rule__AliasDecl__Group__0");
					put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup_1_1(), "rule__VarDecl__Group_1_1__0");
					put(grammarAccess.getVarDeclAccess().getGroup_1_1_1(), "rule__VarDecl__Group_1_1_1__0");
					put(grammarAccess.getVarSpecAccess().getGroup(), "rule__VarSpec__Group__0");
					put(grammarAccess.getVarSpecAccess().getGroup_1_0(), "rule__VarSpec__Group_1_0__0");
					put(grammarAccess.getVarSpecAccess().getGroup_1_0_1(), "rule__VarSpec__Group_1_0_1__0");
					put(grammarAccess.getVarSpecAccess().getGroup_1_1(), "rule__VarSpec__Group_1_1__0");
					put(grammarAccess.getShortVarDeclAccess().getGroup(), "rule__ShortVarDecl__Group__0");
					put(grammarAccess.getFunctionDeclAccess().getGroup(), "rule__FunctionDecl__Group__0");
					put(grammarAccess.getMethodDeclAccess().getGroup(), "rule__MethodDecl__Group__0");
					put(grammarAccess.getOperandAccess().getGroup_2(), "rule__Operand__Group_2__0");
					put(grammarAccess.getQualifiedIdentAccess().getGroup(), "rule__QualifiedIdent__Group__0");
					put(grammarAccess.getCompositeLitAccess().getGroup(), "rule__CompositeLit__Group__0");
					put(grammarAccess.getLiteralTypeAccess().getGroup_2(), "rule__LiteralType__Group_2__0");
					put(grammarAccess.getLiteralValueAccess().getGroup(), "rule__LiteralValue__Group__0");
					put(grammarAccess.getLiteralValueAccess().getGroup_1(), "rule__LiteralValue__Group_1__0");
					put(grammarAccess.getElementListAccess().getGroup(), "rule__ElementList__Group__0");
					put(grammarAccess.getElementListAccess().getGroup_1(), "rule__ElementList__Group_1__0");
					put(grammarAccess.getKeyedElementAccess().getGroup(), "rule__KeyedElement__Group__0");
					put(grammarAccess.getKeyedElementAccess().getGroup_0(), "rule__KeyedElement__Group_0__0");
					put(grammarAccess.getFunctionLitAccess().getGroup(), "rule__FunctionLit__Group__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_0(), "rule__PrimaryExpr__Group_0__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_1(), "rule__PrimaryExpr__Group_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_2(), "rule__PrimaryExpr__Group_2__0");
					put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
					put(grammarAccess.getIndexAccess().getGroup(), "rule__Index__Group__0");
					put(grammarAccess.getSliceAccess().getGroup(), "rule__Slice__Group__0");
					put(grammarAccess.getSliceLinhaAccess().getGroup(), "rule__SliceLinha__Group__0");
					put(grammarAccess.getSliceLinhaAccess().getGroup_0(), "rule__SliceLinha__Group_0__0");
					put(grammarAccess.getTypeAssertionAccess().getGroup(), "rule__TypeAssertion__Group__0");
					put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
					put(grammarAccess.getArgumentsAccess().getGroup_1(), "rule__Arguments__Group_1__0");
					put(grammarAccess.getArgumentsAccess().getGroup_1_0_1(), "rule__Arguments__Group_1_0_1__0");
					put(grammarAccess.getArgumentsAccess().getGroup_1_0_1_1(), "rule__Arguments__Group_1_0_1_1__0");
					put(grammarAccess.getMethodExprAccess().getGroup(), "rule__MethodExpr__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionLinhaAccess().getGroup(), "rule__ExpressionLinha__Group__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_1(), "rule__UnaryExpr__Group_1__0");
					put(grammarAccess.getConversionAccess().getGroup(), "rule__Conversion__Group__0");
					put(grammarAccess.getCommentsAccess().getGroup_0(), "rule__Comments__Group_0__0");
					put(grammarAccess.getCommentsAccess().getGroup_1(), "rule__Comments__Group_1__0");
					put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
					put(grammarAccess.getDecimal_litAccess().getGroup(), "rule__Decimal_lit__Group__0");
					put(grammarAccess.getOctal_litAccess().getGroup(), "rule__Octal_lit__Group__0");
					put(grammarAccess.getHex_litAccess().getGroup(), "rule__Hex_lit__Group__0");
					put(grammarAccess.getFloat_litAccess().getGroup_0(), "rule__Float_lit__Group_0__0");
					put(grammarAccess.getFloat_litAccess().getGroup_1(), "rule__Float_lit__Group_1__0");
					put(grammarAccess.getFloat_litAccess().getGroup_2(), "rule__Float_lit__Group_2__0");
					put(grammarAccess.getRaw_string_litAccess().getGroup(), "rule__Raw_string_lit__Group__0");
					put(grammarAccess.getInterpreted_string_litAccess().getGroup(), "rule__Interpreted_string_lit__Group__0");
					put(grammarAccess.getDecimalsAccess().getGroup(), "rule__Decimals__Group__0");
					put(grammarAccess.getExponentAccess().getGroup(), "rule__Exponent__Group__0");
					put(grammarAccess.getImaginary_litAccess().getGroup(), "rule__Imaginary_lit__Group__0");
					put(grammarAccess.getRune_litAccess().getGroup(), "rule__Rune_lit__Group__0");
					put(grammarAccess.getOctal_byte_valueAccess().getGroup(), "rule__Octal_byte_value__Group__0");
					put(grammarAccess.getHex_byte_valueAccess().getGroup(), "rule__Hex_byte_value__Group__0");
					put(grammarAccess.getLittle_u_valueAccess().getGroup(), "rule__Little_u_value__Group__0");
					put(grammarAccess.getBig_u_valueAccess().getGroup(), "rule__Big_u_value__Group__0");
					put(grammarAccess.getEscaped_charAccess().getGroup(), "rule__Escaped_char__Group__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
					put(grammarAccess.getGreetingAccess().getNameAssignment_1(), "rule__Greeting__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getTypeLitAssignment_1(), "rule__Type__TypeLitAssignment_1");
					put(grammarAccess.getArrayTypeAccess().getTypeAssignment_3(), "rule__ArrayType__TypeAssignment_3");
					put(grammarAccess.getElementTypeAccess().getTypeAssignment(), "rule__ElementType__TypeAssignment");
					put(grammarAccess.getStructTypeAccess().getFieldDeclAssignment_2_0(), "rule__StructType__FieldDeclAssignment_2_0");
					put(grammarAccess.getBaseTypeAccess().getTypeAssignment(), "rule__BaseType__TypeAssignment");
					put(grammarAccess.getFunctionTypeAccess().getSignatureAssignment_1(), "rule__FunctionType__SignatureAssignment_1");
					put(grammarAccess.getSignatureAccess().getResultAssignment_1(), "rule__Signature__ResultAssignment_1");
					put(grammarAccess.getParameterListAccess().getParameterDeclAssignment_1_1(), "rule__ParameterList__ParameterDeclAssignment_1_1");
					put(grammarAccess.getInterfaceTypeAccess().getMethodSpecAssignment_2_0(), "rule__InterfaceType__MethodSpecAssignment_2_0");
					put(grammarAccess.getMapTypeAccess().getElementTypeAssignment_4(), "rule__MapType__ElementTypeAssignment_4");
					put(grammarAccess.getKeyTypeAccess().getTypeAssignment(), "rule__KeyType__TypeAssignment");
					put(grammarAccess.getConstSpecAccess().getExpressionListAssignment_1_2(), "rule__ConstSpec__ExpressionListAssignment_1_2");
					put(grammarAccess.getExpressionListAccess().getExpressionAssignment_1_1(), "rule__ExpressionList__ExpressionAssignment_1_1");
					put(grammarAccess.getVarSpecAccess().getExpressionListAssignment_1_0_1_1(), "rule__VarSpec__ExpressionListAssignment_1_0_1_1");
					put(grammarAccess.getMethodDeclAccess().getSignatureAssignment_3(), "rule__MethodDecl__SignatureAssignment_3");
					put(grammarAccess.getCompositeLitAccess().getLiteralValueAssignment_1(), "rule__CompositeLit__LiteralValueAssignment_1");
					put(grammarAccess.getLiteralTypeAccess().getArrayTypeAssignment_1(), "rule__LiteralType__ArrayTypeAssignment_1");
					put(grammarAccess.getLiteralValueAccess().getElementListAssignment_1_0(), "rule__LiteralValue__ElementListAssignment_1_0");
					put(grammarAccess.getElementListAccess().getKeyedElementAssignment_1_1(), "rule__ElementList__KeyedElementAssignment_1_1");
					put(grammarAccess.getKeyedElementAccess().getElementAssignment_1(), "rule__KeyedElement__ElementAssignment_1");
					put(grammarAccess.getFunctionLitAccess().getFunctionBodyAssignment_2(), "rule__FunctionLit__FunctionBodyAssignment_2");
					put(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaAssignment_0_1(), "rule__PrimaryExpr__PrimaryExprLinhaAssignment_0_1");
					put(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaAssignment_1_1(), "rule__PrimaryExpr__PrimaryExprLinhaAssignment_1_1");
					put(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaAssignment_2_1(), "rule__PrimaryExpr__PrimaryExprLinhaAssignment_2_1");
					put(grammarAccess.getSliceAccess().getExpressionAssignment_3(), "rule__Slice__ExpressionAssignment_3");
					put(grammarAccess.getSliceAccess().getExpressionAssignment_5(), "rule__Slice__ExpressionAssignment_5");
					put(grammarAccess.getArgumentsAccess().getExpressionListAssignment_1_0_1_1_1(), "rule__Arguments__ExpressionListAssignment_1_0_1_1_1");
					put(grammarAccess.getExpressionAccess().getExpressionLinhaAssignment_1(), "rule__Expression__ExpressionLinhaAssignment_1");
					put(grammarAccess.getUnaryExprAccess().getPrimaryExprAssignment_0(), "rule__UnaryExpr__PrimaryExprAssignment_0");
					put(grammarAccess.getConversionAccess().getExpressionAssignment_2(), "rule__Conversion__ExpressionAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
